---
openapi: 3.0.3
info:
  title: Digital.ai Release API
  version: v1
paths:
  /api/v1/activities/{containerId}:
    get:
      operationId: getActivityLogs
      parameters:
        - name: containerId
          in: path
          required: true
          schema:
            pattern: ".*/(Release|Delivery|Trigger)[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityLogEntry'
      tags:
        - ActivityLogs
  /api/v1/analytics/planner/active:
    get:
      operationId: getActiveReleases
      parameters:
        - name: page
          in: query
          schema:
            format: int64
            default: 0
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            default: 100
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectedRelease'
      tags:
        - Planner
  /api/v1/analytics/planner/byIds:
    post:
      operationId: getReleasesByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectedRelease'
      tags:
        - Planner
  /api/v1/analytics/planner/completed:
    get:
      operationId: getCompletedReleases
      parameters:
        - name: page
          in: query
          schema:
            format: int64
            default: 0
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            default: 100
            type: integer
        - name: since
          in: query
          schema:
            format: int64
            default: 0
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectedRelease'
      tags:
        - Planner
  /api/v1/applications:
    post:
      operationId: createApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationView'
      tags:
        - Application
  /api/v1/applications/search:
    post:
      operationId: searchApplications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationView'
      tags:
        - Application
  /api/v1/applications/{applicationId}:
    get:
      operationId: getApplication
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            pattern: ".*/Application[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationView'
      tags:
        - Application
    put:
      operationId: updateApplication
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            pattern: ".*/Application[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationView'
      tags:
        - Application
    delete:
      operationId: deleteApplication
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            pattern: ".*/Application[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Application
  /api/v1/config:
    post:
      operationId: addConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseConfiguration'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseConfiguration'
      tags:
        - Configuration
  /api/v1/config/Configuration/variableValues/global:
    get:
      operationId: getGlobalVariableValues
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
      tags:
        - Configuration
  /api/v1/config/Configuration/variables/global:
    get:
      operationId: getGlobalVariables
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variable'
      tags:
        - Configuration
    post:
      operationId: addGlobalVariable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Configuration
  /api/v1/config/byTypeAndTitle:
    get:
      operationId: searchByTypeAndTitle
      parameters:
        - name: configurationType
          in: query
          schema:
            type: string
        - name: folderId
          in: query
          schema:
            type: string
        - name: folderOnly
          in: query
          schema:
            type: boolean
        - name: title
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReleaseConfiguration'
      tags:
        - Configuration
  /api/v1/config/status:
    post:
      operationId: checkStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationView'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedConfigurationStatusResponse'
      tags:
        - Configuration
  /api/v1/config/system-message:
    get:
      operationId: getSystemMessage
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemMessageSettings'
      tags:
        - Configuration
    put:
      operationId: updateSystemMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemMessageSettings'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemMessageSettings'
      tags:
        - Configuration
  /api/v1/config/{configurationId}:
    get:
      operationId: getConfiguration
      parameters:
        - name: configurationId
          in: path
          required: true
          schema:
            pattern: ".*/Configuration[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseConfiguration'
      tags:
        - Configuration
    put:
      operationId: updateConfiguration
      parameters:
        - name: configurationId
          in: path
          required: true
          schema:
            pattern: ".*/Configuration[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseConfiguration'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseConfiguration'
      tags:
        - Configuration
    delete:
      operationId: deleteConfiguration
      parameters:
        - name: configurationId
          in: path
          required: true
          schema:
            pattern: ".*/Configuration[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Configuration
  /api/v1/config/{configurationId}/status:
    post:
      operationId: checkStatus1
      parameters:
        - name: configurationId
          in: path
          required: true
          schema:
            pattern: ".*/Configuration[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedConfigurationStatusResponse'
      tags:
        - Configuration
  /api/v1/config/{variableId}:
    get:
      operationId: getGlobalVariable
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Configuration
    put:
      operationId: updateGlobalVariable
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Configuration
    delete:
      operationId: deleteGlobalVariable
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Configuration
  /api/v1/deliveries/search:
    post:
      operationId: searchDeliveries
      parameters:
        - name: orderBy
          in: query
          schema:
            allOf:
              - $ref: '#/components/schemas/DeliveryOrderMode'
              - default: START_DATE
        - name: page
          in: query
          schema:
            format: int64
            default: 0
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            default: 100
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delivery'
      tags:
        - Delivery
  /api/v1/deliveries/{deliveryId}:
    get:
      operationId: getDelivery
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
      tags:
        - Delivery
    put:
      operationId: updateDelivery
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
      tags:
        - Delivery
    delete:
      operationId: deleteDelivery
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Delivery
  /api/v1/deliveries/{deliveryId}/releases:
    get:
      operationId: getReleasesForDelivery
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeliveryFlowReleaseInfo'
      tags:
        - Delivery
  /api/v1/deliveries/{deliveryId}/stages:
    get:
      operationId: getStagesInDelivery
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stage'
      tags:
        - Delivery
  /api/v1/deliveries/{deliveryId}/timeline:
    get:
      operationId: getDeliveryTimeline
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryTimeline'
      tags:
        - Delivery
  /api/v1/deliveries/{deliveryId}/tracked-items:
    get:
      operationId: getTrackedItemsinDelivery
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackedItem'
      tags:
        - Delivery
    post:
      operationId: createTrackedItemInDelivery
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackedItem'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackedItem'
      tags:
        - Delivery
  /api/v1/deliveries/{itemId}:
    put:
      operationId: updateTrackedItemInDelivery
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            pattern: ".*TrackedItem[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackedItem'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackedItem'
      tags:
        - Delivery
    delete:
      operationId: deleteTrackedItemDelivery
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            pattern: ".*TrackedItem[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Delivery
  /api/v1/deliveries/{itemId}/descope:
    put:
      operationId: descopeTrackedItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            pattern: ".*TrackedItem[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Delivery
  /api/v1/deliveries/{itemId}/rescope:
    put:
      operationId: rescopeTrackedItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            pattern: ".*TrackedItem[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Delivery
  /api/v1/deliveries/{stageId}:
    put:
      operationId: updateStageInDelivery
      parameters:
        - name: stageId
          in: path
          required: true
          schema:
            pattern: ".*Stage[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stage'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
      tags:
        - Delivery
  /api/v1/deliveries/{stageId}/complete:
    post:
      operationId: completeStage
      parameters:
        - name: stageId
          in: path
          required: true
          schema:
            pattern: ".*Stage[^/]*"
            type: string
      responses:
        "201":
          description: Created
      tags:
        - Delivery
  /api/v1/deliveries/{stageId}/reopen:
    post:
      operationId: reopenStage
      parameters:
        - name: stageId
          in: path
          required: true
          schema:
            pattern: ".*Stage[^/]*"
            type: string
      responses:
        "201":
          description: Created
      tags:
        - Delivery
  /api/v1/deliveries/{stageId}/{itemId}/complete:
    put:
      operationId: completeTrackedItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            pattern: ".*TrackedItem[^/]*"
            type: string
        - name: stageId
          in: path
          required: true
          schema:
            pattern: ".*Stage[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Delivery
  /api/v1/deliveries/{stageId}/{itemId}/reset:
    put:
      operationId: resetTrackedItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            pattern: ".*TrackedItem[^/]*"
            type: string
        - name: stageId
          in: path
          required: true
          schema:
            pattern: ".*Stage[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Delivery
  /api/v1/deliveries/{stageId}/{itemId}/skip:
    put:
      operationId: skipTrackedItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            pattern: ".*TrackedItem[^/]*"
            type: string
        - name: stageId
          in: path
          required: true
          schema:
            pattern: ".*Stage[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Delivery
  /api/v1/deliveries/{transitionId}:
    put:
      operationId: updateTransitionInDelivery
      parameters:
        - name: transitionId
          in: path
          required: true
          schema:
            pattern: ".*Transition[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transition'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transition'
      tags:
        - Delivery
  /api/v1/deliveries/{transitionId}/complete:
    post:
      operationId: completeTransition
      parameters:
        - name: transitionId
          in: path
          required: true
          schema:
            pattern: ".*Transition[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTransition'
      responses:
        "201":
          description: Created
      tags:
        - Delivery
  /api/v1/delivery-patterns:
    post:
      operationId: createPattern
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/checkTitle:
    post:
      operationId: checkTitle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidatePattern'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/search:
    post:
      operationId: searchPatterns
      parameters:
        - name: page
          in: query
          schema:
            format: int64
            default: 0
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            default: 100
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryPatternFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delivery'
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{itemId}:
    put:
      operationId: updateTrackedItemInPattern
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            pattern: ".*TrackedItem[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackedItem'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackedItem'
      tags:
        - DeliveryPattern
    delete:
      operationId: deleteTrackedItemDeliveryPattern
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            pattern: ".*TrackedItem[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{patternIdOrTitle}:
    get:
      operationId: getPatternByIdOrTitle
      parameters:
        - name: patternIdOrTitle
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{patternId}:
    get:
      operationId: getPattern
      parameters:
        - name: patternId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
      tags:
        - DeliveryPattern
    put:
      operationId: updatePattern
      parameters:
        - name: patternId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
      tags:
        - DeliveryPattern
    delete:
      operationId: deletePattern
      parameters:
        - name: patternId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{patternId}/create:
    post:
      operationId: createDeliveryFromPattern
      parameters:
        - name: patternId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDelivery'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{patternId}/createStage:
    post:
      operationId: createStage
      parameters:
        - name: patternId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeliveryStage'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{patternId}/duplicate:
    post:
      operationId: duplicatePattern
      parameters:
        - name: patternId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateDeliveryPattern'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{patternId}/stages:
    get:
      operationId: getStagesInPattern
      parameters:
        - name: patternId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stage'
      tags:
        - DeliveryPattern
    post:
      operationId: createStage1
      parameters:
        - name: patternId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stage'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{patternId}/stages/{position}:
    post:
      operationId: createStage2
      parameters:
        - name: patternId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
        - name: position
          in: path
          required: true
          schema:
            format: int32
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stage'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{patternId}/tracked-items:
    get:
      operationId: getTrackedItemsInPattern
      parameters:
        - name: patternId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackedItem'
      tags:
        - DeliveryPattern
    post:
      operationId: createTrackedItemInPattern
      parameters:
        - name: patternId
          in: path
          required: true
          schema:
            pattern: ".*Delivery[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackedItem'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackedItem'
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{stageId}:
    put:
      operationId: updateStageInPattern
      parameters:
        - name: stageId
          in: path
          required: true
          schema:
            pattern: ".*Stage[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stage'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
      tags:
        - DeliveryPattern
    delete:
      operationId: deleteStage
      parameters:
        - name: stageId
          in: path
          required: true
          schema:
            pattern: ".*Stage[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{stageId}/batched:
    put:
      operationId: updateStageFromBatch
      parameters:
        - name: stageId
          in: path
          required: true
          schema:
            pattern: ".*Stage[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stage'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{stageId}/transitions:
    post:
      operationId: createTransition
      parameters:
        - name: stageId
          in: path
          required: true
          schema:
            pattern: ".*Stage[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transition'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transition'
      tags:
        - DeliveryPattern
  /api/v1/delivery-patterns/{transitionId}:
    put:
      operationId: updateTransitionInPattern
      parameters:
        - name: transitionId
          in: path
          required: true
          schema:
            pattern: ".*Transition[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transition'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transition'
      tags:
        - DeliveryPattern
    delete:
      operationId: deleteTransition
      parameters:
        - name: transitionId
          in: path
          required: true
          schema:
            pattern: ".*Transition[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - DeliveryPattern
  /api/v1/dsl/export/{templateId}:
    get:
      operationId: exportTemplateToXFile
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
        - name: exportTemplate
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
      tags:
        - Dsl
  /api/v1/dsl/preview/{templateId}:
    get:
      operationId: previewExportTemplateToXFile
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
        - name: exportTemplate
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
      tags:
        - Dsl
  /api/v1/environments:
    post:
      operationId: createEnvironment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentView'
      tags:
        - Environment
  /api/v1/environments/labels:
    post:
      operationId: createLabel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentLabelForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentLabelView'
      tags:
        - EnvironmentLabel
  /api/v1/environments/labels/search:
    post:
      operationId: searchLabels
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentLabelFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentLabelView'
      tags:
        - EnvironmentLabel
  /api/v1/environments/labels/{environmentLabelId}:
    get:
      operationId: getLabelById
      parameters:
        - name: environmentLabelId
          in: path
          required: true
          schema:
            pattern: ".*/EnvironmentLabel[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentLabelView'
      tags:
        - EnvironmentLabel
    put:
      operationId: updateLabel
      parameters:
        - name: environmentLabelId
          in: path
          required: true
          schema:
            pattern: ".*/EnvironmentLabel[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentLabelForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentLabelView'
      tags:
        - EnvironmentLabel
    delete:
      operationId: deleteEnvironmentLabel
      parameters:
        - name: environmentLabelId
          in: path
          required: true
          schema:
            pattern: ".*/EnvironmentLabel[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - EnvironmentLabel
  /api/v1/environments/reservations:
    post:
      operationId: createReservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentReservationForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentReservationView'
      tags:
        - EnvironmentReservation
  /api/v1/environments/reservations/search:
    post:
      operationId: searchReservations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentReservationSearchView'
      tags:
        - EnvironmentReservation
  /api/v1/environments/reservations/{environmentReservationId}:
    get:
      operationId: getReservation
      parameters:
        - name: environmentReservationId
          in: path
          required: true
          schema:
            pattern: ".*/EnvironmentReservation[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentReservationView'
      tags:
        - EnvironmentReservation
    put:
      operationId: updateReservation
      parameters:
        - name: environmentReservationId
          in: path
          required: true
          schema:
            pattern: ".*/EnvironmentReservation[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentReservationForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentReservationView'
      tags:
        - EnvironmentReservation
    post:
      operationId: addApplication
      parameters:
        - name: environmentReservationId
          in: path
          required: true
          schema:
            pattern: ".*/EnvironmentReservation[^/]*"
            type: string
        - name: applicationId
          in: query
          schema:
            type: string
      responses:
        "201":
          description: Created
      tags:
        - EnvironmentReservation
    delete:
      operationId: deleteEnvironmentReservation
      parameters:
        - name: environmentReservationId
          in: path
          required: true
          schema:
            pattern: ".*/EnvironmentReservation[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - EnvironmentReservation
  /api/v1/environments/search:
    post:
      operationId: searchEnvironments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentView'
      tags:
        - Environment
  /api/v1/environments/stages:
    post:
      operationId: createStage3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentStageForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentStageView'
      tags:
        - EnvironmentStage
  /api/v1/environments/stages/search:
    post:
      operationId: searchStages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentStageFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentStageView'
      tags:
        - EnvironmentStage
  /api/v1/environments/stages/{environmentStageId}:
    get:
      operationId: getStageById
      parameters:
        - name: environmentStageId
          in: path
          required: true
          schema:
            pattern: ".*/EnvironmentStage[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentStageView'
      tags:
        - EnvironmentStage
    put:
      operationId: updateStageInEnvironment
      parameters:
        - name: environmentStageId
          in: path
          required: true
          schema:
            pattern: ".*/EnvironmentStage[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentStageForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentStageView'
      tags:
        - EnvironmentStage
    delete:
      operationId: deleteEnvironmentStage
      parameters:
        - name: environmentStageId
          in: path
          required: true
          schema:
            pattern: ".*/EnvironmentStage[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - EnvironmentStage
  /api/v1/environments/{environmentId}:
    get:
      operationId: getEnvironment
      parameters:
        - name: environmentId
          in: path
          required: true
          schema:
            pattern: ".*/Environment[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentView'
      tags:
        - Environment
    put:
      operationId: updateEnvironment
      parameters:
        - name: environmentId
          in: path
          required: true
          schema:
            pattern: ".*/Environment[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentView'
      tags:
        - Environment
    delete:
      operationId: deleteEnvironment
      parameters:
        - name: environmentId
          in: path
          required: true
          schema:
            pattern: ".*/Environment[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Environment
  /api/v1/environments/{environmentId}/applications:
    get:
      operationId: getDeployableApplicationsForEnvironment
      parameters:
        - name: environmentId
          in: path
          required: true
          schema:
            pattern: ".*/Environment[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseApplicationView'
      tags:
        - Environment
  /api/v1/environments/{environmentId}/reservations:
    get:
      operationId: getReservationsForEnvironment
      parameters:
        - name: environmentId
          in: path
          required: true
          schema:
            pattern: ".*/Environment[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentReservationView'
      tags:
        - Environment
  /api/v1/facets:
    post:
      operationId: createFacet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationFacet'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facet'
      tags:
        - Facet
  /api/v1/facets/search:
    post:
      operationId: searchFacets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacetFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Facet'
      tags:
        - Facet
  /api/v1/facets/types:
    get:
      operationId: getFacetTypes
      parameters:
        - name: baseType
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {}
      tags:
        - Facet
  /api/v1/facets/{facetId}:
    get:
      operationId: getFacet
      parameters:
        - name: facetId
          in: path
          required: true
          schema:
            pattern: ".*Facet[^/-]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facet'
      tags:
        - Facet
    put:
      operationId: updateFacet
      parameters:
        - name: facetId
          in: path
          required: true
          schema:
            pattern: ".*Facet[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationFacet'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facet'
      tags:
        - Facet
    delete:
      operationId: deleteFacet
      parameters:
        - name: facetId
          in: path
          required: true
          schema:
            pattern: ".*Facet[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Facet
  /api/v1/folders/find:
    get:
      operationId: find
      parameters:
        - name: byPath
          in: query
          schema:
            type: string
        - name: depth
          in: query
          schema:
            format: int32
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
      tags:
        - Folder
  /api/v1/folders/list:
    get:
      operationId: listRoot
      parameters:
        - name: depth
          in: query
          schema:
            format: int32
            type: integer
        - name: page
          in: query
          schema:
            format: int64
            type: integer
        - name: permissions
          in: query
          schema:
            type: boolean
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
      tags:
        - Folder
  /api/v1/folders/permissions:
    get:
      operationId: getFolderPermissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - Folder
  /api/v1/folders/{folderId}:
    get:
      operationId: getFolder
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: depth
          in: query
          schema:
            format: int32
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
      tags:
        - Folder
    post:
      operationId: addFolder
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
      tags:
        - Folder
    delete:
      operationId: deleteFolder
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Folder
  /api/v1/folders/{folderId}/folderOwner:
    get:
      operationId: isFolderOwner
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
      tags:
        - Folder
  /api/v1/folders/{folderId}/list:
    get:
      operationId: list
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: depth
          in: query
          schema:
            format: int32
            type: integer
        - name: page
          in: query
          schema:
            format: int64
            type: integer
        - name: permissions
          in: query
          schema:
            type: boolean
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
      tags:
        - Folder
  /api/v1/folders/{folderId}/move:
    post:
      operationId: move
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: newParentId
          in: query
          schema:
            type: string
      responses:
        "201":
          description: Created
      tags:
        - Folder
  /api/v1/folders/{folderId}/releases:
    post:
      operationId: searchReleasesFolder
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: depth
          in: query
          schema:
            format: int32
            type: integer
        - name: numberbypage
          in: query
          schema:
            format: int64
            type: integer
        - name: page
          in: query
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleasesFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Release'
      tags:
        - Folder
  /api/v1/folders/{folderId}/rename:
    post:
      operationId: renameFolder
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: newName
          in: query
          schema:
            type: string
      responses:
        "201":
          description: Created
      tags:
        - Folder
  /api/v1/folders/{folderId}/teams:
    get:
      operationId: getFolderTeams
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamView'
      tags:
        - Folder
    post:
      operationId: setFolderTeams
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TeamView'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamView'
      tags:
        - Folder
  /api/v1/folders/{folderId}/templates:
    get:
      operationId: getFolderTemplates
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: depth
          in: query
          schema:
            format: int32
            type: integer
        - name: page
          in: query
          schema:
            format: int64
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Release'
      tags:
        - Folder
  /api/v1/folders/{folderId}/templates/{templateId}:
    post:
      operationId: moveTemplate
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
        - name: mergePermissions
          in: query
          schema:
            type: boolean
      responses:
        "201":
          description: Created
      tags:
        - Folder
  /api/v1/folders/{folderId}/variableValues:
    get:
      operationId: listVariableValues
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: folderOnly
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
      tags:
        - Folder
  /api/v1/folders/{folderId}/variables:
    get:
      operationId: listVariables
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: folderOnly
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variable'
      tags:
        - Folder
    post:
      operationId: createFolderVariable
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Folder
  /api/v1/folders/{folderId}/{variableId}:
    get:
      operationId: getFolderVariable
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*Variable[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Folder
    put:
      operationId: updateFolderVariable
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*Variable[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Folder
    delete:
      operationId: deleteFolderVariable
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            pattern: ".*(Folder[^/]*|Applications)"
            type: string
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*Variable[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Folder
  /api/v1/global-permissions:
    get:
      operationId: getGlobalPermissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - Permissions
  /api/v1/phases/byTitle:
    get:
      operationId: searchPhasesByTitle
      parameters:
        - name: phaseTitle
          in: query
          schema:
            type: string
        - name: releaseId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Phase'
      tags:
        - Phase
  /api/v1/phases/search:
    get:
      operationId: searchPhases
      parameters:
        - name: phaseTitle
          in: query
          schema:
            type: string
        - name: phaseVersion
          in: query
          schema:
            $ref: '#/components/schemas/PhaseVersion'
        - name: releaseId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Phase'
      tags:
        - Phase
  /api/v1/phases/{containerId}/tasks:
    post:
      operationId: addTaskToContainer
      parameters:
        - name: containerId
          in: path
          required: true
          schema:
            pattern: .*/Phase.*?
            type: string
        - name: position
          in: query
          schema:
            format: int32
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Phase
  /api/v1/phases/{phaseId}:
    get:
      operationId: getPhase
      parameters:
        - name: phaseId
          in: path
          required: true
          schema:
            pattern: ".*/Phase[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phase'
      tags:
        - Phase
    put:
      operationId: updatePhase
      parameters:
        - name: phaseId
          in: path
          required: true
          schema:
            pattern: ".*/Phase[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phase'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phase'
      tags:
        - Phase
    delete:
      operationId: deletePhase
      parameters:
        - name: phaseId
          in: path
          required: true
          schema:
            pattern: ".*/Phase[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Phase
  /api/v1/phases/{phaseId}/copy:
    post:
      operationId: copyPhase
      parameters:
        - name: phaseId
          in: path
          required: true
          schema:
            pattern: ".*/Phase[^/]*"
            type: string
        - name: targetPosition
          in: query
          schema:
            format: int32
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phase'
      tags:
        - Phase
  /api/v1/phases/{releaseId}/phase:
    post:
      operationId: addPhase
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
        - name: position
          in: query
          schema:
            format: int32
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phase'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phase'
      tags:
        - Phase
  /api/v1/release-groups:
    post:
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseGroup'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseGroup'
      tags:
        - ReleaseGroup
  /api/v1/release-groups/search:
    post:
      operationId: searchGroups
      parameters:
        - name: orderBy
          in: query
          schema:
            allOf:
              - $ref: '#/components/schemas/ReleaseGroupOrderMode'
              - default: RISK
        - name: page
          in: query
          schema:
            format: int64
            default: 0
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            default: 100
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseGroupFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReleaseGroup'
      tags:
        - ReleaseGroup
  /api/v1/release-groups/{groupId}:
    get:
      operationId: getGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            pattern: ".*ReleaseGroup[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseGroup'
      tags:
        - ReleaseGroup
    put:
      operationId: updateGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            pattern: ".*ReleaseGroup[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseGroup'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseGroup'
      tags:
        - ReleaseGroup
    delete:
      operationId: deleteGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            pattern: ".*ReleaseGroup[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - ReleaseGroup
  /api/v1/release-groups/{groupId}/members:
    get:
      operationId: getMembers
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            pattern: ".*ReleaseGroup[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - ReleaseGroup
    post:
      operationId: addMembersToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            pattern: ".*ReleaseGroup[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "201":
          description: Created
      tags:
        - ReleaseGroup
    delete:
      operationId: removeMembersFromGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            pattern: ".*ReleaseGroup[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "204":
          description: No Content
      tags:
        - ReleaseGroup
  /api/v1/release-groups/{groupId}/timeline:
    get:
      operationId: getReleaseGroupTimeline
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            pattern: ".*ReleaseGroup[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseGroupTimeline'
      tags:
        - ReleaseGroup
  /api/v1/releases:
    get:
      operationId: getReleases
      parameters:
        - name: depth
          in: query
          schema:
            format: int32
            default: 1
            type: integer
        - name: page
          in: query
          schema:
            format: int64
            default: 0
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            default: 100
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Release'
      tags:
        - Release
  /api/v1/releases/archived/{releaseId}:
    get:
      operationId: getArchivedRelease
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
        - name: roleIds
          in: query
          schema:
            default: false
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Release
  /api/v1/releases/attachments/{attachmentId}:
    get:
      operationId: downloadAttachment
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            pattern: ".*/Attachment[^/]*"
            type: string
      responses:
        "200":
          description: OK
      tags:
        - Release
  /api/v1/releases/byTitle:
    get:
      operationId: searchReleasesByTitle
      parameters:
        - name: releaseTitle
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Release'
      tags:
        - Release
  /api/v1/releases/count:
    post:
      operationId: countReleases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleasesFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseCountResults'
      tags:
        - Release
  /api/v1/releases/fullSearch:
    post:
      operationId: fullSearchReleases
      parameters:
        - name: archivePage
          in: query
          schema:
            format: int64
            type: integer
        - name: archiveResultsPerPage
          in: query
          schema:
            format: int64
            type: integer
        - name: page
          in: query
          schema:
            format: int64
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleasesFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseFullSearchResult'
      tags:
        - Release
  /api/v1/releases/permissions:
    get:
      operationId: getReleasePermissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - Release
  /api/v1/releases/search:
    post:
      operationId: searchReleasesRelease
      parameters:
        - name: page
          in: query
          schema:
            format: int64
            default: 0
            type: integer
        - name: pageIsOffset
          in: query
          schema:
            default: "false"
            type: boolean
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            default: 100
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleasesFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Release'
      tags:
        - Release
  /api/v1/releases/{releaseId}:
    get:
      operationId: getRelease
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: "((?!archived).)*Release[^/]*"
            type: string
        - name: roleIds
          in: query
          schema:
            default: false
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Release
    put:
      operationId: updateRelease
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Release'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Release
    delete:
      operationId: deleteRelease
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Release
  /api/v1/releases/{releaseId}/abort:
    post:
      operationId: abort
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbortRelease'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Release
  /api/v1/releases/{releaseId}/active-tasks:
    get:
      operationId: getActiveTasks
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
      tags:
        - Release
  /api/v1/releases/{releaseId}/restart:
    post:
      operationId: restartPhases
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
        - name: fromPhaseId
          in: query
          schema:
            type: string
        - name: fromTaskId
          in: query
          schema:
            type: string
        - name: phaseVersion
          in: query
          schema:
            $ref: '#/components/schemas/PhaseVersion'
        - name: resume
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Release
  /api/v1/releases/{releaseId}/resume:
    post:
      operationId: resume
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Release
  /api/v1/releases/{releaseId}/start:
    post:
      operationId: startRelease
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Release
  /api/v1/releases/{releaseId}/teams:
    get:
      operationId: getReleaseTeams
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamView'
      tags:
        - Release
    post:
      operationId: setReleaseTeams
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TeamView'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamView'
      tags:
        - Release
  /api/v1/releases/{releaseId}/variableValues:
    get:
      operationId: getVariableValues
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
      tags:
        - Release
  /api/v1/releases/{releaseId}/variables:
    get:
      operationId: getReleaseVariables
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variable'
      tags:
        - Release
    put:
      operationId: updateReleaseVariables
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: .*?
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variable'
      tags:
        - Release
    post:
      operationId: createReleaseVariable
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: .*?
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Release
  /api/v1/releases/{variableId}:
    get:
      operationId: getReleaseVariable
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Release
    put:
      operationId: updateReleaseVariable
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Release
    delete:
      operationId: deleteReleaseVariable
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Release
  /api/v1/releases/{variableId}/possibleValues:
    get:
      operationId: getPossibleReleaseVariableValues
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
      tags:
        - Release
  /api/v1/releases/{variableId}/replace:
    post:
      operationId: replaceReleaseVariables
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariableOrValue'
      responses:
        "201":
          description: Created
      tags:
        - Release
  /api/v1/releases/{variableId}/used:
    get:
      operationId: isVariableUsedRelease
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
      tags:
        - Release
  /api/v1/reports/download/{reportType}/{releaseId}:
    get:
      operationId: downloadReleaseReport
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
        - name: reportType
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      tags:
        - Report
  /api/v1/reports/records/search:
    post:
      operationId: searchRecords
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacetFilters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReportingRecord'
      tags:
        - Report
  /api/v1/reports/records/{releaseId}:
    get:
      operationId: getRecordsForRelease
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReportingRecord'
      tags:
        - Report
  /api/v1/reports/records/{taskId}:
    get:
      operationId: getRecordsForTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReportingRecord'
      tags:
        - Report
  /api/v1/risks/assessments/{riskAssessmentId}:
    get:
      operationId: getAssessment
      parameters:
        - name: riskAssessmentId
          in: path
          required: true
          schema:
            pattern: ".*RiskAssessment[^/-]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskAssessment'
      tags:
        - RiskAssessment
  /api/v1/risks/assessors:
    get:
      operationId: getAllRiskAssessors
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RiskAssessor'
      tags:
        - Risk
  /api/v1/risks/config:
    get:
      operationId: getRiskGlobalThresholds
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskGlobalThresholds'
      tags:
        - Risk
    put:
      operationId: updateRiskGlobalThresholds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskGlobalThresholds'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskGlobalThresholds'
      tags:
        - Risk
  /api/v1/risks/profiles:
    get:
      operationId: getRiskProfiles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RiskProfile'
      tags:
        - Risk
    post:
      operationId: createRiskProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskProfile'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskProfile'
      tags:
        - Risk
  /api/v1/risks/profiles/{riskProfileId}:
    get:
      operationId: getRiskProfile
      parameters:
        - name: riskProfileId
          in: path
          required: true
          schema:
            pattern: ".*/RiskProfile[^/]*|new"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskProfile'
      tags:
        - Risk
    put:
      operationId: updateRiskProfile
      parameters:
        - name: riskProfileId
          in: path
          required: true
          schema:
            pattern: ".*/RiskProfile[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskProfile'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskProfile'
      tags:
        - Risk
    delete:
      operationId: deleteRiskProfile
      parameters:
        - name: riskProfileId
          in: path
          required: true
          schema:
            pattern: ".*/RiskProfile[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Risk
  /api/v1/risks/profiles/{riskProfileId}/copy:
    post:
      operationId: copyRiskProfile
      parameters:
        - name: riskProfileId
          in: path
          required: true
          schema:
            pattern: ".*/RiskProfile[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskProfile'
      tags:
        - Risk
  /api/v1/risks/{riskId}:
    get:
      operationId: getRisk
      parameters:
        - name: riskId
          in: path
          required: true
          schema:
            pattern: .*/Risk
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Risk'
      tags:
        - Risk
  /api/v1/roles:
    get:
      operationId: getRoles
      parameters:
        - name: page
          in: query
          schema:
            format: int32
            default: 0
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int32
            default: 100
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleView'
      tags:
        - Roles
    put:
      operationId: updateRoles
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RoleView'
      responses:
        "204":
          description: No Content
      tags:
        - Roles
    post:
      operationId: createRoles
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RoleView'
      responses:
        "201":
          description: Created
      tags:
        - Roles
  /api/v1/roles/{roleName}:
    get:
      operationId: getRole
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            pattern: ".*[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleView'
      tags:
        - Roles
    put:
      operationId: updateRoles1
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            pattern: ".*[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleView'
      responses:
        "204":
          description: No Content
      tags:
        - Roles
    post:
      operationId: createRoles1
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            pattern: ".*[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleView'
      responses:
        "201":
          description: Created
      tags:
        - Roles
    delete:
      operationId: deleteRoles
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            pattern: ".*[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Roles
  /api/v1/roles/{roleName}/rename:
    post:
      operationId: renameRoles
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            pattern: ".*[^/]*"
            type: string
        - name: newName
          in: query
          schema:
            type: string
      responses:
        "201":
          description: Created
      tags:
        - Roles
  /api/v1/tasks/byTitle:
    get:
      operationId: searchTasksByTitle
      parameters:
        - name: phaseTitle
          in: query
          schema:
            type: string
        - name: releaseId
          in: query
          schema:
            type: string
        - name: taskTitle
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{conditionId}:
    post:
      operationId: updateCondition
      parameters:
        - name: conditionId
          in: path
          required: true
          schema:
            pattern: ".*/GateCondition[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Condition1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GateCondition'
      tags:
        - Task
    delete:
      operationId: deleteCondition
      parameters:
        - name: conditionId
          in: path
          required: true
          schema:
            pattern: ".*/GateCondition[^/]*?"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Task
  /api/v1/tasks/{containerId}/tasks:
    post:
      operationId: addTaskTask
      parameters:
        - name: containerId
          in: path
          required: true
          schema:
            pattern: .*?
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{dependencyId}:
    delete:
      operationId: deleteDependency
      parameters:
        - name: dependencyId
          in: path
          required: true
          schema:
            pattern: ".*/Dependency[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Task
  /api/v1/tasks/{taskId}:
    get:
      operationId: getTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
    put:
      operationId: updateTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
    delete:
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Task
  /api/v1/tasks/{taskId}/abort:
    post:
      operationId: abortTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/assign/{username}:
    post:
      operationId: assignTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
        - name: username
          in: path
          required: true
          schema:
            pattern: .*?
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/attachments:
    post:
      operationId: addAttachments
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'
      tags:
        - Task
  /api/v1/tasks/{taskId}/attachments/{attachmentId}:
    delete:
      operationId: deleteAttachment
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            pattern: ".*/Attachment[^/]*"
            type: string
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Task
  /api/v1/tasks/{taskId}/changeType:
    post:
      operationId: changeTaskType
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
        - name: targetType
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/comment:
    post:
      operationId: commentTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/complete:
    post:
      operationId: completeTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/conditions:
    post:
      operationId: addCondition
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Condition1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GateCondition'
      tags:
        - Task
  /api/v1/tasks/{taskId}/copy:
    post:
      operationId: copyTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
        - name: targetContainerId
          in: query
          schema:
            type: string
        - name: targetPosition
          in: query
          schema:
            format: int32
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/dependencies/{targetId}:
    post:
      operationId: addDependency
      parameters:
        - name: targetId
          in: path
          required: true
          schema:
            pattern: .*?
            type: string
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dependency'
      tags:
        - Task
  /api/v1/tasks/{taskId}/fail:
    post:
      operationId: failTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/lock:
    put:
      operationId: lockTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Task
    delete:
      operationId: unlockTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Task
  /api/v1/tasks/{taskId}/reopen:
    post:
      operationId: reopenTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/retry:
    post:
      operationId: retryTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/skip:
    post:
      operationId: skipTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/start:
    post:
      operationId: startTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartTask'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/startNow:
    post:
      operationId: startTask1
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      tags:
        - Task
  /api/v1/tasks/{taskId}/variables:
    get:
      operationId: getTaskVariables
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variable'
      tags:
        - Task
    put:
      operationId: updateInputVariables
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            pattern: ".*/Task[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variable'
      tags:
        - Task
  /api/v1/templates:
    get:
      operationId: getTemplates
      parameters:
        - name: depth
          in: query
          schema:
            format: int32
            default: 1
            type: integer
        - name: page
          in: query
          schema:
            format: int64
            default: 0
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            default: 100
            type: integer
        - name: tag
          in: query
          schema:
            type: array
            items:
              type: string
        - name: title
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Release'
      tags:
        - Template
    post:
      operationId: createTemplate
      parameters:
        - name: folderId
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Release'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Template
  /api/v1/templates/import:
    post:
      operationId: importTemplate
      parameters:
        - name: folderId
          in: query
          schema:
            type: string
        - name: version
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImportResult'
      tags:
        - Template
  /api/v1/templates/permissions:
    get:
      operationId: getTemplatePermissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - Template
  /api/v1/templates/zip/{templateId}:
    get:
      operationId: exportTemplateToZip
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "200":
          description: OK
      tags:
        - Template
  /api/v1/templates/{releaseId}/variables:
    put:
      operationId: updateTemplateVariables
      parameters:
        - name: releaseId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variable'
      tags:
        - Template
  /api/v1/templates/{templateId}:
    get:
      operationId: getTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Template
    put:
      operationId: updateTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Release'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Template
    delete:
      operationId: deleteTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Template
  /api/v1/templates/{templateId}/copy:
    post:
      operationId: copyTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyTemplate'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Template
  /api/v1/templates/{templateId}/create:
    post:
      operationId: createTemplate1
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRelease'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Template
  /api/v1/templates/{templateId}/start:
    post:
      operationId: startTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartRelease'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      tags:
        - Template
  /api/v1/templates/{templateId}/teams:
    get:
      operationId: getTemplateTeams
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamView'
      tags:
        - Template
    post:
      operationId: setTemplateTeams
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TeamView'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamView'
      tags:
        - Template
  /api/v1/templates/{templateId}/variables:
    get:
      operationId: getTemplateVariables
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variable'
      tags:
        - Template
    post:
      operationId: createTemplateVariable
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            pattern: ".*Release[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Template
  /api/v1/templates/{variableId}:
    get:
      operationId: getTemplateVariable
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Template
    put:
      operationId: updateTemplateVariable
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
      tags:
        - Template
    delete:
      operationId: deleteTemplateVariable
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Template
  /api/v1/templates/{variableId}/possibleValues:
    get:
      operationId: getPossibleTemplateVariableValues
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
      tags:
        - Template
  /api/v1/templates/{variableId}/replace:
    post:
      operationId: replaceTemplateVariables
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariableOrValue'
      responses:
        "201":
          description: Created
      tags:
        - Template
  /api/v1/templates/{variableId}/used:
    get:
      operationId: isVariableUsedTemplate
      parameters:
        - name: variableId
          in: path
          required: true
          schema:
            pattern: ".*/Variable[^/]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
      tags:
        - Template
  /api/v1/triggers:
    get:
      operationId: searchTriggers
      parameters:
        - name: folderId
          in: query
          schema:
            type: string
        - name: folderTitle
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            format: int32
            default: 0
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int32
            default: 100
            type: integer
        - name: templateId
          in: query
          schema:
            type: string
        - name: templateTitle
          in: query
          schema:
            type: string
        - name: triggerTitle
          in: query
          schema:
            type: string
        - name: triggerType
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
      tags:
        - Triggers
    post:
      operationId: addTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
      tags:
        - Triggers
  /api/v1/triggers/disable:
    post:
      operationId: disableTriggers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkActionResultView'
      tags:
        - Triggers
  /api/v1/triggers/disable/all:
    post:
      operationId: disableAllTriggers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkActionResultView'
      tags:
        - Triggers
  /api/v1/triggers/enable:
    post:
      operationId: enableTriggers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkActionResultView'
      tags:
        - Triggers
  /api/v1/triggers/enable/all:
    post:
      operationId: enableAllTriggers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkActionResultView'
      tags:
        - Triggers
  /api/v1/triggers/types:
    get:
      operationId: getTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {}
      tags:
        - Triggers
  /api/v1/triggers/{triggerId}:
    get:
      operationId: getTrigger
      parameters:
        - name: triggerId
          in: path
          required: true
          schema:
            pattern: ".*Trigger[^/-]*"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
      tags:
        - Triggers
    put:
      operationId: updateTrigger
      parameters:
        - name: triggerId
          in: path
          required: true
          schema:
            pattern: ".*Trigger[^/-]*"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
      tags:
        - Triggers
    delete:
      operationId: removeTrigger
      parameters:
        - name: triggerId
          in: path
          required: true
          schema:
            pattern: ".*/Trigger[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Triggers
  /api/v1/triggers/{triggerId}/disable:
    put:
      operationId: disableTrigger
      parameters:
        - name: triggerId
          in: path
          required: true
          schema:
            pattern: ".*/Trigger[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Triggers
  /api/v1/triggers/{triggerId}/enable:
    put:
      operationId: enableTrigger
      parameters:
        - name: triggerId
          in: path
          required: true
          schema:
            pattern: ".*/Trigger[^/]*"
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Triggers
  /api/v1/triggers/{triggerId}/run:
    post:
      operationId: runTrigger
      parameters:
        - name: triggerId
          in: path
          required: true
          schema:
            pattern: ".*/Trigger[^/]*"
            type: string
      responses:
        "201":
          description: Created
      tags:
        - Triggers
  /api/v1/users:
    get:
      operationId: findUsers
      parameters:
        - name: email
          in: query
          schema:
            type: string
        - name: external
          in: query
          schema:
            type: boolean
        - name: fullName
          in: query
          schema:
            type: string
        - name: lastActiveAfter
          in: query
          schema:
            $ref: '#/components/schemas/Date'
        - name: lastActiveBefore
          in: query
          schema:
            $ref: '#/components/schemas/Date'
        - name: loginAllowed
          in: query
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            format: int64
            default: 0
            type: integer
        - name: resultsPerPage
          in: query
          schema:
            format: int64
            default: 100
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAccount'
      tags:
        - User
    put:
      operationId: updateUsersRest
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserAccount'
      responses:
        "200":
          description: OK
      tags:
        - User
  /api/v1/users/{username}:
    get:
      operationId: getUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            pattern: .*
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
      tags:
        - User
    put:
      operationId: updateUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            pattern: .*
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
      responses:
        "200":
          description: OK
      tags:
        - User
    post:
      operationId: createUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            pattern: "[^/]+"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
      responses:
        "200":
          description: OK
      tags:
        - User
    delete:
      operationId: deleteUserRest
      parameters:
        - name: username
          in: path
          required: true
          schema:
            pattern: .*
            type: string
      responses:
        "200":
          description: OK
      tags:
        - User
  /api/v1/users/{username}/password:
    post:
      operationId: updatePassword
      parameters:
        - name: username
          in: path
          required: true
          schema:
            pattern: "[^/]+"
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordView'
      responses:
        "200":
          description: OK
      tags:
        - User
components:
  schemas:
    AbortRelease:
      type: object
      properties:
        abortComment:
          type: string
    ActivityLogEntry:
      type: object
      properties:
        username:
          type: string
        activityType:
          type: string
        message:
          type: string
        eventTime:
          $ref: '#/components/schemas/Date'
        targetType:
          type: string
        targetId:
          type: string
        dataId:
          type: string
    ApplicationFilters:
      type: object
      properties:
        title:
          type: string
        environments:
          type: array
          items:
            type: string
    ApplicationForm:
      type: object
      properties:
        title:
          type: string
        environmentIds:
          type: array
          items:
            type: string
    ApplicationView:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        environments:
          type: array
          items:
            $ref: '#/components/schemas/BaseEnvironmentView'
    Attachment:
      type: object
      properties:
        file:
          type: object
        contentType:
          type: string
        exportFilename:
          type: string
        fileUri:
          type: string
        placeholders:
          uniqueItems: true
          type: array
          items:
            type: string
        textFileNamesRegex:
          type: string
        excludeFileNamesRegex:
          type: string
        fileEncodings:
          type: object
          additionalProperties:
            type: string
        checksum:
          type: string
    BaseApplicationView:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
    BaseEnvironmentView:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
    BlackoutMetadata:
      type: object
      properties:
        periods:
          type: array
          items:
            $ref: '#/components/schemas/BlackoutPeriod'
    BlackoutPeriod:
      type: object
      properties:
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
    BulkActionResultView:
      type: object
      properties:
        updatedIds:
          type: array
          items:
            type: string
    ChangePasswordView:
      type: object
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
    CiProperty:
      type: object
      properties:
        wrapped:
          $ref: '#/components/schemas/CiProperty'
        lastProperty:
          $ref: '#/components/schemas/Property'
        parent:
          type: object
        exists:
          type: boolean
        propertyName:
          type: string
        value:
          type: object
        parentCi:
          type: object
        descriptor:
          type: object
        kind:
          type: object
        category:
          type: string
        password:
          type: boolean
        indexed:
          type: boolean
    Comment:
      type: object
      properties:
        text:
          type: string
        author:
          type: string
        date:
          $ref: '#/components/schemas/Date'
        creationDate:
          $ref: '#/components/schemas/Date'
    Comment1:
      type: object
      properties:
        comment:
          type: string
    CompleteTransition:
      type: object
      properties:
        transitionItems:
          type: array
          items:
            type: string
        closeStages:
          type: boolean
    Condition:
      type: object
      properties:
        satisfied:
          type: boolean
        satisfiedDate:
          $ref: '#/components/schemas/Date'
        description:
          type: string
        active:
          type: boolean
        inputProperties:
          type: array
          items: {}
        leaf:
          type: boolean
        allConditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
        leafConditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
    Condition1:
      type: object
      properties:
        title:
          type: string
        checked:
          type: boolean
    ReleaseConfiguration:
      type: object
      properties:
        folderId:
          type: string
        title:
          type: string
        variableMapping:
          type: object
          additionalProperties:
            type: string
    ConfigurationFacet:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/FacetScope'
        targetId:
          type: string
        configurationUri:
          type: string
        variableMapping:
          type: object
          additionalProperties:
            type: string
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
        propertiesWithVariables:
          type: array
          items: {}
    ConfigurationView:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        properties:
          type: object
          additionalProperties:
            type: object
        id:
          type: string
    CopyTemplate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
    CreateDelivery:
      type: object
      properties:
        folderId:
          type: string
        title:
          type: string
        description:
          type: string
        duration:
          format: int32
          type: integer
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        autoComplete:
          type: boolean
    CreateDeliveryStage:
      type: object
      properties:
        after:
          type: string
        before:
          type: string
        stage:
          $ref: '#/components/schemas/Stage'
    CreateRelease:
      type: object
      properties:
        releaseTitle:
          type: string
        folderId:
          type: string
        variables:
          type: object
          additionalProperties:
            type: object
        releaseVariables:
          type: object
          additionalProperties:
            type: string
        releasePasswordVariables:
          type: object
          additionalProperties:
            type: string
        scheduledStartDate:
          $ref: '#/components/schemas/Date'
        autoStart:
          type: boolean
        startedFromTaskId:
          type: string
        releaseOwner:
          type: string
    Date:
      format: date
      type: string
      example: 2022-03-10
    Delivery:
      type: object
      properties:
        $metadata:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InternalMetadata'
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/DeliveryStatus'
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        plannedDuration:
          format: int32
          type: integer
        releaseIds:
          uniqueItems: true
          type: array
          items:
            type: string
        folderId:
          type: string
        originPatternId:
          type: string
        stages:
          type: array
          items:
            $ref: '#/components/schemas/Stage'
        trackedItems:
          type: array
          items:
            $ref: '#/components/schemas/TrackedItem'
        subscribers:
          type: array
          items:
            $ref: '#/components/schemas/Subscriber'
        autoComplete:
          type: boolean
        template:
          type: boolean
        transitions:
          type: array
          items:
            $ref: '#/components/schemas/Transition'
        stagesBeforeFirstOpenTransition:
          type: array
          items:
            $ref: '#/components/schemas/Stage'
        updatable:
          type: boolean
    DeliveryFilters:
      type: object
      properties:
        title:
          type: string
        strictTitleMatch:
          type: boolean
        trackedItemTitle:
          type: string
        strictTrackedItemTitleMatch:
          type: boolean
        folderId:
          type: string
        originPatternId:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryStatus'
    DeliveryFlowReleaseInfo:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        status:
          type: string
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        archived:
          type: boolean
    DeliveryOrderMode:
      enum:
        - START_DATE_DELIVERY
        - END_DATE_DELIVERY
        - CREATED_DATE_DELIVERY
      type: string
    DeliveryPatternFilters:
      type: object
      properties:
        title:
          type: string
        strictTitleMatch:
          type: boolean
        trackedItemTitle:
          type: string
        strictTrackedItemTitleMatch:
          type: boolean
        folderId:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryStatus'
    DeliveryStatus:
      enum:
        - TEMPLATE_DELIVERY
        - IN_PROGRESS_DELIVERY
        - COMPLETED_DELIVERY
      type: string
    DeliveryTimeline:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        releases:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseTimeline'
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
    Dependency:
      type: object
      properties:
        gateTask:
          $ref: '#/components/schemas/GateTask'
        target:
          $ref: '#/components/schemas/PlanItem'
        targetId:
          type: string
        archivedTargetTitle:
          type: string
        archivedTargetId:
          type: string
        archivedAsResolved:
          type: boolean
        $metadata:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InternalMetadata'
        archived:
          type: boolean
        done:
          type: boolean
        aborted:
          type: boolean
        targetDisplayPath:
          type: string
        targetTitle:
          type: string
        validAllowedPlanItemId:
          type: boolean
    DuplicateDeliveryPattern:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
    EnvironmentFilters:
      type: object
      properties:
        title:
          type: string
        stage:
          type: string
        labels:
          type: array
          items:
            type: string
    EnvironmentForm:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        stageId:
          type: string
        labelIds:
          type: array
          items:
            type: string
    EnvironmentLabelFilters:
      type: object
      properties:
        title:
          type: string
    EnvironmentLabelForm:
      type: object
      properties:
        title:
          type: string
        color:
          type: string
    EnvironmentLabelView:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        color:
          type: string
    EnvironmentReservationForm:
      type: object
      properties:
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        note:
          type: string
        environmentId:
          type: string
        applicationIds:
          type: array
          items:
            type: string
    EnvironmentReservationSearchView:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        stage:
          $ref: '#/components/schemas/EnvironmentStageView'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentLabelView'
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/ReservationSearchView'
    EnvironmentReservationView:
      type: object
      properties:
        id:
          type: string
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        note:
          type: string
        environment:
          $ref: '#/components/schemas/EnvironmentView'
        applications:
          type: array
          items:
            $ref: '#/components/schemas/BaseApplicationView'
    EnvironmentStageFilters:
      type: object
      properties:
        title:
          type: string
    EnvironmentStageForm:
      type: object
      properties:
        title:
          type: string
    EnvironmentStageView:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
    EnvironmentView:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        stage:
          $ref: '#/components/schemas/EnvironmentStageView'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentLabelView'
    ExternalVariableValue:
      type: object
      properties:
        server:
          type: string
        serverType:
          type: string
        path:
          type: string
        externalKey:
          type: string
    Facet:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/FacetScope'
        targetId:
          type: string
        configurationUri:
          type: string
        variableMapping:
          type: object
          additionalProperties:
            type: string
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
        propertiesWithVariables:
          type: array
          items: {}
    FacetFilters:
      type: object
      properties:
        parentId:
          type: string
        targetId:
          type: string
        types:
          type: array
          items: {}
    FacetScope:
      enum:
        - TASK
      type: string
    FlagStatus:
      enum:
        - OK_FLAG
        - ATTENTION_NEEDED_FLAG
        - AT_RISK_FLAG
      type: string
    Folder:
      type: object
      properties:
        title:
          type: string
        children:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Folder'
        $metadata:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InternalMetadata'
        allVariables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        folderVariables:
          $ref: '#/components/schemas/FolderVariables'
    FolderVariables:
      type: object
      properties:
        variables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        stringVariableValues:
          type: object
          additionalProperties:
            type: string
        passwordVariableValues:
          type: object
          additionalProperties:
            type: string
        variablesByKeys:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Variable'
    GateCondition:
      type: object
      properties:
        title:
          type: string
        checked:
          type: boolean
    GateTask:
      type: object
      properties:
        scheduledStartDate:
          $ref: '#/components/schemas/Date'
        flagStatus:
          $ref: '#/components/schemas/FlagStatus'
        title:
          type: string
        description:
          type: string
        owner:
          type: string
        dueDate:
          $ref: '#/components/schemas/Date'
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        plannedDuration:
          format: int32
          type: integer
        flagComment:
          type: string
        overdueNotified:
          type: boolean
        flagged:
          type: boolean
        startOrScheduledDate:
          $ref: '#/components/schemas/Date'
        endOrDueDate:
          $ref: '#/components/schemas/Date'
        overdue:
          type: boolean
        orCalculateDueDate:
          type: string
          allOf:
            - $ref: '#/components/schemas/Date'
          nullable: true
        computedPlannedDuration:
          type: object
        actualDuration:
          type: object
        releaseUid:
          format: int32
          type: integer
        ciUid:
          format: int32
          type: integer
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        container:
          $ref: '#/components/schemas/TaskContainer'
        facets:
          type: array
          items:
            $ref: '#/components/schemas/Facet'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        status:
          $ref: '#/components/schemas/TaskStatus'
        team:
          type: string
        watchers:
          uniqueItems: true
          type: array
          items:
            type: string
        waitForScheduledStartDate:
          type: boolean
        delayDuringBlackout:
          type: boolean
        postponedDueToBlackout:
          type: boolean
        postponedUntilEnvironmentsAreReserved:
          type: boolean
        originalScheduledStartDate:
          $ref: '#/components/schemas/Date'
        hasBeenFlagged:
          type: boolean
        hasBeenDelayed:
          type: boolean
        precondition:
          type: string
        failureHandler:
          type: string
        taskFailureHandlerEnabled:
          type: boolean
        taskRecoverOp:
          $ref: '#/components/schemas/TaskRecoverOp'
        failuresCount:
          format: int32
          type: integer
        executionId:
          type: string
        variableMapping:
          type: object
          additionalProperties:
            type: string
        externalVariableMapping:
          type: object
          additionalProperties:
            type: string
        maxCommentSize:
          format: int32
          type: integer
        tags:
          type: array
          items:
            type: string
        configurationUri:
          type: string
        dueSoonNotified:
          type: boolean
        locked:
          type: boolean
        checkAttributes:
          type: boolean
        abortScript:
          type: string
        phase:
          $ref: '#/components/schemas/Phase'
        blackoutMetadata:
          $ref: '#/components/schemas/BlackoutMetadata'
        flaggedCount:
          format: int32
          type: integer
        delayedCount:
          format: int32
          type: integer
        done:
          type: boolean
        doneInAdvance:
          type: boolean
        defunct:
          type: boolean
        updatable:
          type: boolean
        aborted:
          type: boolean
        notYetReached:
          type: boolean
        planned:
          type: boolean
        active:
          type: boolean
        inProgress:
          type: boolean
        pending:
          type: boolean
        waitingForInput:
          type: boolean
        failed:
          type: boolean
        failing:
          type: boolean
        completedInAdvance:
          type: boolean
        skipped:
          type: boolean
        skippedInAdvance:
          type: boolean
        preconditionInProgress:
          type: boolean
        failureHandlerInProgress:
          type: boolean
        abortScriptInProgress:
          type: boolean
        facetInProgress:
          type: boolean
        movable:
          type: boolean
        gate:
          type: boolean
        taskGroup:
          type: boolean
        parallelGroup:
          type: boolean
        preconditionEnabled:
          type: boolean
        failureHandlerEnabled:
          type: boolean
        release:
          $ref: '#/components/schemas/Release'
        displayPath:
          type: string
        releaseOwner:
          type: string
        allTasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        children:
          type: array
          items:
            $ref: '#/components/schemas/PlanItem'
        inputVariables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        referencedVariables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        unboundRequiredVariables:
          type: array
          items:
            type: string
        automated:
          type: boolean
        taskType:
          type: object
        dueSoon:
          type: boolean
        elapsedDurationFraction:
          format: double
          type: number
        url:
          type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/GateCondition'
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/Dependency'
        open:
          type: boolean
        openInAdvance:
          type: boolean
        completable:
          type: boolean
        abortedDependencyTitles:
          type: string
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
    GlobalVariables:
      type: object
      properties:
        variables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        variablesByKeys:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Variable'
        stringVariableValues:
          type: object
          additionalProperties:
            type: string
        passwordVariableValues:
          type: object
          additionalProperties:
            type: string
    ImportResult:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        warnings:
          type: array
          items:
            type: string
    InternalMetadata:
      type: object
    MemberType:
      enum:
        - PRINCIPAL
        - ROLE
      type: string
    Phase:
      type: object
      properties:
        locked:
          type: boolean
        title:
          type: string
        description:
          type: string
        owner:
          type: string
        scheduledStartDate:
          $ref: '#/components/schemas/Date'
        dueDate:
          $ref: '#/components/schemas/Date'
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        plannedDuration:
          format: int32
          type: integer
        flagStatus:
          $ref: '#/components/schemas/FlagStatus'
        flagComment:
          type: string
        overdueNotified:
          type: boolean
        flagged:
          type: boolean
        startOrScheduledDate:
          $ref: '#/components/schemas/Date'
        endOrDueDate:
          $ref: '#/components/schemas/Date'
        overdue:
          type: boolean
        orCalculateDueDate:
          type: string
          allOf:
            - $ref: '#/components/schemas/Date'
          nullable: true
        computedPlannedDuration:
          type: object
        actualDuration:
          type: object
        releaseUid:
          format: int32
          type: integer
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        release:
          $ref: '#/components/schemas/Release'
        status:
          $ref: '#/components/schemas/PhaseStatus'
        color:
          type: string
        originId:
          type: string
        currentTask:
          $ref: '#/components/schemas/Task'
        displayPath:
          type: string
        active:
          type: boolean
        done:
          type: boolean
        defunct:
          type: boolean
        updatable:
          type: boolean
        aborted:
          type: boolean
        planned:
          type: boolean
        failed:
          type: boolean
        failing:
          type: boolean
        releaseOwner:
          type: string
        allGates:
          type: array
          items:
            $ref: '#/components/schemas/GateTask'
        allTasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        children:
          type: array
          items:
            $ref: '#/components/schemas/PlanItem'
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
        original:
          type: boolean
        phaseCopied:
          type: boolean
        ancestorId:
          type: string
        latestCopy:
          type: boolean
    PhaseStatus:
      enum:
        - PLANNED_PHASE
        - IN_PROGRESS_PHASE
        - COMPLETED_PHASE
        - FAILING_PHASE
        - FAILED_PHASE
        - SKIPPED_PHASE
        - ABORTED_PHASE
      type: string
    PhaseTimeline:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        scheduledStartDate:
          $ref: '#/components/schemas/Date'
        dueDate:
          $ref: '#/components/schemas/Date'
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        plannedStartDate:
          $ref: '#/components/schemas/Date'
        plannedEndDate:
          $ref: '#/components/schemas/Date'
        color:
          type: string
        currentTask:
          type: string
    PhaseVersion:
      enum:
        - LATEST
        - ORIGINAL
        - ALL
      type: string
    PlanItem:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        owner:
          type: string
        scheduledStartDate:
          $ref: '#/components/schemas/Date'
        dueDate:
          $ref: '#/components/schemas/Date'
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        plannedDuration:
          format: int32
          type: integer
        flagStatus:
          $ref: '#/components/schemas/FlagStatus'
        flagComment:
          type: string
        overdueNotified:
          type: boolean
        flagged:
          type: boolean
        startOrScheduledDate:
          $ref: '#/components/schemas/Date'
        endOrDueDate:
          $ref: '#/components/schemas/Date'
        children:
          type: array
          items:
            $ref: '#/components/schemas/PlanItem'
        overdue:
          type: boolean
        done:
          type: boolean
        release:
          $ref: '#/components/schemas/Release'
        releaseUid:
          format: int32
          type: integer
        updatable:
          type: boolean
        displayPath:
          type: string
        aborted:
          type: boolean
        active:
          type: boolean
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
        orCalculateDueDate:
          type: string
          allOf:
            - $ref: '#/components/schemas/Date'
          nullable: true
        computedPlannedDuration:
          type: object
        actualDuration:
          type: object
    PollType:
      enum:
        - REPEAT
        - CRON
      type: string
    PrincipalView:
      type: object
      properties:
        username:
          type: string
        fullname:
          type: string
    ProjectedPhase:
      type: object
      properties:
        id:
          type: string
        startDate:
          $ref: '#/components/schemas/Date'
        startDateString:
          type: string
        endDate:
          $ref: '#/components/schemas/Date'
        endDateString:
          type: string
        status:
          type: string
        type:
          type: string
        title:
          type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/ProjectedTask'
    ProjectedRelease:
      type: object
      properties:
        id:
          type: string
        startDate:
          $ref: '#/components/schemas/Date'
        startDateString:
          type: string
        endDate:
          $ref: '#/components/schemas/Date'
        endDateString:
          type: string
        status:
          type: string
        type:
          type: string
        title:
          type: string
        phases:
          type: array
          items:
            $ref: '#/components/schemas/ProjectedPhase'
    ProjectedTask:
      type: object
      properties:
        id:
          type: string
        startDate:
          $ref: '#/components/schemas/Date'
        startDateString:
          type: string
        endDate:
          $ref: '#/components/schemas/Date'
        endDateString:
          type: string
        status:
          type: string
        type:
          type: string
        title:
          type: string
    Property:
      type: object
      properties:
        INDEXED_PROPERTY_PATTERN:
          type: string
        propertyName:
          type: string
        index:
          format: int32
          type: integer
        indexed:
          type: boolean
    Release:
      type: object
      properties:
        startDate:
          $ref: '#/components/schemas/Date'
        scheduledStartDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        dueDate:
          $ref: '#/components/schemas/Date'
        title:
          type: string
        description:
          type: string
        owner:
          type: string
        plannedDuration:
          format: int32
          type: integer
        flagStatus:
          $ref: '#/components/schemas/FlagStatus'
        flagComment:
          type: string
        overdueNotified:
          type: boolean
        flagged:
          type: boolean
        startOrScheduledDate:
          $ref: '#/components/schemas/Date'
        endOrDueDate:
          $ref: '#/components/schemas/Date'
        overdue:
          type: boolean
        orCalculateDueDate:
          type: string
          allOf:
            - $ref: '#/components/schemas/Date'
          nullable: true
        computedPlannedDuration:
          type: object
        actualDuration:
          type: object
        rootReleaseId:
          type: string
        maxConcurrentReleases:
          format: int32
          type: integer
        releaseTriggers:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseTrigger'
          deprecated: true
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        memberViewers:
          type: array
          items:
            type: string
          deprecated: true
        roleViewers:
          type: array
          items:
            type: string
          deprecated: true
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        phases:
          type: array
          items:
            $ref: '#/components/schemas/Phase'
        queryableStartDate:
          $ref: '#/components/schemas/Date'
        queryableEndDate:
          $ref: '#/components/schemas/Date'
        realFlagStatus:
          $ref: '#/components/schemas/FlagStatus'
        status:
          $ref: '#/components/schemas/ReleaseStatus'
        tags:
          type: array
          items:
            type: string
        variables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        calendarLinkToken:
          type: string
        calendarPublished:
          type: boolean
        tutorial:
          type: boolean
        abortOnFailure:
          type: boolean
        archiveRelease:
          type: boolean
        allowPasswordsInAllFields:
          type: boolean
        disableNotifications:
          type: boolean
        allowConcurrentReleasesFromTrigger:
          type: boolean
        originTemplateId:
          type: string
        createdFromTrigger:
          type: boolean
        scriptUsername:
          type: string
        scriptUserPassword:
          type: string
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseExtension'
        startedFromTaskId:
          type: string
        autoStart:
          type: boolean
        automatedResumeCount:
          format: int32
          type: integer
        maxAutomatedResumes:
          format: int32
          type: integer
        abortComment:
          type: string
        variableMapping:
          type: object
          additionalProperties:
            type: string
        riskProfile:
          $ref: '#/components/schemas/RiskProfile'
        $metadata:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InternalMetadata'
        archived:
          type: boolean
        ciUid:
          format: int32
          type: integer
        variableValues:
          type: object
          additionalProperties:
            type: object
        passwordVariableValues:
          type: object
          additionalProperties:
            type: object
        ciPropertyVariables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        allStringVariableValues:
          type: object
          additionalProperties:
            type: string
        allReleaseGlobalAndFolderVariables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        allVariableValuesAsStringsWithInterpolationInfo:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ValueWithInterpolation'
        variablesKeysInNonInterpolatableVariableValues:
          uniqueItems: true
          type: array
          items:
            type: string
        variablesByKeys:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Variable'
        allVariables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        globalVariables:
          $ref: '#/components/schemas/GlobalVariables'
        folderVariables:
          $ref: '#/components/schemas/FolderVariables'
        adminTeam:
          $ref: '#/components/schemas/Team'
        releaseAttachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        currentPhase:
          $ref: '#/components/schemas/Phase'
        currentTask:
          $ref: '#/components/schemas/Task'
        allTasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        allGates:
          type: array
          items:
            $ref: '#/components/schemas/GateTask'
        allUserInputTasks:
          type: array
          items:
            $ref: '#/components/schemas/UserInputTask'
        done:
          type: boolean
        plannedOrActive:
          type: boolean
        active:
          type: boolean
        defunct:
          type: boolean
        updatable:
          type: boolean
        aborted:
          type: boolean
        failing:
          type: boolean
        failed:
          type: boolean
        paused:
          type: boolean
        template:
          type: boolean
        planned:
          type: boolean
        inProgress:
          type: boolean
        release:
          $ref: '#/components/schemas/Release'
        releaseUid:
          format: int32
          type: integer
        displayPath:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/PlanItem'
        allPlanItems:
          type: array
          items:
            $ref: '#/components/schemas/PlanItem'
        url:
          type: string
        activeTasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
        pending:
          type: boolean
    ReleaseCountResult:
      type: object
      properties:
        total:
          format: int32
          type: integer
        byStatus:
          type: object
          additionalProperties:
            format: int32
            type: integer
    ReleaseCountResults:
      type: object
      properties:
        live:
          $ref: '#/components/schemas/ReleaseCountResult'
        archived:
          $ref: '#/components/schemas/ReleaseCountResult'
        all:
          $ref: '#/components/schemas/ReleaseCountResult'
    ReleaseExtension:
      type: object
      properties:
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
    ReleaseFullSearchResult:
      type: object
      properties:
        live:
          $ref: '#/components/schemas/ReleaseSearchResult'
        archived:
          $ref: '#/components/schemas/ReleaseSearchResult'
    ReleaseGroup:
      type: object
      properties:
        $metadata:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InternalMetadata'
        title:
          type: string
        status:
          $ref: '#/components/schemas/ReleaseGroupStatus'
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        riskScore:
          format: int32
          type: integer
        releaseIds:
          uniqueItems: true
          type: array
          items:
            type: string
        progress:
          format: int32
          type: integer
        folderId:
          type: string
        updatable:
          type: boolean
    ReleaseGroupFilters:
      type: object
      properties:
        title:
          type: string
        folderId:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseGroupStatus'
    ReleaseGroupOrderMode:
      enum:
        - RISK_GROUP
        - START_DATE_GROUP
        - END_DATE_GROUP
      type: string
    ReleaseGroupStatus:
      enum:
        - PLANNED_GROUP
        - IN_PROGRESS
        - PAUSED_GROUP
        - FAILING_GROUP
        - FAILED_GROUP
        - COMPLETED_GROUP
        - ABORTED_GROUP
      type: string
    ReleaseGroupTimeline:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        riskScore:
          format: int32
          type: integer
        releases:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseTimeline'
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
    ReleaseOrderDirection:
      enum:
        - ASC
        - DESC
      type: string
    ReleaseOrderMode:
      enum:
        - risk
        - start_date
        - end_date
        - title
      type: string
    ReleaseSearchResult:
      type: object
      properties:
        page:
          format: int64
          type: integer
        size:
          format: int64
          type: integer
        releases:
          type: array
          items:
            $ref: '#/components/schemas/Release'
    ReleaseStatus:
      enum:
        - TEMPLATE_RELEASE
        - PLANNED_RELEASE
        - IN_PROGRESS_RELEASE
        - PAUSED_RELEASE
        - FAILING_RELEASE
        - FAILED_RELEASE
        - COMPLETED_RELEASE
        - ABORTED_RELEASE
      type: string
    ReleaseTimeline:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        scheduledStartDate:
          $ref: '#/components/schemas/Date'
        dueDate:
          $ref: '#/components/schemas/Date'
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        plannedStartDate:
          $ref: '#/components/schemas/Date'
        plannedEndDate:
          $ref: '#/components/schemas/Date'
        phases:
          type: array
          items:
            $ref: '#/components/schemas/PhaseTimeline'
        riskScore:
          format: int32
          type: integer
        status:
          $ref: '#/components/schemas/ReleaseStatus'
    ReleaseTrigger:
      type: object
      properties:
        script:
          type: string
        abortScript:
          type: string
        ciUid:
          format: int32
          type: integer
        title:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        triggerState:
          type: string
        folderId:
          type: string
        allowParallelExecution:
          type: boolean
        lastRunDate:
          $ref: '#/components/schemas/Date'
        lastRunStatus:
          $ref: '#/components/schemas/TriggerExecutionStatus'
        pollType:
          $ref: '#/components/schemas/PollType'
        periodicity:
          type: string
        initialFire:
          type: boolean
        releaseTitle:
          type: string
        executionId:
          type: string
        variables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        template:
          type: string
        tags:
          type: array
          items:
            type: string
        releaseFolder:
          type: string
        internalProperties:
          type: array
          items:
            type: string
        templateVariables:
          type: object
          additionalProperties:
            type: string
        templatePasswordVariables:
          type: object
          additionalProperties:
            type: string
        triggerStateFromResults:
          type: string
        scriptVariableNames:
          type: array
          items:
            type: string
        scriptVariablesFromResults:
          type: object
          additionalProperties:
            type: object
        stringScriptVariableValues:
          type: object
          additionalProperties:
            type: string
        scriptVariableValues:
          type: object
          additionalProperties:
            type: object
        variablesByKeys:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Variable'
        containerId:
          type: string
    ReleasesFilters:
      type: object
      properties:
        title:
          type: string
        tags:
          type: array
          items:
            type: string
        taskTags:
          type: array
          items:
            type: string
        timeFrame:
          $ref: '#/components/schemas/TimeFrame'
        from:
          $ref: '#/components/schemas/Date'
        to:
          $ref: '#/components/schemas/Date'
        active:
          type: boolean
        planned:
          type: boolean
        inProgress:
          type: boolean
        paused:
          type: boolean
        failing:
          type: boolean
        failed:
          type: boolean
        inactive:
          type: boolean
        completed:
          type: boolean
        aborted:
          type: boolean
        onlyMine:
          type: boolean
        onlyFlagged:
          type: boolean
        onlyArchived:
          type: boolean
        parentId:
          type: string
        orderBy:
          $ref: '#/components/schemas/ReleaseOrderMode'
        orderDirection:
          $ref: '#/components/schemas/ReleaseOrderDirection'
        riskStatusWithThresholds:
          $ref: '#/components/schemas/RiskStatusWithThresholds'
        queryStartDate:
          $ref: '#/components/schemas/Date'
        queryEndDate:
          $ref: '#/components/schemas/Date'
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseStatus'
    ReservationFilters:
      type: object
      properties:
        environmentTitle:
          type: string
        stages:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            type: string
        applications:
          type: array
          items:
            type: string
        from:
          $ref: '#/components/schemas/Date'
        to:
          $ref: '#/components/schemas/Date'
    ReservationSearchView:
      type: object
      properties:
        id:
          type: string
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        note:
          type: string
        applications:
          type: array
          items:
            $ref: '#/components/schemas/BaseApplicationView'
    Risk:
      type: object
      properties:
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
        score:
          format: int32
          type: integer
        totalScore:
          format: int32
          type: integer
        riskAssessments:
          type: array
          items:
            $ref: '#/components/schemas/RiskAssessment'
    RiskAssessment:
      type: object
      properties:
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
        riskAssessorId:
          type: string
        risk:
          $ref: '#/components/schemas/Risk'
        score:
          format: int32
          type: integer
        headline:
          type: string
        messages:
          type: array
          items:
            type: string
        icon:
          type: string
    RiskAssessor:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        weight:
          format: int32
          type: integer
        score:
          format: int32
          type: integer
        order:
          type: string
        group:
          type: string
        icon:
          type: string
    RiskGlobalThresholds:
      type: object
      properties:
        folderId:
          type: string
        title:
          type: string
        atRiskFrom:
          format: int32
          type: integer
        attentionNeededFrom:
          format: int32
          type: integer
    RiskProfile:
      type: object
      properties:
        folderId:
          type: string
        title:
          type: string
        defaultProfile:
          type: boolean
        riskProfileAssessors:
          type: object
          additionalProperties:
            type: string
    RiskStatus:
      enum:
        - OK
        - AT_RISK
        - ATTENTION_NEEDED
      type: string
    RiskStatusWithThresholds:
      type: object
      properties:
        riskStatus:
          $ref: '#/components/schemas/RiskStatus'
        attentionNeededFrom:
          format: int32
          type: integer
        atRiskFrom:
          format: int32
          type: integer
    RoleView:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        permissions:
          uniqueItems: true
          type: array
          items:
            type: string
        principals:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/PrincipalView'
    SharedConfigurationStatusResponse:
      type: object
      properties:
        success:
          type: boolean
        errorText:
          type: string
        scriptFound:
          type: boolean
    Stage:
      type: object
      properties:
        title:
          type: string
        status:
          $ref: '#/components/schemas/StageStatus'
        items:
          type: array
          items:
            $ref: '#/components/schemas/StageTrackedItem'
        transition:
          $ref: '#/components/schemas/Transition'
        owner:
          type: string
        team:
          type: string
        open:
          type: boolean
        closed:
          type: boolean
    StageStatus:
      enum:
        - OPEN
        - CLOSED
      type: string
    StageTrackedItem:
      type: object
      properties:
        trackedItemId:
          type: string
        status:
          $ref: '#/components/schemas/TrackedItemStatus'
        releaseIds:
          uniqueItems: true
          type: array
          items:
            type: string
    StartRelease:
      type: object
      properties:
        releaseTitle:
          type: string
        folderId:
          type: string
        variables:
          type: object
          additionalProperties:
            type: object
        releaseVariables:
          type: object
          additionalProperties:
            type: string
        releasePasswordVariables:
          type: object
          additionalProperties:
            type: string
        scheduledStartDate:
          $ref: '#/components/schemas/Date'
        autoStart:
          type: boolean
        startedFromTaskId:
          type: string
        releaseOwner:
          type: string
    StartTask:
      type: object
      properties:
        variables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
    Subscriber:
      type: object
      properties:
        sourceId:
          type: string
    SystemMessageSettings:
      type: object
      properties:
        folderId:
          type: string
        title:
          type: string
        enabled:
          type: boolean
        message:
          type: string
        automated:
          type: boolean
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
    Task:
      type: object
      properties:
        scheduledStartDate:
          $ref: '#/components/schemas/Date'
        flagStatus:
          $ref: '#/components/schemas/FlagStatus'
        title:
          type: string
        description:
          type: string
        owner:
          type: string
        dueDate:
          $ref: '#/components/schemas/Date'
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        plannedDuration:
          format: int32
          type: integer
        flagComment:
          type: string
        overdueNotified:
          type: boolean
        flagged:
          type: boolean
        startOrScheduledDate:
          $ref: '#/components/schemas/Date'
        endOrDueDate:
          $ref: '#/components/schemas/Date'
        overdue:
          type: boolean
        orCalculateDueDate:
          type: string
          allOf:
            - $ref: '#/components/schemas/Date'
          nullable: true
        computedPlannedDuration:
          type: object
        actualDuration:
          type: object
        releaseUid:
          format: int32
          type: integer
        ciUid:
          format: int32
          type: integer
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        container:
          $ref: '#/components/schemas/TaskContainer'
        facets:
          type: array
          items:
            $ref: '#/components/schemas/Facet'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        status:
          $ref: '#/components/schemas/TaskStatus'
        team:
          type: string
        watchers:
          uniqueItems: true
          type: array
          items:
            type: string
        waitForScheduledStartDate:
          type: boolean
        delayDuringBlackout:
          type: boolean
        postponedDueToBlackout:
          type: boolean
        postponedUntilEnvironmentsAreReserved:
          type: boolean
        originalScheduledStartDate:
          $ref: '#/components/schemas/Date'
        hasBeenFlagged:
          type: boolean
        hasBeenDelayed:
          type: boolean
        precondition:
          type: string
        failureHandler:
          type: string
        taskFailureHandlerEnabled:
          type: boolean
        taskRecoverOp:
          $ref: '#/components/schemas/TaskRecoverOp'
        failuresCount:
          format: int32
          type: integer
        executionId:
          type: string
        variableMapping:
          type: object
          additionalProperties:
            type: string
        externalVariableMapping:
          type: object
          additionalProperties:
            type: string
        maxCommentSize:
          format: int32
          type: integer
        tags:
          type: array
          items:
            type: string
        configurationUri:
          type: string
        dueSoonNotified:
          type: boolean
        locked:
          type: boolean
        checkAttributes:
          type: boolean
        abortScript:
          type: string
        phase:
          $ref: '#/components/schemas/Phase'
        blackoutMetadata:
          $ref: '#/components/schemas/BlackoutMetadata'
        flaggedCount:
          format: int32
          type: integer
        delayedCount:
          format: int32
          type: integer
        done:
          type: boolean
        doneInAdvance:
          type: boolean
        defunct:
          type: boolean
        updatable:
          type: boolean
        aborted:
          type: boolean
        notYetReached:
          type: boolean
        planned:
          type: boolean
        active:
          type: boolean
        inProgress:
          type: boolean
        pending:
          type: boolean
        waitingForInput:
          type: boolean
        failed:
          type: boolean
        failing:
          type: boolean
        completedInAdvance:
          type: boolean
        skipped:
          type: boolean
        skippedInAdvance:
          type: boolean
        preconditionInProgress:
          type: boolean
        failureHandlerInProgress:
          type: boolean
        abortScriptInProgress:
          type: boolean
        facetInProgress:
          type: boolean
        movable:
          type: boolean
        gate:
          type: boolean
        taskGroup:
          type: boolean
        parallelGroup:
          type: boolean
        preconditionEnabled:
          type: boolean
        failureHandlerEnabled:
          type: boolean
        release:
          $ref: '#/components/schemas/Release'
        displayPath:
          type: string
        releaseOwner:
          type: string
        allTasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        children:
          type: array
          items:
            $ref: '#/components/schemas/PlanItem'
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
        inputVariables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        referencedVariables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        unboundRequiredVariables:
          type: array
          items:
            type: string
        automated:
          type: boolean
        taskType:
          type: object
        dueSoon:
          type: boolean
        elapsedDurationFraction:
          format: double
          type: number
        url:
          type: string
    TaskContainer:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        locked:
          type: boolean
        title:
          type: string
    TaskRecoverOp:
      enum:
        - SKIP_TASK
        - RESTART_PHASE
        - RUN_SCRIPT
      type: string
    TaskReportingRecord:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/FacetScope'
        targetId:
          type: string
        configurationUri:
          type: string
        variableMapping:
          type: object
          additionalProperties:
            type: string
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
        propertiesWithVariables:
          type: array
          items: {}
        serverUrl:
          type: string
        serverUser:
          type: string
        creationDate:
          $ref: '#/components/schemas/Date'
        retryAttemptNumber:
          format: int32
          type: integer
        createdViaApi:
          type: boolean
    TaskStatus:
      enum:
        - PLANNED_TASK
        - PENDING_TASK
        - IN_PROGRESS_TASK
        - QUEUED_TASK
        - ABORT_SCRIPT_QUEUED_TASK
        - FAILURE_HANDLER_QUEUED_TASK
        - COMPLETED_TASK
        - COMPLETED_IN_ADVANCE_TASK
        - SKIPPED_TASK
        - SKIPPED_IN_ADVANCE_TASK
        - FAILED_TASK
        - FAILING_TASK
        - ABORTED_TASK
        - PRECONDITION_IN_PROGRESS_TASK
        - WAITING_FOR_INPUT_TASK
        - FAILURE_HANDLER_IN_PROGRESS_TASK
        - FACET_CHECK_IN_PROGRESS_TASK
        - ABORT_SCRIPT_IN_PROGRESS_TASK
      type: string
    Team:
      type: object
      properties:
        teamName:
          type: string
        members:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
        releaseAdminTeam:
          type: boolean
        templateOwnerTeam:
          type: boolean
        folderOwnerTeam:
          type: boolean
        folderAdminTeam:
          type: boolean
        systemTeam:
          type: boolean
    TeamMemberView:
      type: object
      properties:
        name:
          type: string
        fullName:
          type: string
        type:
          $ref: '#/components/schemas/MemberType'
        roleId:
          type: string
    TeamView:
      type: object
      properties:
        id:
          type: string
        teamName:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/TeamMemberView'
        permissions:
          type: array
          items:
            type: string
        systemTeam:
          type: boolean
    TimeFrame:
      enum:
        - LAST_SEVEN_DAYS
        - LAST_MONTH
        - LAST_THREE_MONTHS
        - LAST_SIX_MONTHS
        - LAST_YEAR
        - RANGE
      type: string
    TrackedItem:
      type: object
      properties:
        title:
          type: string
        releaseIds:
          uniqueItems: true
          type: array
          items:
            type: string
        descoped:
          type: boolean
        createdDate:
          $ref: '#/components/schemas/Date'
        modifiedDate:
          $ref: '#/components/schemas/Date'
    TrackedItemStatus:
      enum:
        - NOT_READY
        - READY
        - SKIPPED
      type: string
    Transition:
      type: object
      properties:
        title:
          type: string
        stage:
          $ref: '#/components/schemas/Stage'
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
        automated:
          type: boolean
        allConditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
        leafConditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
        rootCondition:
          $ref: '#/components/schemas/Condition'
    Trigger:
      type: object
      properties:
        script:
          type: string
        abortScript:
          type: string
        ciUid:
          format: int32
          type: integer
        title:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        triggerState:
          type: string
        folderId:
          type: string
        allowParallelExecution:
          type: boolean
        lastRunDate:
          $ref: '#/components/schemas/Date'
        lastRunStatus:
          $ref: '#/components/schemas/TriggerExecutionStatus'
        internalProperties:
          type: array
          items:
            type: string
        containerId:
          type: string
    TriggerExecutionStatus:
      enum:
        - SUCCESS
        - FAILURE
      type: string
    UsagePoint:
      type: object
      properties:
        targetProperty:
          $ref: '#/components/schemas/CiProperty'
    UserAccount:
      type: object
      properties:
        username:
          type: string
        external:
          type: boolean
        profileId:
          type: string
        email:
          type: string
        password:
          type: string
        previousPassword:
          type: string
        fullName:
          type: string
        externalId:
          type: string
        loginAllowed:
          type: boolean
        dateFormat:
          type: string
        timeFormat:
          type: string
        firstDayOfWeek:
          format: int32
          type: integer
        lastActive:
          format: date
          type: string
          example: 2022-03-10
        analyticsEnabled:
          type: boolean
        taskDrawerEnabled:
          type: boolean
    UserInputTask:
      type: object
      properties:
        scheduledStartDate:
          $ref: '#/components/schemas/Date'
        flagStatus:
          $ref: '#/components/schemas/FlagStatus'
        title:
          type: string
        description:
          type: string
        owner:
          type: string
        dueDate:
          $ref: '#/components/schemas/Date'
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        plannedDuration:
          format: int32
          type: integer
        flagComment:
          type: string
        overdueNotified:
          type: boolean
        flagged:
          type: boolean
        startOrScheduledDate:
          $ref: '#/components/schemas/Date'
        endOrDueDate:
          $ref: '#/components/schemas/Date'
        overdue:
          type: boolean
        orCalculateDueDate:
          type: string
          allOf:
            - $ref: '#/components/schemas/Date'
          nullable: true
        computedPlannedDuration:
          type: object
        actualDuration:
          type: object
        releaseUid:
          format: int32
          type: integer
        ciUid:
          format: int32
          type: integer
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        container:
          $ref: '#/components/schemas/TaskContainer'
        facets:
          type: array
          items:
            $ref: '#/components/schemas/Facet'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        status:
          $ref: '#/components/schemas/TaskStatus'
        team:
          type: string
        watchers:
          uniqueItems: true
          type: array
          items:
            type: string
        waitForScheduledStartDate:
          type: boolean
        delayDuringBlackout:
          type: boolean
        postponedDueToBlackout:
          type: boolean
        postponedUntilEnvironmentsAreReserved:
          type: boolean
        originalScheduledStartDate:
          $ref: '#/components/schemas/Date'
        hasBeenFlagged:
          type: boolean
        hasBeenDelayed:
          type: boolean
        precondition:
          type: string
        failureHandler:
          type: string
        taskFailureHandlerEnabled:
          type: boolean
        taskRecoverOp:
          $ref: '#/components/schemas/TaskRecoverOp'
        failuresCount:
          format: int32
          type: integer
        executionId:
          type: string
        variableMapping:
          type: object
          additionalProperties:
            type: string
        externalVariableMapping:
          type: object
          additionalProperties:
            type: string
        maxCommentSize:
          format: int32
          type: integer
        tags:
          type: array
          items:
            type: string
        configurationUri:
          type: string
        dueSoonNotified:
          type: boolean
        locked:
          type: boolean
        checkAttributes:
          type: boolean
        abortScript:
          type: string
        phase:
          $ref: '#/components/schemas/Phase'
        blackoutMetadata:
          $ref: '#/components/schemas/BlackoutMetadata'
        flaggedCount:
          format: int32
          type: integer
        delayedCount:
          format: int32
          type: integer
        done:
          type: boolean
        doneInAdvance:
          type: boolean
        defunct:
          type: boolean
        updatable:
          type: boolean
        aborted:
          type: boolean
        notYetReached:
          type: boolean
        planned:
          type: boolean
        active:
          type: boolean
        inProgress:
          type: boolean
        pending:
          type: boolean
        waitingForInput:
          type: boolean
        failed:
          type: boolean
        failing:
          type: boolean
        completedInAdvance:
          type: boolean
        skipped:
          type: boolean
        skippedInAdvance:
          type: boolean
        preconditionInProgress:
          type: boolean
        failureHandlerInProgress:
          type: boolean
        abortScriptInProgress:
          type: boolean
        facetInProgress:
          type: boolean
        movable:
          type: boolean
        gate:
          type: boolean
        taskGroup:
          type: boolean
        parallelGroup:
          type: boolean
        preconditionEnabled:
          type: boolean
        failureHandlerEnabled:
          type: boolean
        release:
          $ref: '#/components/schemas/Release'
        displayPath:
          type: string
        releaseOwner:
          type: string
        allTasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        children:
          type: array
          items:
            $ref: '#/components/schemas/PlanItem'
        inputVariables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        unboundRequiredVariables:
          type: array
          items:
            type: string
        automated:
          type: boolean
        taskType:
          type: object
        dueSoon:
          type: boolean
        elapsedDurationFraction:
          format: double
          type: number
        url:
          type: string
        variables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        referencedVariables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        variableUsages:
          type: array
          items:
            $ref: '#/components/schemas/UsagePoint'
    ValidatePattern:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
    ValueProviderConfiguration:
      type: object
      properties:
        variable:
          $ref: '#/components/schemas/Variable'
    ValueWithInterpolation:
      type: object
      properties:
        value:
          type: string
        preventInterpolation:
          type: boolean
    Variable:
      type: object
      properties:
        folderId:
          type: string
        title:
          type: string
        key:
          type: string
        requiresValue:
          type: boolean
        showOnReleaseStart:
          type: boolean
        label:
          type: string
        description:
          type: string
        valueProvider:
          $ref: '#/components/schemas/ValueProviderConfiguration'
        inherited:
          type: boolean
        value:
          type: object
        emptyValue:
          type: object
        valueEmpty:
          type: boolean
        untypedValue:
          type: object
        password:
          type: boolean
        valueAsString:
          type: string
        emptyValueAsString:
          type: string
    Variable1:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        type:
          type: string
        requiresValue:
          type: boolean
        showOnReleaseStart:
          type: boolean
        value:
          type: object
        label:
          type: string
        description:
          type: string
        multiline:
          type: boolean
        inherited:
          type: boolean
        preventInterpolation:
          type: boolean
        externalVariableValue:
          $ref: '#/components/schemas/ExternalVariableValue'
        valueProvider:
          $ref: '#/components/schemas/ValueProviderConfiguration'
    VariableOrValue:
      type: object
      properties:
        variable:
          type: string
        value:
          type: object
