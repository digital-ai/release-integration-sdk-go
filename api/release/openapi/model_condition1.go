/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Condition1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Condition1{}

// Condition1 struct for Condition1
type Condition1 struct {
	Title *string `json:"title,omitempty"`
	Checked *bool `json:"checked,omitempty"`
}

// NewCondition1 instantiates a new Condition1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition1() *Condition1 {
	this := Condition1{}
	return &this
}

// NewCondition1WithDefaults instantiates a new Condition1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCondition1WithDefaults() *Condition1 {
	this := Condition1{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Condition1) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition1) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Condition1) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Condition1) SetTitle(v string) {
	o.Title = &v
}

// GetChecked returns the Checked field value if set, zero value otherwise.
func (o *Condition1) GetChecked() bool {
	if o == nil || isNil(o.Checked) {
		var ret bool
		return ret
	}
	return *o.Checked
}

// GetCheckedOk returns a tuple with the Checked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition1) GetCheckedOk() (*bool, bool) {
	if o == nil || isNil(o.Checked) {
		return nil, false
	}
	return o.Checked, true
}

// HasChecked returns a boolean if a field has been set.
func (o *Condition1) HasChecked() bool {
	if o != nil && !isNil(o.Checked) {
		return true
	}

	return false
}

// SetChecked gets a reference to the given bool and assigns it to the Checked field.
func (o *Condition1) SetChecked(v bool) {
	o.Checked = &v
}

func (o Condition1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Condition1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Checked) {
		toSerialize["checked"] = o.Checked
	}
	return toSerialize, nil
}

type NullableCondition1 struct {
	value *Condition1
	isSet bool
}

func (v NullableCondition1) Get() *Condition1 {
	return v.value
}

func (v *NullableCondition1) Set(val *Condition1) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition1) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition1(val *Condition1) *NullableCondition1 {
	return &NullableCondition1{value: val, isSet: true}
}

func (v NullableCondition1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


