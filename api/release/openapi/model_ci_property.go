/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CiProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiProperty{}

// CiProperty struct for CiProperty
type CiProperty struct {
	Wrapped *CiProperty `json:"wrapped,omitempty"`
	LastProperty *Property `json:"lastProperty,omitempty"`
	Parent map[string]interface{} `json:"parent,omitempty"`
	Exists *bool `json:"exists,omitempty"`
	PropertyName *string `json:"propertyName,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
	ParentCi map[string]interface{} `json:"parentCi,omitempty"`
	Descriptor map[string]interface{} `json:"descriptor,omitempty"`
	Kind map[string]interface{} `json:"kind,omitempty"`
	Category *string `json:"category,omitempty"`
	Password *bool `json:"password,omitempty"`
	Indexed *bool `json:"indexed,omitempty"`
}

// NewCiProperty instantiates a new CiProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiProperty() *CiProperty {
	this := CiProperty{}
	return &this
}

// NewCiPropertyWithDefaults instantiates a new CiProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiPropertyWithDefaults() *CiProperty {
	this := CiProperty{}
	return &this
}

// GetWrapped returns the Wrapped field value if set, zero value otherwise.
func (o *CiProperty) GetWrapped() CiProperty {
	if o == nil || isNil(o.Wrapped) {
		var ret CiProperty
		return ret
	}
	return *o.Wrapped
}

// GetWrappedOk returns a tuple with the Wrapped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetWrappedOk() (*CiProperty, bool) {
	if o == nil || isNil(o.Wrapped) {
		return nil, false
	}
	return o.Wrapped, true
}

// HasWrapped returns a boolean if a field has been set.
func (o *CiProperty) HasWrapped() bool {
	if o != nil && !isNil(o.Wrapped) {
		return true
	}

	return false
}

// SetWrapped gets a reference to the given CiProperty and assigns it to the Wrapped field.
func (o *CiProperty) SetWrapped(v CiProperty) {
	o.Wrapped = &v
}

// GetLastProperty returns the LastProperty field value if set, zero value otherwise.
func (o *CiProperty) GetLastProperty() Property {
	if o == nil || isNil(o.LastProperty) {
		var ret Property
		return ret
	}
	return *o.LastProperty
}

// GetLastPropertyOk returns a tuple with the LastProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetLastPropertyOk() (*Property, bool) {
	if o == nil || isNil(o.LastProperty) {
		return nil, false
	}
	return o.LastProperty, true
}

// HasLastProperty returns a boolean if a field has been set.
func (o *CiProperty) HasLastProperty() bool {
	if o != nil && !isNil(o.LastProperty) {
		return true
	}

	return false
}

// SetLastProperty gets a reference to the given Property and assigns it to the LastProperty field.
func (o *CiProperty) SetLastProperty(v Property) {
	o.LastProperty = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *CiProperty) GetParent() map[string]interface{} {
	if o == nil || isNil(o.Parent) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetParentOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Parent) {
		return map[string]interface{}{}, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *CiProperty) HasParent() bool {
	if o != nil && !isNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given map[string]interface{} and assigns it to the Parent field.
func (o *CiProperty) SetParent(v map[string]interface{}) {
	o.Parent = v
}

// GetExists returns the Exists field value if set, zero value otherwise.
func (o *CiProperty) GetExists() bool {
	if o == nil || isNil(o.Exists) {
		var ret bool
		return ret
	}
	return *o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetExistsOk() (*bool, bool) {
	if o == nil || isNil(o.Exists) {
		return nil, false
	}
	return o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *CiProperty) HasExists() bool {
	if o != nil && !isNil(o.Exists) {
		return true
	}

	return false
}

// SetExists gets a reference to the given bool and assigns it to the Exists field.
func (o *CiProperty) SetExists(v bool) {
	o.Exists = &v
}

// GetPropertyName returns the PropertyName field value if set, zero value otherwise.
func (o *CiProperty) GetPropertyName() string {
	if o == nil || isNil(o.PropertyName) {
		var ret string
		return ret
	}
	return *o.PropertyName
}

// GetPropertyNameOk returns a tuple with the PropertyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetPropertyNameOk() (*string, bool) {
	if o == nil || isNil(o.PropertyName) {
		return nil, false
	}
	return o.PropertyName, true
}

// HasPropertyName returns a boolean if a field has been set.
func (o *CiProperty) HasPropertyName() bool {
	if o != nil && !isNil(o.PropertyName) {
		return true
	}

	return false
}

// SetPropertyName gets a reference to the given string and assigns it to the PropertyName field.
func (o *CiProperty) SetPropertyName(v string) {
	o.PropertyName = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CiProperty) GetValue() map[string]interface{} {
	if o == nil || isNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CiProperty) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *CiProperty) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetParentCi returns the ParentCi field value if set, zero value otherwise.
func (o *CiProperty) GetParentCi() map[string]interface{} {
	if o == nil || isNil(o.ParentCi) {
		var ret map[string]interface{}
		return ret
	}
	return o.ParentCi
}

// GetParentCiOk returns a tuple with the ParentCi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetParentCiOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.ParentCi) {
		return map[string]interface{}{}, false
	}
	return o.ParentCi, true
}

// HasParentCi returns a boolean if a field has been set.
func (o *CiProperty) HasParentCi() bool {
	if o != nil && !isNil(o.ParentCi) {
		return true
	}

	return false
}

// SetParentCi gets a reference to the given map[string]interface{} and assigns it to the ParentCi field.
func (o *CiProperty) SetParentCi(v map[string]interface{}) {
	o.ParentCi = v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *CiProperty) GetDescriptor() map[string]interface{} {
	if o == nil || isNil(o.Descriptor) {
		var ret map[string]interface{}
		return ret
	}
	return o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetDescriptorOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Descriptor) {
		return map[string]interface{}{}, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *CiProperty) HasDescriptor() bool {
	if o != nil && !isNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given map[string]interface{} and assigns it to the Descriptor field.
func (o *CiProperty) SetDescriptor(v map[string]interface{}) {
	o.Descriptor = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *CiProperty) GetKind() map[string]interface{} {
	if o == nil || isNil(o.Kind) {
		var ret map[string]interface{}
		return ret
	}
	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetKindOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Kind) {
		return map[string]interface{}{}, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *CiProperty) HasKind() bool {
	if o != nil && !isNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given map[string]interface{} and assigns it to the Kind field.
func (o *CiProperty) SetKind(v map[string]interface{}) {
	o.Kind = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *CiProperty) GetCategory() string {
	if o == nil || isNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetCategoryOk() (*string, bool) {
	if o == nil || isNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *CiProperty) HasCategory() bool {
	if o != nil && !isNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *CiProperty) SetCategory(v string) {
	o.Category = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *CiProperty) GetPassword() bool {
	if o == nil || isNil(o.Password) {
		var ret bool
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetPasswordOk() (*bool, bool) {
	if o == nil || isNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *CiProperty) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given bool and assigns it to the Password field.
func (o *CiProperty) SetPassword(v bool) {
	o.Password = &v
}

// GetIndexed returns the Indexed field value if set, zero value otherwise.
func (o *CiProperty) GetIndexed() bool {
	if o == nil || isNil(o.Indexed) {
		var ret bool
		return ret
	}
	return *o.Indexed
}

// GetIndexedOk returns a tuple with the Indexed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProperty) GetIndexedOk() (*bool, bool) {
	if o == nil || isNil(o.Indexed) {
		return nil, false
	}
	return o.Indexed, true
}

// HasIndexed returns a boolean if a field has been set.
func (o *CiProperty) HasIndexed() bool {
	if o != nil && !isNil(o.Indexed) {
		return true
	}

	return false
}

// SetIndexed gets a reference to the given bool and assigns it to the Indexed field.
func (o *CiProperty) SetIndexed(v bool) {
	o.Indexed = &v
}

func (o CiProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Wrapped) {
		toSerialize["wrapped"] = o.Wrapped
	}
	if !isNil(o.LastProperty) {
		toSerialize["lastProperty"] = o.LastProperty
	}
	if !isNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !isNil(o.Exists) {
		toSerialize["exists"] = o.Exists
	}
	if !isNil(o.PropertyName) {
		toSerialize["propertyName"] = o.PropertyName
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.ParentCi) {
		toSerialize["parentCi"] = o.ParentCi
	}
	if !isNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	if !isNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !isNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !isNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !isNil(o.Indexed) {
		toSerialize["indexed"] = o.Indexed
	}
	return toSerialize, nil
}

type NullableCiProperty struct {
	value *CiProperty
	isSet bool
}

func (v NullableCiProperty) Get() *CiProperty {
	return v.value
}

func (v *NullableCiProperty) Set(val *CiProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableCiProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableCiProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiProperty(val *CiProperty) *NullableCiProperty {
	return &NullableCiProperty{value: val, isSet: true}
}

func (v NullableCiProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


