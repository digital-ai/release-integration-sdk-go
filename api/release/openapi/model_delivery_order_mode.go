/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DeliveryOrderMode the model 'DeliveryOrderMode'
type DeliveryOrderMode string

// List of DeliveryOrderMode
const (
	START_DATE_DELIVERY DeliveryOrderMode = "START_DATE_DELIVERY"
	END_DATE_DELIVERY DeliveryOrderMode = "END_DATE_DELIVERY"
	CREATED_DATE_DELIVERY DeliveryOrderMode = "CREATED_DATE_DELIVERY"
)

// All allowed values of DeliveryOrderMode enum
var AllowedDeliveryOrderModeEnumValues = []DeliveryOrderMode{
	"START_DATE_DELIVERY",
	"END_DATE_DELIVERY",
	"CREATED_DATE_DELIVERY",
}

func (v *DeliveryOrderMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeliveryOrderMode(value)
	for _, existing := range AllowedDeliveryOrderModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeliveryOrderMode", value)
}

// NewDeliveryOrderModeFromValue returns a pointer to a valid DeliveryOrderMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeliveryOrderModeFromValue(v string) (*DeliveryOrderMode, error) {
	ev := DeliveryOrderMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeliveryOrderMode: valid values are %v", v, AllowedDeliveryOrderModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeliveryOrderMode) IsValid() bool {
	for _, existing := range AllowedDeliveryOrderModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeliveryOrderMode value
func (v DeliveryOrderMode) Ptr() *DeliveryOrderMode {
	return &v
}

type NullableDeliveryOrderMode struct {
	value *DeliveryOrderMode
	isSet bool
}

func (v NullableDeliveryOrderMode) Get() *DeliveryOrderMode {
	return v.value
}

func (v *NullableDeliveryOrderMode) Set(val *DeliveryOrderMode) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryOrderMode) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryOrderMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryOrderMode(val *DeliveryOrderMode) *NullableDeliveryOrderMode {
	return &NullableDeliveryOrderMode{value: val, isSet: true}
}

func (v NullableDeliveryOrderMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryOrderMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

