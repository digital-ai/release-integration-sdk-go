/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TaskStatus the model 'TaskStatus'
type TaskStatus string

// List of TaskStatus
const (
	PLANNED_TASK TaskStatus = "PLANNED_TASK"
	PENDING_TASK TaskStatus = "PENDING_TASK"
	IN_PROGRESS_TASK TaskStatus = "IN_PROGRESS_TASK"
	QUEUED_TASK TaskStatus = "QUEUED_TASK"
	ABORT_SCRIPT_QUEUED_TASK TaskStatus = "ABORT_SCRIPT_QUEUED_TASK"
	FAILURE_HANDLER_QUEUED_TASK TaskStatus = "FAILURE_HANDLER_QUEUED_TASK"
	COMPLETED_TASK TaskStatus = "COMPLETED_TASK"
	COMPLETED_IN_ADVANCE_TASK TaskStatus = "COMPLETED_IN_ADVANCE_TASK"
	SKIPPED_TASK TaskStatus = "SKIPPED_TASK"
	SKIPPED_IN_ADVANCE_TASK TaskStatus = "SKIPPED_IN_ADVANCE_TASK"
	FAILED_TASK TaskStatus = "FAILED_TASK"
	FAILING_TASK TaskStatus = "FAILING_TASK"
	ABORTED_TASK TaskStatus = "ABORTED_TASK"
	PRECONDITION_IN_PROGRESS_TASK TaskStatus = "PRECONDITION_IN_PROGRESS_TASK"
	WAITING_FOR_INPUT_TASK TaskStatus = "WAITING_FOR_INPUT_TASK"
	FAILURE_HANDLER_IN_PROGRESS_TASK TaskStatus = "FAILURE_HANDLER_IN_PROGRESS_TASK"
	FACET_CHECK_IN_PROGRESS_TASK TaskStatus = "FACET_CHECK_IN_PROGRESS_TASK"
	ABORT_SCRIPT_IN_PROGRESS_TASK TaskStatus = "ABORT_SCRIPT_IN_PROGRESS_TASK"
)

// All allowed values of TaskStatus enum
var AllowedTaskStatusEnumValues = []TaskStatus{
	"PLANNED_TASK",
	"PENDING_TASK",
	"IN_PROGRESS_TASK",
	"QUEUED_TASK",
	"ABORT_SCRIPT_QUEUED_TASK",
	"FAILURE_HANDLER_QUEUED_TASK",
	"COMPLETED_TASK",
	"COMPLETED_IN_ADVANCE_TASK",
	"SKIPPED_TASK",
	"SKIPPED_IN_ADVANCE_TASK",
	"FAILED_TASK",
	"FAILING_TASK",
	"ABORTED_TASK",
	"PRECONDITION_IN_PROGRESS_TASK",
	"WAITING_FOR_INPUT_TASK",
	"FAILURE_HANDLER_IN_PROGRESS_TASK",
	"FACET_CHECK_IN_PROGRESS_TASK",
	"ABORT_SCRIPT_IN_PROGRESS_TASK",
}

func (v *TaskStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaskStatus(value)
	for _, existing := range AllowedTaskStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaskStatus", value)
}

// NewTaskStatusFromValue returns a pointer to a valid TaskStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskStatusFromValue(v string) (*TaskStatus, error) {
	ev := TaskStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaskStatus: valid values are %v", v, AllowedTaskStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskStatus) IsValid() bool {
	for _, existing := range AllowedTaskStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaskStatus value
func (v TaskStatus) Ptr() *TaskStatus {
	return &v
}

type NullableTaskStatus struct {
	value *TaskStatus
	isSet bool
}

func (v NullableTaskStatus) Get() *TaskStatus {
	return v.value
}

func (v *NullableTaskStatus) Set(val *TaskStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskStatus(val *TaskStatus) *NullableTaskStatus {
	return &NullableTaskStatus{value: val, isSet: true}
}

func (v NullableTaskStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

