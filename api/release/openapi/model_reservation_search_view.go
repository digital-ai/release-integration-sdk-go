/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ReservationSearchView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationSearchView{}

// ReservationSearchView struct for ReservationSearchView
type ReservationSearchView struct {
	Id           *string               `json:"id,omitempty"`
	StartDate    *time.Time            `json:"startDate,omitempty"`
	EndDate      *time.Time            `json:"endDate,omitempty"`
	Note         *string               `json:"note,omitempty"`
	Applications []BaseApplicationView `json:"applications,omitempty"`
}

// NewReservationSearchView instantiates a new ReservationSearchView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationSearchView() *ReservationSearchView {
	this := ReservationSearchView{}
	return &this
}

// NewReservationSearchViewWithDefaults instantiates a new ReservationSearchView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationSearchViewWithDefaults() *ReservationSearchView {
	this := ReservationSearchView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReservationSearchView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationSearchView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReservationSearchView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReservationSearchView) SetId(v string) {
	o.Id = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ReservationSearchView) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationSearchView) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ReservationSearchView) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *ReservationSearchView) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ReservationSearchView) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationSearchView) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ReservationSearchView) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *ReservationSearchView) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *ReservationSearchView) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationSearchView) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *ReservationSearchView) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *ReservationSearchView) SetNote(v string) {
	o.Note = &v
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *ReservationSearchView) GetApplications() []BaseApplicationView {
	if o == nil || IsNil(o.Applications) {
		var ret []BaseApplicationView
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationSearchView) GetApplicationsOk() ([]BaseApplicationView, bool) {
	if o == nil || IsNil(o.Applications) {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *ReservationSearchView) HasApplications() bool {
	if o != nil && !IsNil(o.Applications) {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []BaseApplicationView and assigns it to the Applications field.
func (o *ReservationSearchView) SetApplications(v []BaseApplicationView) {
	o.Applications = v
}

func (o ReservationSearchView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationSearchView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Applications) {
		toSerialize["applications"] = o.Applications
	}
	return toSerialize, nil
}

type NullableReservationSearchView struct {
	value *ReservationSearchView
	isSet bool
}

func (v NullableReservationSearchView) Get() *ReservationSearchView {
	return v.value
}

func (v *NullableReservationSearchView) Set(val *ReservationSearchView) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationSearchView) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationSearchView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationSearchView(val *ReservationSearchView) *NullableReservationSearchView {
	return &NullableReservationSearchView{value: val, isSet: true}
}

func (v NullableReservationSearchView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationSearchView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
