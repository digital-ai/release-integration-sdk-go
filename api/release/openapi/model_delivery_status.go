/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DeliveryStatus the model 'DeliveryStatus'
type DeliveryStatus string

// List of DeliveryStatus
const (
	DELIVERYSTATUS_TEMPLATE    DeliveryStatus = "TEMPLATE"
	DELIVERYSTATUS_IN_PROGRESS DeliveryStatus = "IN_PROGRESS"
	DELIVERYSTATUS_COMPLETED   DeliveryStatus = "COMPLETED"
)

// All allowed values of DeliveryStatus enum
var AllowedDeliveryStatusEnumValues = []DeliveryStatus{
	"TEMPLATE",
	"IN_PROGRESS",
	"COMPLETED",
}

func (v *DeliveryStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeliveryStatus(value)
	for _, existing := range AllowedDeliveryStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeliveryStatus", value)
}

// NewDeliveryStatusFromValue returns a pointer to a valid DeliveryStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeliveryStatusFromValue(v string) (*DeliveryStatus, error) {
	ev := DeliveryStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeliveryStatus: valid values are %v", v, AllowedDeliveryStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeliveryStatus) IsValid() bool {
	for _, existing := range AllowedDeliveryStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeliveryStatus value
func (v DeliveryStatus) Ptr() *DeliveryStatus {
	return &v
}

type NullableDeliveryStatus struct {
	value *DeliveryStatus
	isSet bool
}

func (v NullableDeliveryStatus) Get() *DeliveryStatus {
	return v.value
}

func (v *NullableDeliveryStatus) Set(val *DeliveryStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryStatus(val *DeliveryStatus) *NullableDeliveryStatus {
	return &NullableDeliveryStatus{value: val, isSet: true}
}

func (v NullableDeliveryStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
