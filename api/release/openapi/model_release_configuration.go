/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseConfiguration{}

// ReleaseConfiguration struct for ReleaseConfiguration
type ReleaseConfiguration struct {
	FolderId        *string            `json:"folderId,omitempty"`
	Title           *string            `json:"title,omitempty"`
	VariableMapping *map[string]string `json:"variableMapping,omitempty"`
}

// NewReleaseConfiguration instantiates a new ReleaseConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseConfiguration() *ReleaseConfiguration {
	this := ReleaseConfiguration{}
	return &this
}

// NewReleaseConfigurationWithDefaults instantiates a new ReleaseConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseConfigurationWithDefaults() *ReleaseConfiguration {
	this := ReleaseConfiguration{}
	return &this
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *ReleaseConfiguration) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseConfiguration) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *ReleaseConfiguration) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *ReleaseConfiguration) SetFolderId(v string) {
	o.FolderId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ReleaseConfiguration) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseConfiguration) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ReleaseConfiguration) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ReleaseConfiguration) SetTitle(v string) {
	o.Title = &v
}

// GetVariableMapping returns the VariableMapping field value if set, zero value otherwise.
func (o *ReleaseConfiguration) GetVariableMapping() map[string]string {
	if o == nil || IsNil(o.VariableMapping) {
		var ret map[string]string
		return ret
	}
	return *o.VariableMapping
}

// GetVariableMappingOk returns a tuple with the VariableMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseConfiguration) GetVariableMappingOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.VariableMapping) {
		return nil, false
	}
	return o.VariableMapping, true
}

// HasVariableMapping returns a boolean if a field has been set.
func (o *ReleaseConfiguration) HasVariableMapping() bool {
	if o != nil && !IsNil(o.VariableMapping) {
		return true
	}

	return false
}

// SetVariableMapping gets a reference to the given map[string]string and assigns it to the VariableMapping field.
func (o *ReleaseConfiguration) SetVariableMapping(v map[string]string) {
	o.VariableMapping = &v
}

func (o ReleaseConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.VariableMapping) {
		toSerialize["variableMapping"] = o.VariableMapping
	}
	return toSerialize, nil
}

type NullableReleaseConfiguration struct {
	value *ReleaseConfiguration
	isSet bool
}

func (v NullableReleaseConfiguration) Get() *ReleaseConfiguration {
	return v.value
}

func (v *NullableReleaseConfiguration) Set(val *ReleaseConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseConfiguration(val *ReleaseConfiguration) *NullableReleaseConfiguration {
	return &NullableReleaseConfiguration{value: val, isSet: true}
}

func (v NullableReleaseConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
