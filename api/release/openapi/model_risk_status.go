/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RiskStatus the model 'RiskStatus'
type RiskStatus string

// List of RiskStatus
const (
	OK               RiskStatus = "OK_FLAG"
	AT_RISK          RiskStatus = "AT_RISK_FLAG"
	ATTENTION_NEEDED RiskStatus = "ATTENTION_NEEDED_FLAG"
)

// All allowed values of RiskStatus enum
var AllowedRiskStatusEnumValues = []RiskStatus{
	"OK_FLAG",
	"AT_RISK_FLAG",
	"ATTENTION_NEEDED_FLAG",
}

func (v *RiskStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RiskStatus(value)
	for _, existing := range AllowedRiskStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RiskStatus", value)
}

// NewRiskStatusFromValue returns a pointer to a valid RiskStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRiskStatusFromValue(v string) (*RiskStatus, error) {
	ev := RiskStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RiskStatus: valid values are %v", v, AllowedRiskStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RiskStatus) IsValid() bool {
	for _, existing := range AllowedRiskStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RiskStatus value
func (v RiskStatus) Ptr() *RiskStatus {
	return &v
}

type NullableRiskStatus struct {
	value *RiskStatus
	isSet bool
}

func (v NullableRiskStatus) Get() *RiskStatus {
	return v.value
}

func (v *NullableRiskStatus) Set(val *RiskStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskStatus(val *RiskStatus) *NullableRiskStatus {
	return &NullableRiskStatus{value: val, isSet: true}
}

func (v NullableRiskStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
