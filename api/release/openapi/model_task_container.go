/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaskContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskContainer{}

// TaskContainer struct for TaskContainer
type TaskContainer struct {
	Tasks []Task `json:"tasks,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewTaskContainer instantiates a new TaskContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskContainer() *TaskContainer {
	this := TaskContainer{}
	return &this
}

// NewTaskContainerWithDefaults instantiates a new TaskContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskContainerWithDefaults() *TaskContainer {
	this := TaskContainer{}
	return &this
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *TaskContainer) GetTasks() []Task {
	if o == nil || isNil(o.Tasks) {
		var ret []Task
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskContainer) GetTasksOk() ([]Task, bool) {
	if o == nil || isNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *TaskContainer) HasTasks() bool {
	if o != nil && !isNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []Task and assigns it to the Tasks field.
func (o *TaskContainer) SetTasks(v []Task) {
	o.Tasks = v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *TaskContainer) GetLocked() bool {
	if o == nil || isNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskContainer) GetLockedOk() (*bool, bool) {
	if o == nil || isNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *TaskContainer) HasLocked() bool {
	if o != nil && !isNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *TaskContainer) SetLocked(v bool) {
	o.Locked = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *TaskContainer) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskContainer) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *TaskContainer) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *TaskContainer) SetTitle(v string) {
	o.Title = &v
}

func (o TaskContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !isNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableTaskContainer struct {
	value *TaskContainer
	isSet bool
}

func (v NullableTaskContainer) Get() *TaskContainer {
	return v.value
}

func (v *NullableTaskContainer) Set(val *TaskContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskContainer(val *TaskContainer) *NullableTaskContainer {
	return &NullableTaskContainer{value: val, isSet: true}
}

func (v NullableTaskContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


