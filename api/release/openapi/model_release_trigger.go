/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ReleaseTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseTrigger{}

// ReleaseTrigger struct for ReleaseTrigger
type ReleaseTrigger struct {
	Id                         *string                           `json:"id,omitempty"`
	Type                       *string                           `json:"type,omitempty"`
	Script                     *string                           `json:"script,omitempty"`
	AbortScript                *string                           `json:"abortScript,omitempty"`
	CiUid                      *int32                            `json:"ciUid,omitempty"`
	Title                      *string                           `json:"title,omitempty"`
	Description                *string                           `json:"description,omitempty"`
	Enabled                    *bool                             `json:"enabled,omitempty"`
	TriggerState               *string                           `json:"triggerState,omitempty"`
	FolderId                   *string                           `json:"folderId,omitempty"`
	AllowParallelExecution     *bool                             `json:"allowParallelExecution,omitempty"`
	LastRunDate                *time.Time                        `json:"lastRunDate,omitempty"`
	LastRunStatus              *TriggerExecutionStatus           `json:"lastRunStatus,omitempty"`
	PollType                   *PollType                         `json:"pollType,omitempty"`
	Periodicity                *string                           `json:"periodicity,omitempty"`
	InitialFire                *bool                             `json:"initialFire,omitempty"`
	ReleaseTitle               *string                           `json:"releaseTitle,omitempty"`
	ExecutionId                *string                           `json:"executionId,omitempty"`
	Variables                  []Variable                        `json:"variables,omitempty"`
	Template                   *string                           `json:"template,omitempty"`
	Tags                       []string                          `json:"tags,omitempty"`
	ReleaseFolder              *string                           `json:"releaseFolder,omitempty"`
	InternalProperties         []string                          `json:"internalProperties,omitempty"`
	TemplateVariables          *map[string]string                `json:"templateVariables,omitempty"`
	TemplatePasswordVariables  *map[string]string                `json:"templatePasswordVariables,omitempty"`
	TriggerStateFromResults    *string                           `json:"triggerStateFromResults,omitempty"`
	ScriptVariableNames        []string                          `json:"scriptVariableNames,omitempty"`
	ScriptVariablesFromResults map[string]map[string]interface{} `json:"scriptVariablesFromResults,omitempty"`
	StringScriptVariableValues *map[string]string                `json:"stringScriptVariableValues,omitempty"`
	ScriptVariableValues       map[string]map[string]interface{} `json:"scriptVariableValues,omitempty"`
	VariablesByKeys            *map[string]Variable              `json:"variablesByKeys,omitempty"`
	ContainerId                *string                           `json:"containerId,omitempty"`
}

// NewReleaseTrigger instantiates a new ReleaseTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseTrigger() *ReleaseTrigger {
	this := ReleaseTrigger{}
	return &this
}

// NewReleaseTriggerWithDefaults instantiates a new ReleaseTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseTriggerWithDefaults() *ReleaseTrigger {
	this := ReleaseTrigger{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReleaseTrigger) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ReleaseTrigger) SetType(v string) {
	o.Type = &v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetScript() string {
	if o == nil || IsNil(o.Script) {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetScriptOk() (*string, bool) {
	if o == nil || IsNil(o.Script) {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasScript() bool {
	if o != nil && !IsNil(o.Script) {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *ReleaseTrigger) SetScript(v string) {
	o.Script = &v
}

// GetAbortScript returns the AbortScript field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetAbortScript() string {
	if o == nil || IsNil(o.AbortScript) {
		var ret string
		return ret
	}
	return *o.AbortScript
}

// GetAbortScriptOk returns a tuple with the AbortScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetAbortScriptOk() (*string, bool) {
	if o == nil || IsNil(o.AbortScript) {
		return nil, false
	}
	return o.AbortScript, true
}

// HasAbortScript returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasAbortScript() bool {
	if o != nil && !IsNil(o.AbortScript) {
		return true
	}

	return false
}

// SetAbortScript gets a reference to the given string and assigns it to the AbortScript field.
func (o *ReleaseTrigger) SetAbortScript(v string) {
	o.AbortScript = &v
}

// GetCiUid returns the CiUid field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetCiUid() int32 {
	if o == nil || IsNil(o.CiUid) {
		var ret int32
		return ret
	}
	return *o.CiUid
}

// GetCiUidOk returns a tuple with the CiUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetCiUidOk() (*int32, bool) {
	if o == nil || IsNil(o.CiUid) {
		return nil, false
	}
	return o.CiUid, true
}

// HasCiUid returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasCiUid() bool {
	if o != nil && !IsNil(o.CiUid) {
		return true
	}

	return false
}

// SetCiUid gets a reference to the given int32 and assigns it to the CiUid field.
func (o *ReleaseTrigger) SetCiUid(v int32) {
	o.CiUid = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ReleaseTrigger) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReleaseTrigger) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ReleaseTrigger) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTriggerState returns the TriggerState field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetTriggerState() string {
	if o == nil || IsNil(o.TriggerState) {
		var ret string
		return ret
	}
	return *o.TriggerState
}

// GetTriggerStateOk returns a tuple with the TriggerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetTriggerStateOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerState) {
		return nil, false
	}
	return o.TriggerState, true
}

// HasTriggerState returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasTriggerState() bool {
	if o != nil && !IsNil(o.TriggerState) {
		return true
	}

	return false
}

// SetTriggerState gets a reference to the given string and assigns it to the TriggerState field.
func (o *ReleaseTrigger) SetTriggerState(v string) {
	o.TriggerState = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *ReleaseTrigger) SetFolderId(v string) {
	o.FolderId = &v
}

// GetAllowParallelExecution returns the AllowParallelExecution field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetAllowParallelExecution() bool {
	if o == nil || IsNil(o.AllowParallelExecution) {
		var ret bool
		return ret
	}
	return *o.AllowParallelExecution
}

// GetAllowParallelExecutionOk returns a tuple with the AllowParallelExecution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetAllowParallelExecutionOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowParallelExecution) {
		return nil, false
	}
	return o.AllowParallelExecution, true
}

// HasAllowParallelExecution returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasAllowParallelExecution() bool {
	if o != nil && !IsNil(o.AllowParallelExecution) {
		return true
	}

	return false
}

// SetAllowParallelExecution gets a reference to the given bool and assigns it to the AllowParallelExecution field.
func (o *ReleaseTrigger) SetAllowParallelExecution(v bool) {
	o.AllowParallelExecution = &v
}

// GetLastRunDate returns the LastRunDate field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetLastRunDate() time.Time {
	if o == nil || IsNil(o.LastRunDate) {
		var ret time.Time
		return ret
	}
	return *o.LastRunDate
}

// GetLastRunDateOk returns a tuple with the LastRunDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetLastRunDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastRunDate) {
		return nil, false
	}
	return o.LastRunDate, true
}

// HasLastRunDate returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasLastRunDate() bool {
	if o != nil && !IsNil(o.LastRunDate) {
		return true
	}

	return false
}

// SetLastRunDate gets a reference to the given time.Time and assigns it to the LastRunDate field.
func (o *ReleaseTrigger) SetLastRunDate(v time.Time) {
	o.LastRunDate = &v
}

// GetLastRunStatus returns the LastRunStatus field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetLastRunStatus() TriggerExecutionStatus {
	if o == nil || IsNil(o.LastRunStatus) {
		var ret TriggerExecutionStatus
		return ret
	}
	return *o.LastRunStatus
}

// GetLastRunStatusOk returns a tuple with the LastRunStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetLastRunStatusOk() (*TriggerExecutionStatus, bool) {
	if o == nil || IsNil(o.LastRunStatus) {
		return nil, false
	}
	return o.LastRunStatus, true
}

// HasLastRunStatus returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasLastRunStatus() bool {
	if o != nil && !IsNil(o.LastRunStatus) {
		return true
	}

	return false
}

// SetLastRunStatus gets a reference to the given TriggerExecutionStatus and assigns it to the LastRunStatus field.
func (o *ReleaseTrigger) SetLastRunStatus(v TriggerExecutionStatus) {
	o.LastRunStatus = &v
}

// GetPollType returns the PollType field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetPollType() PollType {
	if o == nil || IsNil(o.PollType) {
		var ret PollType
		return ret
	}
	return *o.PollType
}

// GetPollTypeOk returns a tuple with the PollType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetPollTypeOk() (*PollType, bool) {
	if o == nil || IsNil(o.PollType) {
		return nil, false
	}
	return o.PollType, true
}

// HasPollType returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasPollType() bool {
	if o != nil && !IsNil(o.PollType) {
		return true
	}

	return false
}

// SetPollType gets a reference to the given PollType and assigns it to the PollType field.
func (o *ReleaseTrigger) SetPollType(v PollType) {
	o.PollType = &v
}

// GetPeriodicity returns the Periodicity field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetPeriodicity() string {
	if o == nil || IsNil(o.Periodicity) {
		var ret string
		return ret
	}
	return *o.Periodicity
}

// GetPeriodicityOk returns a tuple with the Periodicity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetPeriodicityOk() (*string, bool) {
	if o == nil || IsNil(o.Periodicity) {
		return nil, false
	}
	return o.Periodicity, true
}

// HasPeriodicity returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasPeriodicity() bool {
	if o != nil && !IsNil(o.Periodicity) {
		return true
	}

	return false
}

// SetPeriodicity gets a reference to the given string and assigns it to the Periodicity field.
func (o *ReleaseTrigger) SetPeriodicity(v string) {
	o.Periodicity = &v
}

// GetInitialFire returns the InitialFire field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetInitialFire() bool {
	if o == nil || IsNil(o.InitialFire) {
		var ret bool
		return ret
	}
	return *o.InitialFire
}

// GetInitialFireOk returns a tuple with the InitialFire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetInitialFireOk() (*bool, bool) {
	if o == nil || IsNil(o.InitialFire) {
		return nil, false
	}
	return o.InitialFire, true
}

// HasInitialFire returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasInitialFire() bool {
	if o != nil && !IsNil(o.InitialFire) {
		return true
	}

	return false
}

// SetInitialFire gets a reference to the given bool and assigns it to the InitialFire field.
func (o *ReleaseTrigger) SetInitialFire(v bool) {
	o.InitialFire = &v
}

// GetReleaseTitle returns the ReleaseTitle field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetReleaseTitle() string {
	if o == nil || IsNil(o.ReleaseTitle) {
		var ret string
		return ret
	}
	return *o.ReleaseTitle
}

// GetReleaseTitleOk returns a tuple with the ReleaseTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetReleaseTitleOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseTitle) {
		return nil, false
	}
	return o.ReleaseTitle, true
}

// HasReleaseTitle returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasReleaseTitle() bool {
	if o != nil && !IsNil(o.ReleaseTitle) {
		return true
	}

	return false
}

// SetReleaseTitle gets a reference to the given string and assigns it to the ReleaseTitle field.
func (o *ReleaseTrigger) SetReleaseTitle(v string) {
	o.ReleaseTitle = &v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId) {
		var ret string
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetExecutionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionId) {
		return nil, false
	}
	return o.ExecutionId, true
}

// HasExecutionId returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasExecutionId() bool {
	if o != nil && !IsNil(o.ExecutionId) {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given string and assigns it to the ExecutionId field.
func (o *ReleaseTrigger) SetExecutionId(v string) {
	o.ExecutionId = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetVariables() []Variable {
	if o == nil || IsNil(o.Variables) {
		var ret []Variable
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetVariablesOk() ([]Variable, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []Variable and assigns it to the Variables field.
func (o *ReleaseTrigger) SetVariables(v []Variable) {
	o.Variables = v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *ReleaseTrigger) SetTemplate(v string) {
	o.Template = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ReleaseTrigger) SetTags(v []string) {
	o.Tags = v
}

// GetReleaseFolder returns the ReleaseFolder field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetReleaseFolder() string {
	if o == nil || IsNil(o.ReleaseFolder) {
		var ret string
		return ret
	}
	return *o.ReleaseFolder
}

// GetReleaseFolderOk returns a tuple with the ReleaseFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetReleaseFolderOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseFolder) {
		return nil, false
	}
	return o.ReleaseFolder, true
}

// HasReleaseFolder returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasReleaseFolder() bool {
	if o != nil && !IsNil(o.ReleaseFolder) {
		return true
	}

	return false
}

// SetReleaseFolder gets a reference to the given string and assigns it to the ReleaseFolder field.
func (o *ReleaseTrigger) SetReleaseFolder(v string) {
	o.ReleaseFolder = &v
}

// GetInternalProperties returns the InternalProperties field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetInternalProperties() []string {
	if o == nil || IsNil(o.InternalProperties) {
		var ret []string
		return ret
	}
	return o.InternalProperties
}

// GetInternalPropertiesOk returns a tuple with the InternalProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetInternalPropertiesOk() ([]string, bool) {
	if o == nil || IsNil(o.InternalProperties) {
		return nil, false
	}
	return o.InternalProperties, true
}

// HasInternalProperties returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasInternalProperties() bool {
	if o != nil && !IsNil(o.InternalProperties) {
		return true
	}

	return false
}

// SetInternalProperties gets a reference to the given []string and assigns it to the InternalProperties field.
func (o *ReleaseTrigger) SetInternalProperties(v []string) {
	o.InternalProperties = v
}

// GetTemplateVariables returns the TemplateVariables field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetTemplateVariables() map[string]string {
	if o == nil || IsNil(o.TemplateVariables) {
		var ret map[string]string
		return ret
	}
	return *o.TemplateVariables
}

// GetTemplateVariablesOk returns a tuple with the TemplateVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetTemplateVariablesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.TemplateVariables) {
		return nil, false
	}
	return o.TemplateVariables, true
}

// HasTemplateVariables returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasTemplateVariables() bool {
	if o != nil && !IsNil(o.TemplateVariables) {
		return true
	}

	return false
}

// SetTemplateVariables gets a reference to the given map[string]string and assigns it to the TemplateVariables field.
func (o *ReleaseTrigger) SetTemplateVariables(v map[string]string) {
	o.TemplateVariables = &v
}

// GetTemplatePasswordVariables returns the TemplatePasswordVariables field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetTemplatePasswordVariables() map[string]string {
	if o == nil || IsNil(o.TemplatePasswordVariables) {
		var ret map[string]string
		return ret
	}
	return *o.TemplatePasswordVariables
}

// GetTemplatePasswordVariablesOk returns a tuple with the TemplatePasswordVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetTemplatePasswordVariablesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.TemplatePasswordVariables) {
		return nil, false
	}
	return o.TemplatePasswordVariables, true
}

// HasTemplatePasswordVariables returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasTemplatePasswordVariables() bool {
	if o != nil && !IsNil(o.TemplatePasswordVariables) {
		return true
	}

	return false
}

// SetTemplatePasswordVariables gets a reference to the given map[string]string and assigns it to the TemplatePasswordVariables field.
func (o *ReleaseTrigger) SetTemplatePasswordVariables(v map[string]string) {
	o.TemplatePasswordVariables = &v
}

// GetTriggerStateFromResults returns the TriggerStateFromResults field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetTriggerStateFromResults() string {
	if o == nil || IsNil(o.TriggerStateFromResults) {
		var ret string
		return ret
	}
	return *o.TriggerStateFromResults
}

// GetTriggerStateFromResultsOk returns a tuple with the TriggerStateFromResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetTriggerStateFromResultsOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerStateFromResults) {
		return nil, false
	}
	return o.TriggerStateFromResults, true
}

// HasTriggerStateFromResults returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasTriggerStateFromResults() bool {
	if o != nil && !IsNil(o.TriggerStateFromResults) {
		return true
	}

	return false
}

// SetTriggerStateFromResults gets a reference to the given string and assigns it to the TriggerStateFromResults field.
func (o *ReleaseTrigger) SetTriggerStateFromResults(v string) {
	o.TriggerStateFromResults = &v
}

// GetScriptVariableNames returns the ScriptVariableNames field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetScriptVariableNames() []string {
	if o == nil || IsNil(o.ScriptVariableNames) {
		var ret []string
		return ret
	}
	return o.ScriptVariableNames
}

// GetScriptVariableNamesOk returns a tuple with the ScriptVariableNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetScriptVariableNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ScriptVariableNames) {
		return nil, false
	}
	return o.ScriptVariableNames, true
}

// HasScriptVariableNames returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasScriptVariableNames() bool {
	if o != nil && !IsNil(o.ScriptVariableNames) {
		return true
	}

	return false
}

// SetScriptVariableNames gets a reference to the given []string and assigns it to the ScriptVariableNames field.
func (o *ReleaseTrigger) SetScriptVariableNames(v []string) {
	o.ScriptVariableNames = v
}

// GetScriptVariablesFromResults returns the ScriptVariablesFromResults field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetScriptVariablesFromResults() map[string]map[string]interface{} {
	if o == nil || IsNil(o.ScriptVariablesFromResults) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.ScriptVariablesFromResults
}

// GetScriptVariablesFromResultsOk returns a tuple with the ScriptVariablesFromResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetScriptVariablesFromResultsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ScriptVariablesFromResults) {
		return map[string]map[string]interface{}{}, false
	}
	return o.ScriptVariablesFromResults, true
}

// HasScriptVariablesFromResults returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasScriptVariablesFromResults() bool {
	if o != nil && !IsNil(o.ScriptVariablesFromResults) {
		return true
	}

	return false
}

// SetScriptVariablesFromResults gets a reference to the given map[string]map[string]interface{} and assigns it to the ScriptVariablesFromResults field.
func (o *ReleaseTrigger) SetScriptVariablesFromResults(v map[string]map[string]interface{}) {
	o.ScriptVariablesFromResults = v
}

// GetStringScriptVariableValues returns the StringScriptVariableValues field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetStringScriptVariableValues() map[string]string {
	if o == nil || IsNil(o.StringScriptVariableValues) {
		var ret map[string]string
		return ret
	}
	return *o.StringScriptVariableValues
}

// GetStringScriptVariableValuesOk returns a tuple with the StringScriptVariableValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetStringScriptVariableValuesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.StringScriptVariableValues) {
		return nil, false
	}
	return o.StringScriptVariableValues, true
}

// HasStringScriptVariableValues returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasStringScriptVariableValues() bool {
	if o != nil && !IsNil(o.StringScriptVariableValues) {
		return true
	}

	return false
}

// SetStringScriptVariableValues gets a reference to the given map[string]string and assigns it to the StringScriptVariableValues field.
func (o *ReleaseTrigger) SetStringScriptVariableValues(v map[string]string) {
	o.StringScriptVariableValues = &v
}

// GetScriptVariableValues returns the ScriptVariableValues field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetScriptVariableValues() map[string]map[string]interface{} {
	if o == nil || IsNil(o.ScriptVariableValues) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.ScriptVariableValues
}

// GetScriptVariableValuesOk returns a tuple with the ScriptVariableValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetScriptVariableValuesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ScriptVariableValues) {
		return map[string]map[string]interface{}{}, false
	}
	return o.ScriptVariableValues, true
}

// HasScriptVariableValues returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasScriptVariableValues() bool {
	if o != nil && !IsNil(o.ScriptVariableValues) {
		return true
	}

	return false
}

// SetScriptVariableValues gets a reference to the given map[string]map[string]interface{} and assigns it to the ScriptVariableValues field.
func (o *ReleaseTrigger) SetScriptVariableValues(v map[string]map[string]interface{}) {
	o.ScriptVariableValues = v
}

// GetVariablesByKeys returns the VariablesByKeys field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetVariablesByKeys() map[string]Variable {
	if o == nil || IsNil(o.VariablesByKeys) {
		var ret map[string]Variable
		return ret
	}
	return *o.VariablesByKeys
}

// GetVariablesByKeysOk returns a tuple with the VariablesByKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetVariablesByKeysOk() (*map[string]Variable, bool) {
	if o == nil || IsNil(o.VariablesByKeys) {
		return nil, false
	}
	return o.VariablesByKeys, true
}

// HasVariablesByKeys returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasVariablesByKeys() bool {
	if o != nil && !IsNil(o.VariablesByKeys) {
		return true
	}

	return false
}

// SetVariablesByKeys gets a reference to the given map[string]Variable and assigns it to the VariablesByKeys field.
func (o *ReleaseTrigger) SetVariablesByKeys(v map[string]Variable) {
	o.VariablesByKeys = &v
}

// GetContainerId returns the ContainerId field value if set, zero value otherwise.
func (o *ReleaseTrigger) GetContainerId() string {
	if o == nil || IsNil(o.ContainerId) {
		var ret string
		return ret
	}
	return *o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTrigger) GetContainerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerId) {
		return nil, false
	}
	return o.ContainerId, true
}

// HasContainerId returns a boolean if a field has been set.
func (o *ReleaseTrigger) HasContainerId() bool {
	if o != nil && !IsNil(o.ContainerId) {
		return true
	}

	return false
}

// SetContainerId gets a reference to the given string and assigns it to the ContainerId field.
func (o *ReleaseTrigger) SetContainerId(v string) {
	o.ContainerId = &v
}

func (o ReleaseTrigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Script) {
		toSerialize["script"] = o.Script
	}
	if !IsNil(o.AbortScript) {
		toSerialize["abortScript"] = o.AbortScript
	}
	if !IsNil(o.CiUid) {
		toSerialize["ciUid"] = o.CiUid
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.TriggerState) {
		toSerialize["triggerState"] = o.TriggerState
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !IsNil(o.AllowParallelExecution) {
		toSerialize["allowParallelExecution"] = o.AllowParallelExecution
	}
	if !IsNil(o.LastRunDate) {
		toSerialize["lastRunDate"] = o.LastRunDate
	}
	if !IsNil(o.LastRunStatus) {
		toSerialize["lastRunStatus"] = o.LastRunStatus
	}
	if !IsNil(o.PollType) {
		toSerialize["pollType"] = o.PollType
	}
	if !IsNil(o.Periodicity) {
		toSerialize["periodicity"] = o.Periodicity
	}
	if !IsNil(o.InitialFire) {
		toSerialize["initialFire"] = o.InitialFire
	}
	if !IsNil(o.ReleaseTitle) {
		toSerialize["releaseTitle"] = o.ReleaseTitle
	}
	if !IsNil(o.ExecutionId) {
		toSerialize["executionId"] = o.ExecutionId
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ReleaseFolder) {
		toSerialize["releaseFolder"] = o.ReleaseFolder
	}
	if !IsNil(o.InternalProperties) {
		toSerialize["internalProperties"] = o.InternalProperties
	}
	if !IsNil(o.TemplateVariables) {
		toSerialize["templateVariables"] = o.TemplateVariables
	}
	if !IsNil(o.TemplatePasswordVariables) {
		toSerialize["templatePasswordVariables"] = o.TemplatePasswordVariables
	}
	if !IsNil(o.TriggerStateFromResults) {
		toSerialize["triggerStateFromResults"] = o.TriggerStateFromResults
	}
	if !IsNil(o.ScriptVariableNames) {
		toSerialize["scriptVariableNames"] = o.ScriptVariableNames
	}
	if !IsNil(o.ScriptVariablesFromResults) {
		toSerialize["scriptVariablesFromResults"] = o.ScriptVariablesFromResults
	}
	if !IsNil(o.StringScriptVariableValues) {
		toSerialize["stringScriptVariableValues"] = o.StringScriptVariableValues
	}
	if !IsNil(o.ScriptVariableValues) {
		toSerialize["scriptVariableValues"] = o.ScriptVariableValues
	}
	if !IsNil(o.VariablesByKeys) {
		toSerialize["variablesByKeys"] = o.VariablesByKeys
	}
	if !IsNil(o.ContainerId) {
		toSerialize["containerId"] = o.ContainerId
	}
	return toSerialize, nil
}

type NullableReleaseTrigger struct {
	value *ReleaseTrigger
	isSet bool
}

func (v NullableReleaseTrigger) Get() *ReleaseTrigger {
	return v.value
}

func (v *NullableReleaseTrigger) Set(val *ReleaseTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseTrigger(val *ReleaseTrigger) *NullableReleaseTrigger {
	return &NullableReleaseTrigger{value: val, isSet: true}
}

func (v NullableReleaseTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
