/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PollType the model 'PollType'
type PollType string

// List of PollType
const (
	REPEAT PollType = "REPEAT"
	CRON PollType = "CRON"
)

// All allowed values of PollType enum
var AllowedPollTypeEnumValues = []PollType{
	"REPEAT",
	"CRON",
}

func (v *PollType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PollType(value)
	for _, existing := range AllowedPollTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PollType", value)
}

// NewPollTypeFromValue returns a pointer to a valid PollType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPollTypeFromValue(v string) (*PollType, error) {
	ev := PollType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PollType: valid values are %v", v, AllowedPollTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PollType) IsValid() bool {
	for _, existing := range AllowedPollTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PollType value
func (v PollType) Ptr() *PollType {
	return &v
}

type NullablePollType struct {
	value *PollType
	isSet bool
}

func (v NullablePollType) Get() *PollType {
	return v.value
}

func (v *NullablePollType) Set(val *PollType) {
	v.value = val
	v.isSet = true
}

func (v NullablePollType) IsSet() bool {
	return v.isSet
}

func (v *NullablePollType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePollType(val *PollType) *NullablePollType {
	return &NullablePollType{value: val, isSet: true}
}

func (v NullablePollType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePollType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

