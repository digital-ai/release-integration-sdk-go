/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Team type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Team{}

// Team struct for Team
type Team struct {
	TeamName *string `json:"teamName,omitempty"`
	Members []string `json:"members,omitempty"`
	Roles []string `json:"roles,omitempty"`
	Permissions []string `json:"permissions,omitempty"`
	ReleaseAdminTeam *bool `json:"releaseAdminTeam,omitempty"`
	TemplateOwnerTeam *bool `json:"templateOwnerTeam,omitempty"`
	FolderOwnerTeam *bool `json:"folderOwnerTeam,omitempty"`
	FolderAdminTeam *bool `json:"folderAdminTeam,omitempty"`
	SystemTeam *bool `json:"systemTeam,omitempty"`
}

// NewTeam instantiates a new Team object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeam() *Team {
	this := Team{}
	return &this
}

// NewTeamWithDefaults instantiates a new Team object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamWithDefaults() *Team {
	this := Team{}
	return &this
}

// GetTeamName returns the TeamName field value if set, zero value otherwise.
func (o *Team) GetTeamName() string {
	if o == nil || isNil(o.TeamName) {
		var ret string
		return ret
	}
	return *o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetTeamNameOk() (*string, bool) {
	if o == nil || isNil(o.TeamName) {
		return nil, false
	}
	return o.TeamName, true
}

// HasTeamName returns a boolean if a field has been set.
func (o *Team) HasTeamName() bool {
	if o != nil && !isNil(o.TeamName) {
		return true
	}

	return false
}

// SetTeamName gets a reference to the given string and assigns it to the TeamName field.
func (o *Team) SetTeamName(v string) {
	o.TeamName = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Team) GetMembers() []string {
	if o == nil || isNil(o.Members) {
		var ret []string
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetMembersOk() ([]string, bool) {
	if o == nil || isNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Team) HasMembers() bool {
	if o != nil && !isNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []string and assigns it to the Members field.
func (o *Team) SetMembers(v []string) {
	o.Members = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Team) GetRoles() []string {
	if o == nil || isNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetRolesOk() ([]string, bool) {
	if o == nil || isNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Team) HasRoles() bool {
	if o != nil && !isNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *Team) SetRoles(v []string) {
	o.Roles = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *Team) GetPermissions() []string {
	if o == nil || isNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetPermissionsOk() ([]string, bool) {
	if o == nil || isNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *Team) HasPermissions() bool {
	if o != nil && !isNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *Team) SetPermissions(v []string) {
	o.Permissions = v
}

// GetReleaseAdminTeam returns the ReleaseAdminTeam field value if set, zero value otherwise.
func (o *Team) GetReleaseAdminTeam() bool {
	if o == nil || isNil(o.ReleaseAdminTeam) {
		var ret bool
		return ret
	}
	return *o.ReleaseAdminTeam
}

// GetReleaseAdminTeamOk returns a tuple with the ReleaseAdminTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetReleaseAdminTeamOk() (*bool, bool) {
	if o == nil || isNil(o.ReleaseAdminTeam) {
		return nil, false
	}
	return o.ReleaseAdminTeam, true
}

// HasReleaseAdminTeam returns a boolean if a field has been set.
func (o *Team) HasReleaseAdminTeam() bool {
	if o != nil && !isNil(o.ReleaseAdminTeam) {
		return true
	}

	return false
}

// SetReleaseAdminTeam gets a reference to the given bool and assigns it to the ReleaseAdminTeam field.
func (o *Team) SetReleaseAdminTeam(v bool) {
	o.ReleaseAdminTeam = &v
}

// GetTemplateOwnerTeam returns the TemplateOwnerTeam field value if set, zero value otherwise.
func (o *Team) GetTemplateOwnerTeam() bool {
	if o == nil || isNil(o.TemplateOwnerTeam) {
		var ret bool
		return ret
	}
	return *o.TemplateOwnerTeam
}

// GetTemplateOwnerTeamOk returns a tuple with the TemplateOwnerTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetTemplateOwnerTeamOk() (*bool, bool) {
	if o == nil || isNil(o.TemplateOwnerTeam) {
		return nil, false
	}
	return o.TemplateOwnerTeam, true
}

// HasTemplateOwnerTeam returns a boolean if a field has been set.
func (o *Team) HasTemplateOwnerTeam() bool {
	if o != nil && !isNil(o.TemplateOwnerTeam) {
		return true
	}

	return false
}

// SetTemplateOwnerTeam gets a reference to the given bool and assigns it to the TemplateOwnerTeam field.
func (o *Team) SetTemplateOwnerTeam(v bool) {
	o.TemplateOwnerTeam = &v
}

// GetFolderOwnerTeam returns the FolderOwnerTeam field value if set, zero value otherwise.
func (o *Team) GetFolderOwnerTeam() bool {
	if o == nil || isNil(o.FolderOwnerTeam) {
		var ret bool
		return ret
	}
	return *o.FolderOwnerTeam
}

// GetFolderOwnerTeamOk returns a tuple with the FolderOwnerTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetFolderOwnerTeamOk() (*bool, bool) {
	if o == nil || isNil(o.FolderOwnerTeam) {
		return nil, false
	}
	return o.FolderOwnerTeam, true
}

// HasFolderOwnerTeam returns a boolean if a field has been set.
func (o *Team) HasFolderOwnerTeam() bool {
	if o != nil && !isNil(o.FolderOwnerTeam) {
		return true
	}

	return false
}

// SetFolderOwnerTeam gets a reference to the given bool and assigns it to the FolderOwnerTeam field.
func (o *Team) SetFolderOwnerTeam(v bool) {
	o.FolderOwnerTeam = &v
}

// GetFolderAdminTeam returns the FolderAdminTeam field value if set, zero value otherwise.
func (o *Team) GetFolderAdminTeam() bool {
	if o == nil || isNil(o.FolderAdminTeam) {
		var ret bool
		return ret
	}
	return *o.FolderAdminTeam
}

// GetFolderAdminTeamOk returns a tuple with the FolderAdminTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetFolderAdminTeamOk() (*bool, bool) {
	if o == nil || isNil(o.FolderAdminTeam) {
		return nil, false
	}
	return o.FolderAdminTeam, true
}

// HasFolderAdminTeam returns a boolean if a field has been set.
func (o *Team) HasFolderAdminTeam() bool {
	if o != nil && !isNil(o.FolderAdminTeam) {
		return true
	}

	return false
}

// SetFolderAdminTeam gets a reference to the given bool and assigns it to the FolderAdminTeam field.
func (o *Team) SetFolderAdminTeam(v bool) {
	o.FolderAdminTeam = &v
}

// GetSystemTeam returns the SystemTeam field value if set, zero value otherwise.
func (o *Team) GetSystemTeam() bool {
	if o == nil || isNil(o.SystemTeam) {
		var ret bool
		return ret
	}
	return *o.SystemTeam
}

// GetSystemTeamOk returns a tuple with the SystemTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetSystemTeamOk() (*bool, bool) {
	if o == nil || isNil(o.SystemTeam) {
		return nil, false
	}
	return o.SystemTeam, true
}

// HasSystemTeam returns a boolean if a field has been set.
func (o *Team) HasSystemTeam() bool {
	if o != nil && !isNil(o.SystemTeam) {
		return true
	}

	return false
}

// SetSystemTeam gets a reference to the given bool and assigns it to the SystemTeam field.
func (o *Team) SetSystemTeam(v bool) {
	o.SystemTeam = &v
}

func (o Team) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Team) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TeamName) {
		toSerialize["teamName"] = o.TeamName
	}
	if !isNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !isNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !isNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !isNil(o.ReleaseAdminTeam) {
		toSerialize["releaseAdminTeam"] = o.ReleaseAdminTeam
	}
	if !isNil(o.TemplateOwnerTeam) {
		toSerialize["templateOwnerTeam"] = o.TemplateOwnerTeam
	}
	if !isNil(o.FolderOwnerTeam) {
		toSerialize["folderOwnerTeam"] = o.FolderOwnerTeam
	}
	if !isNil(o.FolderAdminTeam) {
		toSerialize["folderAdminTeam"] = o.FolderAdminTeam
	}
	if !isNil(o.SystemTeam) {
		toSerialize["systemTeam"] = o.SystemTeam
	}
	return toSerialize, nil
}

type NullableTeam struct {
	value *Team
	isSet bool
}

func (v NullableTeam) Get() *Team {
	return v.value
}

func (v *NullableTeam) Set(val *Team) {
	v.value = val
	v.isSet = true
}

func (v NullableTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeam(val *Team) *NullableTeam {
	return &NullableTeam{value: val, isSet: true}
}

func (v NullableTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


