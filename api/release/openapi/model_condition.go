/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Condition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Condition{}

// Condition struct for Condition
type Condition struct {
	Satisfied *bool `json:"satisfied,omitempty"`
	SatisfiedDate *string `json:"satisfiedDate,omitempty"`
	Description *string `json:"description,omitempty"`
	Active *bool `json:"active,omitempty"`
	InputProperties []interface{} `json:"inputProperties,omitempty"`
	Leaf *bool `json:"leaf,omitempty"`
	AllConditions []Condition `json:"allConditions,omitempty"`
	LeafConditions []Condition `json:"leafConditions,omitempty"`
}

// NewCondition instantiates a new Condition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition() *Condition {
	this := Condition{}
	return &this
}

// NewConditionWithDefaults instantiates a new Condition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionWithDefaults() *Condition {
	this := Condition{}
	return &this
}

// GetSatisfied returns the Satisfied field value if set, zero value otherwise.
func (o *Condition) GetSatisfied() bool {
	if o == nil || isNil(o.Satisfied) {
		var ret bool
		return ret
	}
	return *o.Satisfied
}

// GetSatisfiedOk returns a tuple with the Satisfied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetSatisfiedOk() (*bool, bool) {
	if o == nil || isNil(o.Satisfied) {
		return nil, false
	}
	return o.Satisfied, true
}

// HasSatisfied returns a boolean if a field has been set.
func (o *Condition) HasSatisfied() bool {
	if o != nil && !isNil(o.Satisfied) {
		return true
	}

	return false
}

// SetSatisfied gets a reference to the given bool and assigns it to the Satisfied field.
func (o *Condition) SetSatisfied(v bool) {
	o.Satisfied = &v
}

// GetSatisfiedDate returns the SatisfiedDate field value if set, zero value otherwise.
func (o *Condition) GetSatisfiedDate() string {
	if o == nil || isNil(o.SatisfiedDate) {
		var ret string
		return ret
	}
	return *o.SatisfiedDate
}

// GetSatisfiedDateOk returns a tuple with the SatisfiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetSatisfiedDateOk() (*string, bool) {
	if o == nil || isNil(o.SatisfiedDate) {
		return nil, false
	}
	return o.SatisfiedDate, true
}

// HasSatisfiedDate returns a boolean if a field has been set.
func (o *Condition) HasSatisfiedDate() bool {
	if o != nil && !isNil(o.SatisfiedDate) {
		return true
	}

	return false
}

// SetSatisfiedDate gets a reference to the given string and assigns it to the SatisfiedDate field.
func (o *Condition) SetSatisfiedDate(v string) {
	o.SatisfiedDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Condition) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Condition) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Condition) SetDescription(v string) {
	o.Description = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Condition) GetActive() bool {
	if o == nil || isNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetActiveOk() (*bool, bool) {
	if o == nil || isNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Condition) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Condition) SetActive(v bool) {
	o.Active = &v
}

// GetInputProperties returns the InputProperties field value if set, zero value otherwise.
func (o *Condition) GetInputProperties() []interface{} {
	if o == nil || isNil(o.InputProperties) {
		var ret []interface{}
		return ret
	}
	return o.InputProperties
}

// GetInputPropertiesOk returns a tuple with the InputProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetInputPropertiesOk() ([]interface{}, bool) {
	if o == nil || isNil(o.InputProperties) {
		return nil, false
	}
	return o.InputProperties, true
}

// HasInputProperties returns a boolean if a field has been set.
func (o *Condition) HasInputProperties() bool {
	if o != nil && !isNil(o.InputProperties) {
		return true
	}

	return false
}

// SetInputProperties gets a reference to the given []interface{} and assigns it to the InputProperties field.
func (o *Condition) SetInputProperties(v []interface{}) {
	o.InputProperties = v
}

// GetLeaf returns the Leaf field value if set, zero value otherwise.
func (o *Condition) GetLeaf() bool {
	if o == nil || isNil(o.Leaf) {
		var ret bool
		return ret
	}
	return *o.Leaf
}

// GetLeafOk returns a tuple with the Leaf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetLeafOk() (*bool, bool) {
	if o == nil || isNil(o.Leaf) {
		return nil, false
	}
	return o.Leaf, true
}

// HasLeaf returns a boolean if a field has been set.
func (o *Condition) HasLeaf() bool {
	if o != nil && !isNil(o.Leaf) {
		return true
	}

	return false
}

// SetLeaf gets a reference to the given bool and assigns it to the Leaf field.
func (o *Condition) SetLeaf(v bool) {
	o.Leaf = &v
}

// GetAllConditions returns the AllConditions field value if set, zero value otherwise.
func (o *Condition) GetAllConditions() []Condition {
	if o == nil || isNil(o.AllConditions) {
		var ret []Condition
		return ret
	}
	return o.AllConditions
}

// GetAllConditionsOk returns a tuple with the AllConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetAllConditionsOk() ([]Condition, bool) {
	if o == nil || isNil(o.AllConditions) {
		return nil, false
	}
	return o.AllConditions, true
}

// HasAllConditions returns a boolean if a field has been set.
func (o *Condition) HasAllConditions() bool {
	if o != nil && !isNil(o.AllConditions) {
		return true
	}

	return false
}

// SetAllConditions gets a reference to the given []Condition and assigns it to the AllConditions field.
func (o *Condition) SetAllConditions(v []Condition) {
	o.AllConditions = v
}

// GetLeafConditions returns the LeafConditions field value if set, zero value otherwise.
func (o *Condition) GetLeafConditions() []Condition {
	if o == nil || isNil(o.LeafConditions) {
		var ret []Condition
		return ret
	}
	return o.LeafConditions
}

// GetLeafConditionsOk returns a tuple with the LeafConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetLeafConditionsOk() ([]Condition, bool) {
	if o == nil || isNil(o.LeafConditions) {
		return nil, false
	}
	return o.LeafConditions, true
}

// HasLeafConditions returns a boolean if a field has been set.
func (o *Condition) HasLeafConditions() bool {
	if o != nil && !isNil(o.LeafConditions) {
		return true
	}

	return false
}

// SetLeafConditions gets a reference to the given []Condition and assigns it to the LeafConditions field.
func (o *Condition) SetLeafConditions(v []Condition) {
	o.LeafConditions = v
}

func (o Condition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Condition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Satisfied) {
		toSerialize["satisfied"] = o.Satisfied
	}
	if !isNil(o.SatisfiedDate) {
		toSerialize["satisfiedDate"] = o.SatisfiedDate
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.InputProperties) {
		toSerialize["inputProperties"] = o.InputProperties
	}
	if !isNil(o.Leaf) {
		toSerialize["leaf"] = o.Leaf
	}
	if !isNil(o.AllConditions) {
		toSerialize["allConditions"] = o.AllConditions
	}
	if !isNil(o.LeafConditions) {
		toSerialize["leafConditions"] = o.LeafConditions
	}
	return toSerialize, nil
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


