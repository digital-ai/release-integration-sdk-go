/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Attachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attachment{}

// Attachment struct for Attachment
type Attachment struct {
	Id                    *string                `json:"id,omitempty"`
	Type                  *string                `json:"type,omitempty"`
	File                  map[string]interface{} `json:"file,omitempty"`
	ContentType           *string                `json:"contentType,omitempty"`
	ExportFilename        *string                `json:"exportFilename,omitempty"`
	FileUri               *string                `json:"fileUri,omitempty"`
	Placeholders          []string               `json:"placeholders,omitempty"`
	TextFileNamesRegex    *string                `json:"textFileNamesRegex,omitempty"`
	ExcludeFileNamesRegex *string                `json:"excludeFileNamesRegex,omitempty"`
	FileEncodings         *map[string]string     `json:"fileEncodings,omitempty"`
	Checksum              *string                `json:"checksum,omitempty"`
}

// NewAttachment instantiates a new Attachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachment() *Attachment {
	this := Attachment{}
	return &this
}

// NewAttachmentWithDefaults instantiates a new Attachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentWithDefaults() *Attachment {
	this := Attachment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Attachment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Attachment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Attachment) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Attachment) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Attachment) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Attachment) SetType(v string) {
	o.Type = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *Attachment) GetFile() map[string]interface{} {
	if o == nil || IsNil(o.File) {
		var ret map[string]interface{}
		return ret
	}
	return o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.File) {
		return map[string]interface{}{}, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *Attachment) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given map[string]interface{} and assigns it to the File field.
func (o *Attachment) SetFile(v map[string]interface{}) {
	o.File = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *Attachment) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *Attachment) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *Attachment) SetContentType(v string) {
	o.ContentType = &v
}

// GetExportFilename returns the ExportFilename field value if set, zero value otherwise.
func (o *Attachment) GetExportFilename() string {
	if o == nil || IsNil(o.ExportFilename) {
		var ret string
		return ret
	}
	return *o.ExportFilename
}

// GetExportFilenameOk returns a tuple with the ExportFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetExportFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.ExportFilename) {
		return nil, false
	}
	return o.ExportFilename, true
}

// HasExportFilename returns a boolean if a field has been set.
func (o *Attachment) HasExportFilename() bool {
	if o != nil && !IsNil(o.ExportFilename) {
		return true
	}

	return false
}

// SetExportFilename gets a reference to the given string and assigns it to the ExportFilename field.
func (o *Attachment) SetExportFilename(v string) {
	o.ExportFilename = &v
}

// GetFileUri returns the FileUri field value if set, zero value otherwise.
func (o *Attachment) GetFileUri() string {
	if o == nil || IsNil(o.FileUri) {
		var ret string
		return ret
	}
	return *o.FileUri
}

// GetFileUriOk returns a tuple with the FileUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileUriOk() (*string, bool) {
	if o == nil || IsNil(o.FileUri) {
		return nil, false
	}
	return o.FileUri, true
}

// HasFileUri returns a boolean if a field has been set.
func (o *Attachment) HasFileUri() bool {
	if o != nil && !IsNil(o.FileUri) {
		return true
	}

	return false
}

// SetFileUri gets a reference to the given string and assigns it to the FileUri field.
func (o *Attachment) SetFileUri(v string) {
	o.FileUri = &v
}

// GetPlaceholders returns the Placeholders field value if set, zero value otherwise.
func (o *Attachment) GetPlaceholders() []string {
	if o == nil || IsNil(o.Placeholders) {
		var ret []string
		return ret
	}
	return o.Placeholders
}

// GetPlaceholdersOk returns a tuple with the Placeholders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetPlaceholdersOk() ([]string, bool) {
	if o == nil || IsNil(o.Placeholders) {
		return nil, false
	}
	return o.Placeholders, true
}

// HasPlaceholders returns a boolean if a field has been set.
func (o *Attachment) HasPlaceholders() bool {
	if o != nil && !IsNil(o.Placeholders) {
		return true
	}

	return false
}

// SetPlaceholders gets a reference to the given []string and assigns it to the Placeholders field.
func (o *Attachment) SetPlaceholders(v []string) {
	o.Placeholders = v
}

// GetTextFileNamesRegex returns the TextFileNamesRegex field value if set, zero value otherwise.
func (o *Attachment) GetTextFileNamesRegex() string {
	if o == nil || IsNil(o.TextFileNamesRegex) {
		var ret string
		return ret
	}
	return *o.TextFileNamesRegex
}

// GetTextFileNamesRegexOk returns a tuple with the TextFileNamesRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetTextFileNamesRegexOk() (*string, bool) {
	if o == nil || IsNil(o.TextFileNamesRegex) {
		return nil, false
	}
	return o.TextFileNamesRegex, true
}

// HasTextFileNamesRegex returns a boolean if a field has been set.
func (o *Attachment) HasTextFileNamesRegex() bool {
	if o != nil && !IsNil(o.TextFileNamesRegex) {
		return true
	}

	return false
}

// SetTextFileNamesRegex gets a reference to the given string and assigns it to the TextFileNamesRegex field.
func (o *Attachment) SetTextFileNamesRegex(v string) {
	o.TextFileNamesRegex = &v
}

// GetExcludeFileNamesRegex returns the ExcludeFileNamesRegex field value if set, zero value otherwise.
func (o *Attachment) GetExcludeFileNamesRegex() string {
	if o == nil || IsNil(o.ExcludeFileNamesRegex) {
		var ret string
		return ret
	}
	return *o.ExcludeFileNamesRegex
}

// GetExcludeFileNamesRegexOk returns a tuple with the ExcludeFileNamesRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetExcludeFileNamesRegexOk() (*string, bool) {
	if o == nil || IsNil(o.ExcludeFileNamesRegex) {
		return nil, false
	}
	return o.ExcludeFileNamesRegex, true
}

// HasExcludeFileNamesRegex returns a boolean if a field has been set.
func (o *Attachment) HasExcludeFileNamesRegex() bool {
	if o != nil && !IsNil(o.ExcludeFileNamesRegex) {
		return true
	}

	return false
}

// SetExcludeFileNamesRegex gets a reference to the given string and assigns it to the ExcludeFileNamesRegex field.
func (o *Attachment) SetExcludeFileNamesRegex(v string) {
	o.ExcludeFileNamesRegex = &v
}

// GetFileEncodings returns the FileEncodings field value if set, zero value otherwise.
func (o *Attachment) GetFileEncodings() map[string]string {
	if o == nil || IsNil(o.FileEncodings) {
		var ret map[string]string
		return ret
	}
	return *o.FileEncodings
}

// GetFileEncodingsOk returns a tuple with the FileEncodings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileEncodingsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.FileEncodings) {
		return nil, false
	}
	return o.FileEncodings, true
}

// HasFileEncodings returns a boolean if a field has been set.
func (o *Attachment) HasFileEncodings() bool {
	if o != nil && !IsNil(o.FileEncodings) {
		return true
	}

	return false
}

// SetFileEncodings gets a reference to the given map[string]string and assigns it to the FileEncodings field.
func (o *Attachment) SetFileEncodings(v map[string]string) {
	o.FileEncodings = &v
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *Attachment) GetChecksum() string {
	if o == nil || IsNil(o.Checksum) {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetChecksumOk() (*string, bool) {
	if o == nil || IsNil(o.Checksum) {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *Attachment) HasChecksum() bool {
	if o != nil && !IsNil(o.Checksum) {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *Attachment) SetChecksum(v string) {
	o.Checksum = &v
}

func (o Attachment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !IsNil(o.ExportFilename) {
		toSerialize["exportFilename"] = o.ExportFilename
	}
	if !IsNil(o.FileUri) {
		toSerialize["fileUri"] = o.FileUri
	}
	if !IsNil(o.Placeholders) {
		toSerialize["placeholders"] = o.Placeholders
	}
	if !IsNil(o.TextFileNamesRegex) {
		toSerialize["textFileNamesRegex"] = o.TextFileNamesRegex
	}
	if !IsNil(o.ExcludeFileNamesRegex) {
		toSerialize["excludeFileNamesRegex"] = o.ExcludeFileNamesRegex
	}
	if !IsNil(o.FileEncodings) {
		toSerialize["fileEncodings"] = o.FileEncodings
	}
	if !IsNil(o.Checksum) {
		toSerialize["checksum"] = o.Checksum
	}
	return toSerialize, nil
}

type NullableAttachment struct {
	value *Attachment
	isSet bool
}

func (v NullableAttachment) Get() *Attachment {
	return v.value
}

func (v *NullableAttachment) Set(val *Attachment) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachment(val *Attachment) *NullableAttachment {
	return &NullableAttachment{value: val, isSet: true}
}

func (v NullableAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
