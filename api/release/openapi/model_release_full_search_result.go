/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseFullSearchResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseFullSearchResult{}

// ReleaseFullSearchResult struct for ReleaseFullSearchResult
type ReleaseFullSearchResult struct {
	Live     *ReleaseSearchResult `json:"live,omitempty"`
	Archived *ReleaseSearchResult `json:"archived,omitempty"`
}

// NewReleaseFullSearchResult instantiates a new ReleaseFullSearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseFullSearchResult() *ReleaseFullSearchResult {
	this := ReleaseFullSearchResult{}
	return &this
}

// NewReleaseFullSearchResultWithDefaults instantiates a new ReleaseFullSearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseFullSearchResultWithDefaults() *ReleaseFullSearchResult {
	this := ReleaseFullSearchResult{}
	return &this
}

// GetLive returns the Live field value if set, zero value otherwise.
func (o *ReleaseFullSearchResult) GetLive() ReleaseSearchResult {
	if o == nil || IsNil(o.Live) {
		var ret ReleaseSearchResult
		return ret
	}
	return *o.Live
}

// GetLiveOk returns a tuple with the Live field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseFullSearchResult) GetLiveOk() (*ReleaseSearchResult, bool) {
	if o == nil || IsNil(o.Live) {
		return nil, false
	}
	return o.Live, true
}

// HasLive returns a boolean if a field has been set.
func (o *ReleaseFullSearchResult) HasLive() bool {
	if o != nil && !IsNil(o.Live) {
		return true
	}

	return false
}

// SetLive gets a reference to the given ReleaseSearchResult and assigns it to the Live field.
func (o *ReleaseFullSearchResult) SetLive(v ReleaseSearchResult) {
	o.Live = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *ReleaseFullSearchResult) GetArchived() ReleaseSearchResult {
	if o == nil || IsNil(o.Archived) {
		var ret ReleaseSearchResult
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseFullSearchResult) GetArchivedOk() (*ReleaseSearchResult, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *ReleaseFullSearchResult) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given ReleaseSearchResult and assigns it to the Archived field.
func (o *ReleaseFullSearchResult) SetArchived(v ReleaseSearchResult) {
	o.Archived = &v
}

func (o ReleaseFullSearchResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseFullSearchResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Live) {
		toSerialize["live"] = o.Live
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	return toSerialize, nil
}

type NullableReleaseFullSearchResult struct {
	value *ReleaseFullSearchResult
	isSet bool
}

func (v NullableReleaseFullSearchResult) Get() *ReleaseFullSearchResult {
	return v.value
}

func (v *NullableReleaseFullSearchResult) Set(val *ReleaseFullSearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseFullSearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseFullSearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseFullSearchResult(val *ReleaseFullSearchResult) *NullableReleaseFullSearchResult {
	return &NullableReleaseFullSearchResult{value: val, isSet: true}
}

func (v NullableReleaseFullSearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseFullSearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
