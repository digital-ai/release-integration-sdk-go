/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// PhaseApiService PhaseApi service
type PhaseApiService service

type ApiAddPhaseRequest struct {
	ctx context.Context
	ApiService *PhaseApiService
	releaseId string
	position *int32
	phase *Phase
}

func (r ApiAddPhaseRequest) Position(position int32) ApiAddPhaseRequest {
	r.position = &position
	return r
}

func (r ApiAddPhaseRequest) Phase(phase Phase) ApiAddPhaseRequest {
	r.phase = &phase
	return r
}

func (r ApiAddPhaseRequest) Execute() (*Phase, *http.Response, error) {
	return r.ApiService.AddPhaseExecute(r)
}

/*
AddPhase Method for AddPhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param releaseId
 @return ApiAddPhaseRequest
*/
func (a *PhaseApiService) AddPhase(ctx context.Context, releaseId string) ApiAddPhaseRequest {
	return ApiAddPhaseRequest{
		ApiService: a,
		ctx: ctx,
		releaseId: releaseId,
	}
}

// Execute executes the request
//  @return Phase
func (a *PhaseApiService) AddPhaseExecute(r ApiAddPhaseRequest) (*Phase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Phase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseApiService.AddPhase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/phases/{releaseId}/phase"
	localVarPath = strings.Replace(localVarPath, "{"+"releaseId"+"}", url.PathEscape(parameterValueToString(r.releaseId, "releaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.position != nil {
		parameterAddToQuery(localVarQueryParams, "position", r.position, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.phase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddTaskToContainerRequest struct {
	ctx context.Context
	ApiService *PhaseApiService
	containerId string
	position *int32
	task *Task
}

func (r ApiAddTaskToContainerRequest) Position(position int32) ApiAddTaskToContainerRequest {
	r.position = &position
	return r
}

func (r ApiAddTaskToContainerRequest) Task(task Task) ApiAddTaskToContainerRequest {
	r.task = &task
	return r
}

func (r ApiAddTaskToContainerRequest) Execute() (*Task, *http.Response, error) {
	return r.ApiService.AddTaskToContainerExecute(r)
}

/*
AddTaskToContainer Method for AddTaskToContainer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerId
 @return ApiAddTaskToContainerRequest
*/
func (a *PhaseApiService) AddTaskToContainer(ctx context.Context, containerId string) ApiAddTaskToContainerRequest {
	return ApiAddTaskToContainerRequest{
		ApiService: a,
		ctx: ctx,
		containerId: containerId,
	}
}

// Execute executes the request
//  @return Task
func (a *PhaseApiService) AddTaskToContainerExecute(r ApiAddTaskToContainerRequest) (*Task, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Task
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseApiService.AddTaskToContainer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/phases/{containerId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"containerId"+"}", url.PathEscape(parameterValueToString(r.containerId, "containerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.position != nil {
		parameterAddToQuery(localVarQueryParams, "position", r.position, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.task
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCopyPhaseRequest struct {
	ctx context.Context
	ApiService *PhaseApiService
	phaseId string
	targetPosition *int32
}

func (r ApiCopyPhaseRequest) TargetPosition(targetPosition int32) ApiCopyPhaseRequest {
	r.targetPosition = &targetPosition
	return r
}

func (r ApiCopyPhaseRequest) Execute() (*Phase, *http.Response, error) {
	return r.ApiService.CopyPhaseExecute(r)
}

/*
CopyPhase Method for CopyPhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param phaseId
 @return ApiCopyPhaseRequest
*/
func (a *PhaseApiService) CopyPhase(ctx context.Context, phaseId string) ApiCopyPhaseRequest {
	return ApiCopyPhaseRequest{
		ApiService: a,
		ctx: ctx,
		phaseId: phaseId,
	}
}

// Execute executes the request
//  @return Phase
func (a *PhaseApiService) CopyPhaseExecute(r ApiCopyPhaseRequest) (*Phase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Phase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseApiService.CopyPhase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/phases/{phaseId}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"phaseId"+"}", url.PathEscape(parameterValueToString(r.phaseId, "phaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.targetPosition != nil {
		parameterAddToQuery(localVarQueryParams, "targetPosition", r.targetPosition, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePhaseRequest struct {
	ctx context.Context
	ApiService *PhaseApiService
	phaseId string
}

func (r ApiDeletePhaseRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePhaseExecute(r)
}

/*
DeletePhase Method for DeletePhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param phaseId
 @return ApiDeletePhaseRequest
*/
func (a *PhaseApiService) DeletePhase(ctx context.Context, phaseId string) ApiDeletePhaseRequest {
	return ApiDeletePhaseRequest{
		ApiService: a,
		ctx: ctx,
		phaseId: phaseId,
	}
}

// Execute executes the request
func (a *PhaseApiService) DeletePhaseExecute(r ApiDeletePhaseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseApiService.DeletePhase")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/phases/{phaseId}"
	localVarPath = strings.Replace(localVarPath, "{"+"phaseId"+"}", url.PathEscape(parameterValueToString(r.phaseId, "phaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPhaseRequest struct {
	ctx context.Context
	ApiService *PhaseApiService
	phaseId string
}

func (r ApiGetPhaseRequest) Execute() (*Phase, *http.Response, error) {
	return r.ApiService.GetPhaseExecute(r)
}

/*
GetPhase Method for GetPhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param phaseId
 @return ApiGetPhaseRequest
*/
func (a *PhaseApiService) GetPhase(ctx context.Context, phaseId string) ApiGetPhaseRequest {
	return ApiGetPhaseRequest{
		ApiService: a,
		ctx: ctx,
		phaseId: phaseId,
	}
}

// Execute executes the request
//  @return Phase
func (a *PhaseApiService) GetPhaseExecute(r ApiGetPhaseRequest) (*Phase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Phase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseApiService.GetPhase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/phases/{phaseId}"
	localVarPath = strings.Replace(localVarPath, "{"+"phaseId"+"}", url.PathEscape(parameterValueToString(r.phaseId, "phaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchPhasesRequest struct {
	ctx context.Context
	ApiService *PhaseApiService
	phaseTitle *string
	phaseVersion *PhaseVersion
	releaseId *string
}

func (r ApiSearchPhasesRequest) PhaseTitle(phaseTitle string) ApiSearchPhasesRequest {
	r.phaseTitle = &phaseTitle
	return r
}

func (r ApiSearchPhasesRequest) PhaseVersion(phaseVersion PhaseVersion) ApiSearchPhasesRequest {
	r.phaseVersion = &phaseVersion
	return r
}

func (r ApiSearchPhasesRequest) ReleaseId(releaseId string) ApiSearchPhasesRequest {
	r.releaseId = &releaseId
	return r
}

func (r ApiSearchPhasesRequest) Execute() ([]Phase, *http.Response, error) {
	return r.ApiService.SearchPhasesExecute(r)
}

/*
SearchPhases Method for SearchPhases

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchPhasesRequest
*/
func (a *PhaseApiService) SearchPhases(ctx context.Context) ApiSearchPhasesRequest {
	return ApiSearchPhasesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Phase
func (a *PhaseApiService) SearchPhasesExecute(r ApiSearchPhasesRequest) ([]Phase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Phase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseApiService.SearchPhases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/phases/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.phaseTitle != nil {
		parameterAddToQuery(localVarQueryParams, "phaseTitle", r.phaseTitle, "")
	}
	if r.phaseVersion != nil {
		parameterAddToQuery(localVarQueryParams, "phaseVersion", r.phaseVersion, "")
	}
	if r.releaseId != nil {
		parameterAddToQuery(localVarQueryParams, "releaseId", r.releaseId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchPhasesByTitleRequest struct {
	ctx context.Context
	ApiService *PhaseApiService
	phaseTitle *string
	releaseId *string
}

func (r ApiSearchPhasesByTitleRequest) PhaseTitle(phaseTitle string) ApiSearchPhasesByTitleRequest {
	r.phaseTitle = &phaseTitle
	return r
}

func (r ApiSearchPhasesByTitleRequest) ReleaseId(releaseId string) ApiSearchPhasesByTitleRequest {
	r.releaseId = &releaseId
	return r
}

func (r ApiSearchPhasesByTitleRequest) Execute() ([]Phase, *http.Response, error) {
	return r.ApiService.SearchPhasesByTitleExecute(r)
}

/*
SearchPhasesByTitle Method for SearchPhasesByTitle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchPhasesByTitleRequest
*/
func (a *PhaseApiService) SearchPhasesByTitle(ctx context.Context) ApiSearchPhasesByTitleRequest {
	return ApiSearchPhasesByTitleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Phase
func (a *PhaseApiService) SearchPhasesByTitleExecute(r ApiSearchPhasesByTitleRequest) ([]Phase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Phase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseApiService.SearchPhasesByTitle")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/phases/byTitle"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.phaseTitle != nil {
		parameterAddToQuery(localVarQueryParams, "phaseTitle", r.phaseTitle, "")
	}
	if r.releaseId != nil {
		parameterAddToQuery(localVarQueryParams, "releaseId", r.releaseId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePhaseRequest struct {
	ctx context.Context
	ApiService *PhaseApiService
	phaseId string
	phase *Phase
}

func (r ApiUpdatePhaseRequest) Phase(phase Phase) ApiUpdatePhaseRequest {
	r.phase = &phase
	return r
}

func (r ApiUpdatePhaseRequest) Execute() (*Phase, *http.Response, error) {
	return r.ApiService.UpdatePhaseExecute(r)
}

/*
UpdatePhase Method for UpdatePhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param phaseId
 @return ApiUpdatePhaseRequest
*/
func (a *PhaseApiService) UpdatePhase(ctx context.Context, phaseId string) ApiUpdatePhaseRequest {
	return ApiUpdatePhaseRequest{
		ApiService: a,
		ctx: ctx,
		phaseId: phaseId,
	}
}

// Execute executes the request
//  @return Phase
func (a *PhaseApiService) UpdatePhaseExecute(r ApiUpdatePhaseRequest) (*Phase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Phase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseApiService.UpdatePhase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/phases/{phaseId}"
	localVarPath = strings.Replace(localVarPath, "{"+"phaseId"+"}", url.PathEscape(parameterValueToString(r.phaseId, "phaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.phase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
