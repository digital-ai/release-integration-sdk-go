/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FacetFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FacetFilters{}

// FacetFilters struct for FacetFilters
type FacetFilters struct {
	ParentId *string `json:"parentId,omitempty"`
	TargetId *string `json:"targetId,omitempty"`
	Types []interface{} `json:"types,omitempty"`
}

// NewFacetFilters instantiates a new FacetFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFacetFilters() *FacetFilters {
	this := FacetFilters{}
	return &this
}

// NewFacetFiltersWithDefaults instantiates a new FacetFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFacetFiltersWithDefaults() *FacetFilters {
	this := FacetFilters{}
	return &this
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *FacetFilters) GetParentId() string {
	if o == nil || isNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacetFilters) GetParentIdOk() (*string, bool) {
	if o == nil || isNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *FacetFilters) HasParentId() bool {
	if o != nil && !isNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *FacetFilters) SetParentId(v string) {
	o.ParentId = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *FacetFilters) GetTargetId() string {
	if o == nil || isNil(o.TargetId) {
		var ret string
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacetFilters) GetTargetIdOk() (*string, bool) {
	if o == nil || isNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *FacetFilters) HasTargetId() bool {
	if o != nil && !isNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given string and assigns it to the TargetId field.
func (o *FacetFilters) SetTargetId(v string) {
	o.TargetId = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *FacetFilters) GetTypes() []interface{} {
	if o == nil || isNil(o.Types) {
		var ret []interface{}
		return ret
	}
	return o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacetFilters) GetTypesOk() ([]interface{}, bool) {
	if o == nil || isNil(o.Types) {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *FacetFilters) HasTypes() bool {
	if o != nil && !isNil(o.Types) {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []interface{} and assigns it to the Types field.
func (o *FacetFilters) SetTypes(v []interface{}) {
	o.Types = v
}

func (o FacetFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FacetFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !isNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	if !isNil(o.Types) {
		toSerialize["types"] = o.Types
	}
	return toSerialize, nil
}

type NullableFacetFilters struct {
	value *FacetFilters
	isSet bool
}

func (v NullableFacetFilters) Get() *FacetFilters {
	return v.value
}

func (v *NullableFacetFilters) Set(val *FacetFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableFacetFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableFacetFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacetFilters(val *FacetFilters) *NullableFacetFilters {
	return &NullableFacetFilters{value: val, isSet: true}
}

func (v NullableFacetFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacetFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


