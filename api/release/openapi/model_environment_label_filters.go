/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvironmentLabelFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentLabelFilters{}

// EnvironmentLabelFilters struct for EnvironmentLabelFilters
type EnvironmentLabelFilters struct {
	Title *string `json:"title,omitempty"`
}

// NewEnvironmentLabelFilters instantiates a new EnvironmentLabelFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentLabelFilters() *EnvironmentLabelFilters {
	this := EnvironmentLabelFilters{}
	return &this
}

// NewEnvironmentLabelFiltersWithDefaults instantiates a new EnvironmentLabelFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentLabelFiltersWithDefaults() *EnvironmentLabelFilters {
	this := EnvironmentLabelFilters{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *EnvironmentLabelFilters) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLabelFilters) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *EnvironmentLabelFilters) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *EnvironmentLabelFilters) SetTitle(v string) {
	o.Title = &v
}

func (o EnvironmentLabelFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentLabelFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableEnvironmentLabelFilters struct {
	value *EnvironmentLabelFilters
	isSet bool
}

func (v NullableEnvironmentLabelFilters) Get() *EnvironmentLabelFilters {
	return v.value
}

func (v *NullableEnvironmentLabelFilters) Set(val *EnvironmentLabelFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentLabelFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentLabelFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentLabelFilters(val *EnvironmentLabelFilters) *NullableEnvironmentLabelFilters {
	return &NullableEnvironmentLabelFilters{value: val, isSet: true}
}

func (v NullableEnvironmentLabelFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentLabelFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


