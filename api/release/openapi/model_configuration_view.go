/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigurationView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationView{}

// ConfigurationView struct for ConfigurationView
type ConfigurationView struct {
	Type       *string                           `json:"type,omitempty"`
	Title      *string                           `json:"title,omitempty"`
	Properties map[string]map[string]interface{} `json:"properties,omitempty"`
	Id         *string                           `json:"id,omitempty"`
}

// NewConfigurationView instantiates a new ConfigurationView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationView() *ConfigurationView {
	this := ConfigurationView{}
	return &this
}

// NewConfigurationViewWithDefaults instantiates a new ConfigurationView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationViewWithDefaults() *ConfigurationView {
	this := ConfigurationView{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConfigurationView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConfigurationView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConfigurationView) SetType(v string) {
	o.Type = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ConfigurationView) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationView) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ConfigurationView) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ConfigurationView) SetTitle(v string) {
	o.Title = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ConfigurationView) GetProperties() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationView) GetPropertiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ConfigurationView) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]map[string]interface{} and assigns it to the Properties field.
func (o *ConfigurationView) SetProperties(v map[string]map[string]interface{}) {
	o.Properties = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigurationView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigurationView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConfigurationView) SetId(v string) {
	o.Id = &v
}

func (o ConfigurationView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableConfigurationView struct {
	value *ConfigurationView
	isSet bool
}

func (v NullableConfigurationView) Get() *ConfigurationView {
	return v.value
}

func (v *NullableConfigurationView) Set(val *ConfigurationView) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationView) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationView(val *ConfigurationView) *NullableConfigurationView {
	return &NullableConfigurationView{value: val, isSet: true}
}

func (v NullableConfigurationView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
