/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PhaseTimeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhaseTimeline{}

// PhaseTimeline struct for PhaseTimeline
type PhaseTimeline struct {
	Id                 *string    `json:"id,omitempty"`
	Title              *string    `json:"title,omitempty"`
	ScheduledStartDate *time.Time `json:"scheduledStartDate,omitempty"`
	DueDate            *time.Time `json:"dueDate,omitempty"`
	StartDate          *time.Time `json:"startDate,omitempty"`
	EndDate            *time.Time `json:"endDate,omitempty"`
	PlannedStartDate   *time.Time `json:"plannedStartDate,omitempty"`
	PlannedEndDate     *time.Time `json:"plannedEndDate,omitempty"`
	Color              *string    `json:"color,omitempty"`
	CurrentTask        *string    `json:"currentTask,omitempty"`
}

// NewPhaseTimeline instantiates a new PhaseTimeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhaseTimeline() *PhaseTimeline {
	this := PhaseTimeline{}
	return &this
}

// NewPhaseTimelineWithDefaults instantiates a new PhaseTimeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhaseTimelineWithDefaults() *PhaseTimeline {
	this := PhaseTimeline{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PhaseTimeline) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhaseTimeline) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PhaseTimeline) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PhaseTimeline) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PhaseTimeline) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhaseTimeline) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PhaseTimeline) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PhaseTimeline) SetTitle(v string) {
	o.Title = &v
}

// GetScheduledStartDate returns the ScheduledStartDate field value if set, zero value otherwise.
func (o *PhaseTimeline) GetScheduledStartDate() time.Time {
	if o == nil || IsNil(o.ScheduledStartDate) {
		var ret time.Time
		return ret
	}
	return *o.ScheduledStartDate
}

// GetScheduledStartDateOk returns a tuple with the ScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhaseTimeline) GetScheduledStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ScheduledStartDate) {
		return nil, false
	}
	return o.ScheduledStartDate, true
}

// HasScheduledStartDate returns a boolean if a field has been set.
func (o *PhaseTimeline) HasScheduledStartDate() bool {
	if o != nil && !IsNil(o.ScheduledStartDate) {
		return true
	}

	return false
}

// SetScheduledStartDate gets a reference to the given time.Time and assigns it to the ScheduledStartDate field.
func (o *PhaseTimeline) SetScheduledStartDate(v time.Time) {
	o.ScheduledStartDate = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *PhaseTimeline) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate) {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhaseTimeline) GetDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *PhaseTimeline) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *PhaseTimeline) SetDueDate(v time.Time) {
	o.DueDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *PhaseTimeline) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhaseTimeline) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *PhaseTimeline) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *PhaseTimeline) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *PhaseTimeline) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhaseTimeline) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *PhaseTimeline) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *PhaseTimeline) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetPlannedStartDate returns the PlannedStartDate field value if set, zero value otherwise.
func (o *PhaseTimeline) GetPlannedStartDate() time.Time {
	if o == nil || IsNil(o.PlannedStartDate) {
		var ret time.Time
		return ret
	}
	return *o.PlannedStartDate
}

// GetPlannedStartDateOk returns a tuple with the PlannedStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhaseTimeline) GetPlannedStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PlannedStartDate) {
		return nil, false
	}
	return o.PlannedStartDate, true
}

// HasPlannedStartDate returns a boolean if a field has been set.
func (o *PhaseTimeline) HasPlannedStartDate() bool {
	if o != nil && !IsNil(o.PlannedStartDate) {
		return true
	}

	return false
}

// SetPlannedStartDate gets a reference to the given time.Time and assigns it to the PlannedStartDate field.
func (o *PhaseTimeline) SetPlannedStartDate(v time.Time) {
	o.PlannedStartDate = &v
}

// GetPlannedEndDate returns the PlannedEndDate field value if set, zero value otherwise.
func (o *PhaseTimeline) GetPlannedEndDate() time.Time {
	if o == nil || IsNil(o.PlannedEndDate) {
		var ret time.Time
		return ret
	}
	return *o.PlannedEndDate
}

// GetPlannedEndDateOk returns a tuple with the PlannedEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhaseTimeline) GetPlannedEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PlannedEndDate) {
		return nil, false
	}
	return o.PlannedEndDate, true
}

// HasPlannedEndDate returns a boolean if a field has been set.
func (o *PhaseTimeline) HasPlannedEndDate() bool {
	if o != nil && !IsNil(o.PlannedEndDate) {
		return true
	}

	return false
}

// SetPlannedEndDate gets a reference to the given time.Time and assigns it to the PlannedEndDate field.
func (o *PhaseTimeline) SetPlannedEndDate(v time.Time) {
	o.PlannedEndDate = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *PhaseTimeline) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhaseTimeline) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *PhaseTimeline) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *PhaseTimeline) SetColor(v string) {
	o.Color = &v
}

// GetCurrentTask returns the CurrentTask field value if set, zero value otherwise.
func (o *PhaseTimeline) GetCurrentTask() string {
	if o == nil || IsNil(o.CurrentTask) {
		var ret string
		return ret
	}
	return *o.CurrentTask
}

// GetCurrentTaskOk returns a tuple with the CurrentTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhaseTimeline) GetCurrentTaskOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentTask) {
		return nil, false
	}
	return o.CurrentTask, true
}

// HasCurrentTask returns a boolean if a field has been set.
func (o *PhaseTimeline) HasCurrentTask() bool {
	if o != nil && !IsNil(o.CurrentTask) {
		return true
	}

	return false
}

// SetCurrentTask gets a reference to the given string and assigns it to the CurrentTask field.
func (o *PhaseTimeline) SetCurrentTask(v string) {
	o.CurrentTask = &v
}

func (o PhaseTimeline) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhaseTimeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.ScheduledStartDate) {
		toSerialize["scheduledStartDate"] = o.ScheduledStartDate
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.PlannedStartDate) {
		toSerialize["plannedStartDate"] = o.PlannedStartDate
	}
	if !IsNil(o.PlannedEndDate) {
		toSerialize["plannedEndDate"] = o.PlannedEndDate
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.CurrentTask) {
		toSerialize["currentTask"] = o.CurrentTask
	}
	return toSerialize, nil
}

type NullablePhaseTimeline struct {
	value *PhaseTimeline
	isSet bool
}

func (v NullablePhaseTimeline) Get() *PhaseTimeline {
	return v.value
}

func (v *NullablePhaseTimeline) Set(val *PhaseTimeline) {
	v.value = val
	v.isSet = true
}

func (v NullablePhaseTimeline) IsSet() bool {
	return v.isSet
}

func (v *NullablePhaseTimeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhaseTimeline(val *PhaseTimeline) *NullablePhaseTimeline {
	return &NullablePhaseTimeline{value: val, isSet: true}
}

func (v NullablePhaseTimeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhaseTimeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
