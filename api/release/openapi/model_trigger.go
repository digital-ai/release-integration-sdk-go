/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Trigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trigger{}

// Trigger struct for Trigger
type Trigger struct {
	Script *string `json:"script,omitempty"`
	AbortScript *string `json:"abortScript,omitempty"`
	CiUid *int32 `json:"ciUid,omitempty"`
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	TriggerState *string `json:"triggerState,omitempty"`
	FolderId *string `json:"folderId,omitempty"`
	AllowParallelExecution *bool `json:"allowParallelExecution,omitempty"`
	LastRunDate *string `json:"lastRunDate,omitempty"`
	LastRunStatus *TriggerExecutionStatus `json:"lastRunStatus,omitempty"`
	InternalProperties []string `json:"internalProperties,omitempty"`
	ContainerId *string `json:"containerId,omitempty"`
}

// NewTrigger instantiates a new Trigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrigger() *Trigger {
	this := Trigger{}
	return &this
}

// NewTriggerWithDefaults instantiates a new Trigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerWithDefaults() *Trigger {
	this := Trigger{}
	return &this
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *Trigger) GetScript() string {
	if o == nil || isNil(o.Script) {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetScriptOk() (*string, bool) {
	if o == nil || isNil(o.Script) {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *Trigger) HasScript() bool {
	if o != nil && !isNil(o.Script) {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *Trigger) SetScript(v string) {
	o.Script = &v
}

// GetAbortScript returns the AbortScript field value if set, zero value otherwise.
func (o *Trigger) GetAbortScript() string {
	if o == nil || isNil(o.AbortScript) {
		var ret string
		return ret
	}
	return *o.AbortScript
}

// GetAbortScriptOk returns a tuple with the AbortScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetAbortScriptOk() (*string, bool) {
	if o == nil || isNil(o.AbortScript) {
		return nil, false
	}
	return o.AbortScript, true
}

// HasAbortScript returns a boolean if a field has been set.
func (o *Trigger) HasAbortScript() bool {
	if o != nil && !isNil(o.AbortScript) {
		return true
	}

	return false
}

// SetAbortScript gets a reference to the given string and assigns it to the AbortScript field.
func (o *Trigger) SetAbortScript(v string) {
	o.AbortScript = &v
}

// GetCiUid returns the CiUid field value if set, zero value otherwise.
func (o *Trigger) GetCiUid() int32 {
	if o == nil || isNil(o.CiUid) {
		var ret int32
		return ret
	}
	return *o.CiUid
}

// GetCiUidOk returns a tuple with the CiUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetCiUidOk() (*int32, bool) {
	if o == nil || isNil(o.CiUid) {
		return nil, false
	}
	return o.CiUid, true
}

// HasCiUid returns a boolean if a field has been set.
func (o *Trigger) HasCiUid() bool {
	if o != nil && !isNil(o.CiUid) {
		return true
	}

	return false
}

// SetCiUid gets a reference to the given int32 and assigns it to the CiUid field.
func (o *Trigger) SetCiUid(v int32) {
	o.CiUid = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Trigger) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Trigger) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Trigger) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Trigger) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Trigger) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Trigger) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Trigger) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Trigger) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Trigger) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTriggerState returns the TriggerState field value if set, zero value otherwise.
func (o *Trigger) GetTriggerState() string {
	if o == nil || isNil(o.TriggerState) {
		var ret string
		return ret
	}
	return *o.TriggerState
}

// GetTriggerStateOk returns a tuple with the TriggerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetTriggerStateOk() (*string, bool) {
	if o == nil || isNil(o.TriggerState) {
		return nil, false
	}
	return o.TriggerState, true
}

// HasTriggerState returns a boolean if a field has been set.
func (o *Trigger) HasTriggerState() bool {
	if o != nil && !isNil(o.TriggerState) {
		return true
	}

	return false
}

// SetTriggerState gets a reference to the given string and assigns it to the TriggerState field.
func (o *Trigger) SetTriggerState(v string) {
	o.TriggerState = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *Trigger) GetFolderId() string {
	if o == nil || isNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetFolderIdOk() (*string, bool) {
	if o == nil || isNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *Trigger) HasFolderId() bool {
	if o != nil && !isNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *Trigger) SetFolderId(v string) {
	o.FolderId = &v
}

// GetAllowParallelExecution returns the AllowParallelExecution field value if set, zero value otherwise.
func (o *Trigger) GetAllowParallelExecution() bool {
	if o == nil || isNil(o.AllowParallelExecution) {
		var ret bool
		return ret
	}
	return *o.AllowParallelExecution
}

// GetAllowParallelExecutionOk returns a tuple with the AllowParallelExecution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetAllowParallelExecutionOk() (*bool, bool) {
	if o == nil || isNil(o.AllowParallelExecution) {
		return nil, false
	}
	return o.AllowParallelExecution, true
}

// HasAllowParallelExecution returns a boolean if a field has been set.
func (o *Trigger) HasAllowParallelExecution() bool {
	if o != nil && !isNil(o.AllowParallelExecution) {
		return true
	}

	return false
}

// SetAllowParallelExecution gets a reference to the given bool and assigns it to the AllowParallelExecution field.
func (o *Trigger) SetAllowParallelExecution(v bool) {
	o.AllowParallelExecution = &v
}

// GetLastRunDate returns the LastRunDate field value if set, zero value otherwise.
func (o *Trigger) GetLastRunDate() string {
	if o == nil || isNil(o.LastRunDate) {
		var ret string
		return ret
	}
	return *o.LastRunDate
}

// GetLastRunDateOk returns a tuple with the LastRunDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetLastRunDateOk() (*string, bool) {
	if o == nil || isNil(o.LastRunDate) {
		return nil, false
	}
	return o.LastRunDate, true
}

// HasLastRunDate returns a boolean if a field has been set.
func (o *Trigger) HasLastRunDate() bool {
	if o != nil && !isNil(o.LastRunDate) {
		return true
	}

	return false
}

// SetLastRunDate gets a reference to the given string and assigns it to the LastRunDate field.
func (o *Trigger) SetLastRunDate(v string) {
	o.LastRunDate = &v
}

// GetLastRunStatus returns the LastRunStatus field value if set, zero value otherwise.
func (o *Trigger) GetLastRunStatus() TriggerExecutionStatus {
	if o == nil || isNil(o.LastRunStatus) {
		var ret TriggerExecutionStatus
		return ret
	}
	return *o.LastRunStatus
}

// GetLastRunStatusOk returns a tuple with the LastRunStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetLastRunStatusOk() (*TriggerExecutionStatus, bool) {
	if o == nil || isNil(o.LastRunStatus) {
		return nil, false
	}
	return o.LastRunStatus, true
}

// HasLastRunStatus returns a boolean if a field has been set.
func (o *Trigger) HasLastRunStatus() bool {
	if o != nil && !isNil(o.LastRunStatus) {
		return true
	}

	return false
}

// SetLastRunStatus gets a reference to the given TriggerExecutionStatus and assigns it to the LastRunStatus field.
func (o *Trigger) SetLastRunStatus(v TriggerExecutionStatus) {
	o.LastRunStatus = &v
}

// GetInternalProperties returns the InternalProperties field value if set, zero value otherwise.
func (o *Trigger) GetInternalProperties() []string {
	if o == nil || isNil(o.InternalProperties) {
		var ret []string
		return ret
	}
	return o.InternalProperties
}

// GetInternalPropertiesOk returns a tuple with the InternalProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetInternalPropertiesOk() ([]string, bool) {
	if o == nil || isNil(o.InternalProperties) {
		return nil, false
	}
	return o.InternalProperties, true
}

// HasInternalProperties returns a boolean if a field has been set.
func (o *Trigger) HasInternalProperties() bool {
	if o != nil && !isNil(o.InternalProperties) {
		return true
	}

	return false
}

// SetInternalProperties gets a reference to the given []string and assigns it to the InternalProperties field.
func (o *Trigger) SetInternalProperties(v []string) {
	o.InternalProperties = v
}

// GetContainerId returns the ContainerId field value if set, zero value otherwise.
func (o *Trigger) GetContainerId() string {
	if o == nil || isNil(o.ContainerId) {
		var ret string
		return ret
	}
	return *o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetContainerIdOk() (*string, bool) {
	if o == nil || isNil(o.ContainerId) {
		return nil, false
	}
	return o.ContainerId, true
}

// HasContainerId returns a boolean if a field has been set.
func (o *Trigger) HasContainerId() bool {
	if o != nil && !isNil(o.ContainerId) {
		return true
	}

	return false
}

// SetContainerId gets a reference to the given string and assigns it to the ContainerId field.
func (o *Trigger) SetContainerId(v string) {
	o.ContainerId = &v
}

func (o Trigger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Script) {
		toSerialize["script"] = o.Script
	}
	if !isNil(o.AbortScript) {
		toSerialize["abortScript"] = o.AbortScript
	}
	if !isNil(o.CiUid) {
		toSerialize["ciUid"] = o.CiUid
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.TriggerState) {
		toSerialize["triggerState"] = o.TriggerState
	}
	if !isNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !isNil(o.AllowParallelExecution) {
		toSerialize["allowParallelExecution"] = o.AllowParallelExecution
	}
	if !isNil(o.LastRunDate) {
		toSerialize["lastRunDate"] = o.LastRunDate
	}
	if !isNil(o.LastRunStatus) {
		toSerialize["lastRunStatus"] = o.LastRunStatus
	}
	if !isNil(o.InternalProperties) {
		toSerialize["internalProperties"] = o.InternalProperties
	}
	if !isNil(o.ContainerId) {
		toSerialize["containerId"] = o.ContainerId
	}
	return toSerialize, nil
}

type NullableTrigger struct {
	value *Trigger
	isSet bool
}

func (v NullableTrigger) Get() *Trigger {
	return v.value
}

func (v *NullableTrigger) Set(val *Trigger) {
	v.value = val
	v.isSet = true
}

func (v NullableTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrigger(val *Trigger) *NullableTrigger {
	return &NullableTrigger{value: val, isSet: true}
}

func (v NullableTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


