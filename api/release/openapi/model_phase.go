/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Phase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Phase{}

// Phase struct for Phase
type Phase struct {
	Id                      *string                `json:"id,omitempty"`
	Type                    *string                `json:"type,omitempty"`
	Locked                  *bool                  `json:"locked,omitempty"`
	Title                   *string                `json:"title,omitempty"`
	Description             *string                `json:"description,omitempty"`
	Owner                   *string                `json:"owner,omitempty"`
	ScheduledStartDate      *time.Time             `json:"scheduledStartDate,omitempty"`
	DueDate                 *time.Time             `json:"dueDate,omitempty"`
	StartDate               *time.Time             `json:"startDate,omitempty"`
	EndDate                 *time.Time             `json:"endDate,omitempty"`
	PlannedDuration         *int32                 `json:"plannedDuration,omitempty"`
	FlagStatus              *FlagStatus            `json:"flagStatus,omitempty"`
	FlagComment             *string                `json:"flagComment,omitempty"`
	OverdueNotified         *bool                  `json:"overdueNotified,omitempty"`
	Flagged                 *bool                  `json:"flagged,omitempty"`
	StartOrScheduledDate    *time.Time             `json:"startOrScheduledDate,omitempty"`
	EndOrDueDate            *time.Time             `json:"endOrDueDate,omitempty"`
	Overdue                 *bool                  `json:"overdue,omitempty"`
	OrCalculateDueDate      NullableTime           `json:"orCalculateDueDate,omitempty"`
	ComputedPlannedDuration map[string]interface{} `json:"computedPlannedDuration,omitempty"`
	ActualDuration          map[string]interface{} `json:"actualDuration,omitempty"`
	ReleaseUid              *int32                 `json:"releaseUid,omitempty"`
	Tasks                   []Task                 `json:"tasks,omitempty"`
	Release                 interface{}            `json:"release,omitempty"`
	Status                  *PhaseStatus           `json:"status,omitempty"`
	Color                   *string                `json:"color,omitempty"`
	OriginId                *string                `json:"originId,omitempty"`
	CurrentTask             *Task                  `json:"currentTask,omitempty"`
	DisplayPath             *string                `json:"displayPath,omitempty"`
	Active                  *bool                  `json:"active,omitempty"`
	Done                    *bool                  `json:"done,omitempty"`
	Defunct                 *bool                  `json:"defunct,omitempty"`
	Updatable               *bool                  `json:"updatable,omitempty"`
	Aborted                 *bool                  `json:"aborted,omitempty"`
	Planned                 *bool                  `json:"planned,omitempty"`
	Failed                  *bool                  `json:"failed,omitempty"`
	Failing                 *bool                  `json:"failing,omitempty"`
	ReleaseOwner            *string                `json:"releaseOwner,omitempty"`
	AllGates                []GateTask             `json:"allGates,omitempty"`
	AllTasks                []Task                 `json:"allTasks,omitempty"`
	Children                []PlanItem             `json:"children,omitempty"`
	VariableUsages          []UsagePoint           `json:"variableUsages,omitempty"`
	Original                *bool                  `json:"original,omitempty"`
	PhaseCopied             *bool                  `json:"phaseCopied,omitempty"`
	AncestorId              *string                `json:"ancestorId,omitempty"`
	LatestCopy              *bool                  `json:"latestCopy,omitempty"`
}

// NewPhase instantiates a new Phase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhase() *Phase {
	this := Phase{}
	return &this
}

// NewPhaseWithDefaults instantiates a new Phase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhaseWithDefaults() *Phase {
	this := Phase{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Phase) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Phase) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Phase) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Phase) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Phase) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Phase) SetType(v string) {
	o.Type = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *Phase) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *Phase) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *Phase) SetLocked(v bool) {
	o.Locked = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Phase) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Phase) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Phase) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Phase) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Phase) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Phase) SetDescription(v string) {
	o.Description = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Phase) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Phase) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Phase) SetOwner(v string) {
	o.Owner = &v
}

// GetScheduledStartDate returns the ScheduledStartDate field value if set, zero value otherwise.
func (o *Phase) GetScheduledStartDate() time.Time {
	if o == nil || IsNil(o.ScheduledStartDate) {
		var ret time.Time
		return ret
	}
	return *o.ScheduledStartDate
}

// GetScheduledStartDateOk returns a tuple with the ScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetScheduledStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ScheduledStartDate) {
		return nil, false
	}
	return o.ScheduledStartDate, true
}

// HasScheduledStartDate returns a boolean if a field has been set.
func (o *Phase) HasScheduledStartDate() bool {
	if o != nil && !IsNil(o.ScheduledStartDate) {
		return true
	}

	return false
}

// SetScheduledStartDate gets a reference to the given time.Time and assigns it to the ScheduledStartDate field.
func (o *Phase) SetScheduledStartDate(v time.Time) {
	o.ScheduledStartDate = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *Phase) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate) {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *Phase) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *Phase) SetDueDate(v time.Time) {
	o.DueDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Phase) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Phase) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Phase) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Phase) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Phase) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *Phase) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetPlannedDuration returns the PlannedDuration field value if set, zero value otherwise.
func (o *Phase) GetPlannedDuration() int32 {
	if o == nil || IsNil(o.PlannedDuration) {
		var ret int32
		return ret
	}
	return *o.PlannedDuration
}

// GetPlannedDurationOk returns a tuple with the PlannedDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetPlannedDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.PlannedDuration) {
		return nil, false
	}
	return o.PlannedDuration, true
}

// HasPlannedDuration returns a boolean if a field has been set.
func (o *Phase) HasPlannedDuration() bool {
	if o != nil && !IsNil(o.PlannedDuration) {
		return true
	}

	return false
}

// SetPlannedDuration gets a reference to the given int32 and assigns it to the PlannedDuration field.
func (o *Phase) SetPlannedDuration(v int32) {
	o.PlannedDuration = &v
}

// GetFlagStatus returns the FlagStatus field value if set, zero value otherwise.
func (o *Phase) GetFlagStatus() FlagStatus {
	if o == nil || IsNil(o.FlagStatus) {
		var ret FlagStatus
		return ret
	}
	return *o.FlagStatus
}

// GetFlagStatusOk returns a tuple with the FlagStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetFlagStatusOk() (*FlagStatus, bool) {
	if o == nil || IsNil(o.FlagStatus) {
		return nil, false
	}
	return o.FlagStatus, true
}

// HasFlagStatus returns a boolean if a field has been set.
func (o *Phase) HasFlagStatus() bool {
	if o != nil && !IsNil(o.FlagStatus) {
		return true
	}

	return false
}

// SetFlagStatus gets a reference to the given FlagStatus and assigns it to the FlagStatus field.
func (o *Phase) SetFlagStatus(v FlagStatus) {
	o.FlagStatus = &v
}

// GetFlagComment returns the FlagComment field value if set, zero value otherwise.
func (o *Phase) GetFlagComment() string {
	if o == nil || IsNil(o.FlagComment) {
		var ret string
		return ret
	}
	return *o.FlagComment
}

// GetFlagCommentOk returns a tuple with the FlagComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetFlagCommentOk() (*string, bool) {
	if o == nil || IsNil(o.FlagComment) {
		return nil, false
	}
	return o.FlagComment, true
}

// HasFlagComment returns a boolean if a field has been set.
func (o *Phase) HasFlagComment() bool {
	if o != nil && !IsNil(o.FlagComment) {
		return true
	}

	return false
}

// SetFlagComment gets a reference to the given string and assigns it to the FlagComment field.
func (o *Phase) SetFlagComment(v string) {
	o.FlagComment = &v
}

// GetOverdueNotified returns the OverdueNotified field value if set, zero value otherwise.
func (o *Phase) GetOverdueNotified() bool {
	if o == nil || IsNil(o.OverdueNotified) {
		var ret bool
		return ret
	}
	return *o.OverdueNotified
}

// GetOverdueNotifiedOk returns a tuple with the OverdueNotified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetOverdueNotifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.OverdueNotified) {
		return nil, false
	}
	return o.OverdueNotified, true
}

// HasOverdueNotified returns a boolean if a field has been set.
func (o *Phase) HasOverdueNotified() bool {
	if o != nil && !IsNil(o.OverdueNotified) {
		return true
	}

	return false
}

// SetOverdueNotified gets a reference to the given bool and assigns it to the OverdueNotified field.
func (o *Phase) SetOverdueNotified(v bool) {
	o.OverdueNotified = &v
}

// GetFlagged returns the Flagged field value if set, zero value otherwise.
func (o *Phase) GetFlagged() bool {
	if o == nil || IsNil(o.Flagged) {
		var ret bool
		return ret
	}
	return *o.Flagged
}

// GetFlaggedOk returns a tuple with the Flagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetFlaggedOk() (*bool, bool) {
	if o == nil || IsNil(o.Flagged) {
		return nil, false
	}
	return o.Flagged, true
}

// HasFlagged returns a boolean if a field has been set.
func (o *Phase) HasFlagged() bool {
	if o != nil && !IsNil(o.Flagged) {
		return true
	}

	return false
}

// SetFlagged gets a reference to the given bool and assigns it to the Flagged field.
func (o *Phase) SetFlagged(v bool) {
	o.Flagged = &v
}

// GetStartOrScheduledDate returns the StartOrScheduledDate field value if set, zero value otherwise.
func (o *Phase) GetStartOrScheduledDate() time.Time {
	if o == nil || IsNil(o.StartOrScheduledDate) {
		var ret time.Time
		return ret
	}
	return *o.StartOrScheduledDate
}

// GetStartOrScheduledDateOk returns a tuple with the StartOrScheduledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetStartOrScheduledDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartOrScheduledDate) {
		return nil, false
	}
	return o.StartOrScheduledDate, true
}

// HasStartOrScheduledDate returns a boolean if a field has been set.
func (o *Phase) HasStartOrScheduledDate() bool {
	if o != nil && !IsNil(o.StartOrScheduledDate) {
		return true
	}

	return false
}

// SetStartOrScheduledDate gets a reference to the given time.Time and assigns it to the StartOrScheduledDate field.
func (o *Phase) SetStartOrScheduledDate(v time.Time) {
	o.StartOrScheduledDate = &v
}

// GetEndOrDueDate returns the EndOrDueDate field value if set, zero value otherwise.
func (o *Phase) GetEndOrDueDate() time.Time {
	if o == nil || IsNil(o.EndOrDueDate) {
		var ret time.Time
		return ret
	}
	return *o.EndOrDueDate
}

// GetEndOrDueDateOk returns a tuple with the EndOrDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetEndOrDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndOrDueDate) {
		return nil, false
	}
	return o.EndOrDueDate, true
}

// HasEndOrDueDate returns a boolean if a field has been set.
func (o *Phase) HasEndOrDueDate() bool {
	if o != nil && !IsNil(o.EndOrDueDate) {
		return true
	}

	return false
}

// SetEndOrDueDate gets a reference to the given time.Time and assigns it to the EndOrDueDate field.
func (o *Phase) SetEndOrDueDate(v time.Time) {
	o.EndOrDueDate = &v
}

// GetOverdue returns the Overdue field value if set, zero value otherwise.
func (o *Phase) GetOverdue() bool {
	if o == nil || IsNil(o.Overdue) {
		var ret bool
		return ret
	}
	return *o.Overdue
}

// GetOverdueOk returns a tuple with the Overdue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetOverdueOk() (*bool, bool) {
	if o == nil || IsNil(o.Overdue) {
		return nil, false
	}
	return o.Overdue, true
}

// HasOverdue returns a boolean if a field has been set.
func (o *Phase) HasOverdue() bool {
	if o != nil && !IsNil(o.Overdue) {
		return true
	}

	return false
}

// SetOverdue gets a reference to the given bool and assigns it to the Overdue field.
func (o *Phase) SetOverdue(v bool) {
	o.Overdue = &v
}

// GetOrCalculateDueDate returns the OrCalculateDueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Phase) GetOrCalculateDueDate() time.Time {
	if o == nil || IsNil(o.OrCalculateDueDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.OrCalculateDueDate.Get()
}

// GetOrCalculateDueDateOk returns a tuple with the OrCalculateDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Phase) GetOrCalculateDueDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrCalculateDueDate.Get(), o.OrCalculateDueDate.IsSet()
}

// HasOrCalculateDueDate returns a boolean if a field has been set.
func (o *Phase) HasOrCalculateDueDate() bool {
	if o != nil && o.OrCalculateDueDate.IsSet() {
		return true
	}

	return false
}

// SetOrCalculateDueDate gets a reference to the given NullableTime and assigns it to the OrCalculateDueDate field.
func (o *Phase) SetOrCalculateDueDate(v time.Time) {
	o.OrCalculateDueDate.Set(&v)
}

// SetOrCalculateDueDateNil sets the value for OrCalculateDueDate to be an explicit nil
func (o *Phase) SetOrCalculateDueDateNil() {
	o.OrCalculateDueDate.Set(nil)
}

// UnsetOrCalculateDueDate ensures that no value is present for OrCalculateDueDate, not even an explicit nil
func (o *Phase) UnsetOrCalculateDueDate() {
	o.OrCalculateDueDate.Unset()
}

// GetComputedPlannedDuration returns the ComputedPlannedDuration field value if set, zero value otherwise.
func (o *Phase) GetComputedPlannedDuration() map[string]interface{} {
	if o == nil || IsNil(o.ComputedPlannedDuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.ComputedPlannedDuration
}

// GetComputedPlannedDurationOk returns a tuple with the ComputedPlannedDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetComputedPlannedDurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ComputedPlannedDuration) {
		return map[string]interface{}{}, false
	}
	return o.ComputedPlannedDuration, true
}

// HasComputedPlannedDuration returns a boolean if a field has been set.
func (o *Phase) HasComputedPlannedDuration() bool {
	if o != nil && !IsNil(o.ComputedPlannedDuration) {
		return true
	}

	return false
}

// SetComputedPlannedDuration gets a reference to the given map[string]interface{} and assigns it to the ComputedPlannedDuration field.
func (o *Phase) SetComputedPlannedDuration(v map[string]interface{}) {
	o.ComputedPlannedDuration = v
}

// GetActualDuration returns the ActualDuration field value if set, zero value otherwise.
func (o *Phase) GetActualDuration() map[string]interface{} {
	if o == nil || IsNil(o.ActualDuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.ActualDuration
}

// GetActualDurationOk returns a tuple with the ActualDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetActualDurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ActualDuration) {
		return map[string]interface{}{}, false
	}
	return o.ActualDuration, true
}

// HasActualDuration returns a boolean if a field has been set.
func (o *Phase) HasActualDuration() bool {
	if o != nil && !IsNil(o.ActualDuration) {
		return true
	}

	return false
}

// SetActualDuration gets a reference to the given map[string]interface{} and assigns it to the ActualDuration field.
func (o *Phase) SetActualDuration(v map[string]interface{}) {
	o.ActualDuration = v
}

// GetReleaseUid returns the ReleaseUid field value if set, zero value otherwise.
func (o *Phase) GetReleaseUid() int32 {
	if o == nil || IsNil(o.ReleaseUid) {
		var ret int32
		return ret
	}
	return *o.ReleaseUid
}

// GetReleaseUidOk returns a tuple with the ReleaseUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetReleaseUidOk() (*int32, bool) {
	if o == nil || IsNil(o.ReleaseUid) {
		return nil, false
	}
	return o.ReleaseUid, true
}

// HasReleaseUid returns a boolean if a field has been set.
func (o *Phase) HasReleaseUid() bool {
	if o != nil && !IsNil(o.ReleaseUid) {
		return true
	}

	return false
}

// SetReleaseUid gets a reference to the given int32 and assigns it to the ReleaseUid field.
func (o *Phase) SetReleaseUid(v int32) {
	o.ReleaseUid = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *Phase) GetTasks() []Task {
	if o == nil || IsNil(o.Tasks) {
		var ret []Task
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetTasksOk() ([]Task, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *Phase) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []Task and assigns it to the Tasks field.
func (o *Phase) SetTasks(v []Task) {
	o.Tasks = v
}

// GetRelease returns the Release field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Phase) GetRelease() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Phase) GetReleaseOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return &o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *Phase) HasRelease() bool {
	if o != nil && IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given interface{} and assigns it to the Release field.
func (o *Phase) SetRelease(v interface{}) {
	o.Release = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Phase) GetStatus() PhaseStatus {
	if o == nil || IsNil(o.Status) {
		var ret PhaseStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetStatusOk() (*PhaseStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Phase) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PhaseStatus and assigns it to the Status field.
func (o *Phase) SetStatus(v PhaseStatus) {
	o.Status = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *Phase) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *Phase) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *Phase) SetColor(v string) {
	o.Color = &v
}

// GetOriginId returns the OriginId field value if set, zero value otherwise.
func (o *Phase) GetOriginId() string {
	if o == nil || IsNil(o.OriginId) {
		var ret string
		return ret
	}
	return *o.OriginId
}

// GetOriginIdOk returns a tuple with the OriginId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetOriginIdOk() (*string, bool) {
	if o == nil || IsNil(o.OriginId) {
		return nil, false
	}
	return o.OriginId, true
}

// HasOriginId returns a boolean if a field has been set.
func (o *Phase) HasOriginId() bool {
	if o != nil && !IsNil(o.OriginId) {
		return true
	}

	return false
}

// SetOriginId gets a reference to the given string and assigns it to the OriginId field.
func (o *Phase) SetOriginId(v string) {
	o.OriginId = &v
}

// GetCurrentTask returns the CurrentTask field value if set, zero value otherwise.
func (o *Phase) GetCurrentTask() Task {
	if o == nil || IsNil(o.CurrentTask) {
		var ret Task
		return ret
	}
	return *o.CurrentTask
}

// GetCurrentTaskOk returns a tuple with the CurrentTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetCurrentTaskOk() (*Task, bool) {
	if o == nil || IsNil(o.CurrentTask) {
		return nil, false
	}
	return o.CurrentTask, true
}

// HasCurrentTask returns a boolean if a field has been set.
func (o *Phase) HasCurrentTask() bool {
	if o != nil && !IsNil(o.CurrentTask) {
		return true
	}

	return false
}

// SetCurrentTask gets a reference to the given Task and assigns it to the CurrentTask field.
func (o *Phase) SetCurrentTask(v Task) {
	o.CurrentTask = &v
}

// GetDisplayPath returns the DisplayPath field value if set, zero value otherwise.
func (o *Phase) GetDisplayPath() string {
	if o == nil || IsNil(o.DisplayPath) {
		var ret string
		return ret
	}
	return *o.DisplayPath
}

// GetDisplayPathOk returns a tuple with the DisplayPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetDisplayPathOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayPath) {
		return nil, false
	}
	return o.DisplayPath, true
}

// HasDisplayPath returns a boolean if a field has been set.
func (o *Phase) HasDisplayPath() bool {
	if o != nil && !IsNil(o.DisplayPath) {
		return true
	}

	return false
}

// SetDisplayPath gets a reference to the given string and assigns it to the DisplayPath field.
func (o *Phase) SetDisplayPath(v string) {
	o.DisplayPath = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Phase) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Phase) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Phase) SetActive(v bool) {
	o.Active = &v
}

// GetDone returns the Done field value if set, zero value otherwise.
func (o *Phase) GetDone() bool {
	if o == nil || IsNil(o.Done) {
		var ret bool
		return ret
	}
	return *o.Done
}

// GetDoneOk returns a tuple with the Done field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetDoneOk() (*bool, bool) {
	if o == nil || IsNil(o.Done) {
		return nil, false
	}
	return o.Done, true
}

// HasDone returns a boolean if a field has been set.
func (o *Phase) HasDone() bool {
	if o != nil && !IsNil(o.Done) {
		return true
	}

	return false
}

// SetDone gets a reference to the given bool and assigns it to the Done field.
func (o *Phase) SetDone(v bool) {
	o.Done = &v
}

// GetDefunct returns the Defunct field value if set, zero value otherwise.
func (o *Phase) GetDefunct() bool {
	if o == nil || IsNil(o.Defunct) {
		var ret bool
		return ret
	}
	return *o.Defunct
}

// GetDefunctOk returns a tuple with the Defunct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetDefunctOk() (*bool, bool) {
	if o == nil || IsNil(o.Defunct) {
		return nil, false
	}
	return o.Defunct, true
}

// HasDefunct returns a boolean if a field has been set.
func (o *Phase) HasDefunct() bool {
	if o != nil && !IsNil(o.Defunct) {
		return true
	}

	return false
}

// SetDefunct gets a reference to the given bool and assigns it to the Defunct field.
func (o *Phase) SetDefunct(v bool) {
	o.Defunct = &v
}

// GetUpdatable returns the Updatable field value if set, zero value otherwise.
func (o *Phase) GetUpdatable() bool {
	if o == nil || IsNil(o.Updatable) {
		var ret bool
		return ret
	}
	return *o.Updatable
}

// GetUpdatableOk returns a tuple with the Updatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetUpdatableOk() (*bool, bool) {
	if o == nil || IsNil(o.Updatable) {
		return nil, false
	}
	return o.Updatable, true
}

// HasUpdatable returns a boolean if a field has been set.
func (o *Phase) HasUpdatable() bool {
	if o != nil && !IsNil(o.Updatable) {
		return true
	}

	return false
}

// SetUpdatable gets a reference to the given bool and assigns it to the Updatable field.
func (o *Phase) SetUpdatable(v bool) {
	o.Updatable = &v
}

// GetAborted returns the Aborted field value if set, zero value otherwise.
func (o *Phase) GetAborted() bool {
	if o == nil || IsNil(o.Aborted) {
		var ret bool
		return ret
	}
	return *o.Aborted
}

// GetAbortedOk returns a tuple with the Aborted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetAbortedOk() (*bool, bool) {
	if o == nil || IsNil(o.Aborted) {
		return nil, false
	}
	return o.Aborted, true
}

// HasAborted returns a boolean if a field has been set.
func (o *Phase) HasAborted() bool {
	if o != nil && !IsNil(o.Aborted) {
		return true
	}

	return false
}

// SetAborted gets a reference to the given bool and assigns it to the Aborted field.
func (o *Phase) SetAborted(v bool) {
	o.Aborted = &v
}

// GetPlanned returns the Planned field value if set, zero value otherwise.
func (o *Phase) GetPlanned() bool {
	if o == nil || IsNil(o.Planned) {
		var ret bool
		return ret
	}
	return *o.Planned
}

// GetPlannedOk returns a tuple with the Planned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetPlannedOk() (*bool, bool) {
	if o == nil || IsNil(o.Planned) {
		return nil, false
	}
	return o.Planned, true
}

// HasPlanned returns a boolean if a field has been set.
func (o *Phase) HasPlanned() bool {
	if o != nil && !IsNil(o.Planned) {
		return true
	}

	return false
}

// SetPlanned gets a reference to the given bool and assigns it to the Planned field.
func (o *Phase) SetPlanned(v bool) {
	o.Planned = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *Phase) GetFailed() bool {
	if o == nil || IsNil(o.Failed) {
		var ret bool
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetFailedOk() (*bool, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *Phase) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given bool and assigns it to the Failed field.
func (o *Phase) SetFailed(v bool) {
	o.Failed = &v
}

// GetFailing returns the Failing field value if set, zero value otherwise.
func (o *Phase) GetFailing() bool {
	if o == nil || IsNil(o.Failing) {
		var ret bool
		return ret
	}
	return *o.Failing
}

// GetFailingOk returns a tuple with the Failing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetFailingOk() (*bool, bool) {
	if o == nil || IsNil(o.Failing) {
		return nil, false
	}
	return o.Failing, true
}

// HasFailing returns a boolean if a field has been set.
func (o *Phase) HasFailing() bool {
	if o != nil && !IsNil(o.Failing) {
		return true
	}

	return false
}

// SetFailing gets a reference to the given bool and assigns it to the Failing field.
func (o *Phase) SetFailing(v bool) {
	o.Failing = &v
}

// GetReleaseOwner returns the ReleaseOwner field value if set, zero value otherwise.
func (o *Phase) GetReleaseOwner() string {
	if o == nil || IsNil(o.ReleaseOwner) {
		var ret string
		return ret
	}
	return *o.ReleaseOwner
}

// GetReleaseOwnerOk returns a tuple with the ReleaseOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetReleaseOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseOwner) {
		return nil, false
	}
	return o.ReleaseOwner, true
}

// HasReleaseOwner returns a boolean if a field has been set.
func (o *Phase) HasReleaseOwner() bool {
	if o != nil && !IsNil(o.ReleaseOwner) {
		return true
	}

	return false
}

// SetReleaseOwner gets a reference to the given string and assigns it to the ReleaseOwner field.
func (o *Phase) SetReleaseOwner(v string) {
	o.ReleaseOwner = &v
}

// GetAllGates returns the AllGates field value if set, zero value otherwise.
func (o *Phase) GetAllGates() []GateTask {
	if o == nil || IsNil(o.AllGates) {
		var ret []GateTask
		return ret
	}
	return o.AllGates
}

// GetAllGatesOk returns a tuple with the AllGates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetAllGatesOk() ([]GateTask, bool) {
	if o == nil || IsNil(o.AllGates) {
		return nil, false
	}
	return o.AllGates, true
}

// HasAllGates returns a boolean if a field has been set.
func (o *Phase) HasAllGates() bool {
	if o != nil && !IsNil(o.AllGates) {
		return true
	}

	return false
}

// SetAllGates gets a reference to the given []GateTask and assigns it to the AllGates field.
func (o *Phase) SetAllGates(v []GateTask) {
	o.AllGates = v
}

// GetAllTasks returns the AllTasks field value if set, zero value otherwise.
func (o *Phase) GetAllTasks() []Task {
	if o == nil || IsNil(o.AllTasks) {
		var ret []Task
		return ret
	}
	return o.AllTasks
}

// GetAllTasksOk returns a tuple with the AllTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetAllTasksOk() ([]Task, bool) {
	if o == nil || IsNil(o.AllTasks) {
		return nil, false
	}
	return o.AllTasks, true
}

// HasAllTasks returns a boolean if a field has been set.
func (o *Phase) HasAllTasks() bool {
	if o != nil && !IsNil(o.AllTasks) {
		return true
	}

	return false
}

// SetAllTasks gets a reference to the given []Task and assigns it to the AllTasks field.
func (o *Phase) SetAllTasks(v []Task) {
	o.AllTasks = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *Phase) GetChildren() []PlanItem {
	if o == nil || IsNil(o.Children) {
		var ret []PlanItem
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetChildrenOk() ([]PlanItem, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Phase) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []PlanItem and assigns it to the Children field.
func (o *Phase) SetChildren(v []PlanItem) {
	o.Children = v
}

// GetVariableUsages returns the VariableUsages field value if set, zero value otherwise.
func (o *Phase) GetVariableUsages() []UsagePoint {
	if o == nil || IsNil(o.VariableUsages) {
		var ret []UsagePoint
		return ret
	}
	return o.VariableUsages
}

// GetVariableUsagesOk returns a tuple with the VariableUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetVariableUsagesOk() ([]UsagePoint, bool) {
	if o == nil || IsNil(o.VariableUsages) {
		return nil, false
	}
	return o.VariableUsages, true
}

// HasVariableUsages returns a boolean if a field has been set.
func (o *Phase) HasVariableUsages() bool {
	if o != nil && !IsNil(o.VariableUsages) {
		return true
	}

	return false
}

// SetVariableUsages gets a reference to the given []UsagePoint and assigns it to the VariableUsages field.
func (o *Phase) SetVariableUsages(v []UsagePoint) {
	o.VariableUsages = v
}

// GetOriginal returns the Original field value if set, zero value otherwise.
func (o *Phase) GetOriginal() bool {
	if o == nil || IsNil(o.Original) {
		var ret bool
		return ret
	}
	return *o.Original
}

// GetOriginalOk returns a tuple with the Original field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetOriginalOk() (*bool, bool) {
	if o == nil || IsNil(o.Original) {
		return nil, false
	}
	return o.Original, true
}

// HasOriginal returns a boolean if a field has been set.
func (o *Phase) HasOriginal() bool {
	if o != nil && !IsNil(o.Original) {
		return true
	}

	return false
}

// SetOriginal gets a reference to the given bool and assigns it to the Original field.
func (o *Phase) SetOriginal(v bool) {
	o.Original = &v
}

// GetPhaseCopied returns the PhaseCopied field value if set, zero value otherwise.
func (o *Phase) GetPhaseCopied() bool {
	if o == nil || IsNil(o.PhaseCopied) {
		var ret bool
		return ret
	}
	return *o.PhaseCopied
}

// GetPhaseCopiedOk returns a tuple with the PhaseCopied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetPhaseCopiedOk() (*bool, bool) {
	if o == nil || IsNil(o.PhaseCopied) {
		return nil, false
	}
	return o.PhaseCopied, true
}

// HasPhaseCopied returns a boolean if a field has been set.
func (o *Phase) HasPhaseCopied() bool {
	if o != nil && !IsNil(o.PhaseCopied) {
		return true
	}

	return false
}

// SetPhaseCopied gets a reference to the given bool and assigns it to the PhaseCopied field.
func (o *Phase) SetPhaseCopied(v bool) {
	o.PhaseCopied = &v
}

// GetAncestorId returns the AncestorId field value if set, zero value otherwise.
func (o *Phase) GetAncestorId() string {
	if o == nil || IsNil(o.AncestorId) {
		var ret string
		return ret
	}
	return *o.AncestorId
}

// GetAncestorIdOk returns a tuple with the AncestorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetAncestorIdOk() (*string, bool) {
	if o == nil || IsNil(o.AncestorId) {
		return nil, false
	}
	return o.AncestorId, true
}

// HasAncestorId returns a boolean if a field has been set.
func (o *Phase) HasAncestorId() bool {
	if o != nil && !IsNil(o.AncestorId) {
		return true
	}

	return false
}

// SetAncestorId gets a reference to the given string and assigns it to the AncestorId field.
func (o *Phase) SetAncestorId(v string) {
	o.AncestorId = &v
}

// GetLatestCopy returns the LatestCopy field value if set, zero value otherwise.
func (o *Phase) GetLatestCopy() bool {
	if o == nil || IsNil(o.LatestCopy) {
		var ret bool
		return ret
	}
	return *o.LatestCopy
}

// GetLatestCopyOk returns a tuple with the LatestCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase) GetLatestCopyOk() (*bool, bool) {
	if o == nil || IsNil(o.LatestCopy) {
		return nil, false
	}
	return o.LatestCopy, true
}

// HasLatestCopy returns a boolean if a field has been set.
func (o *Phase) HasLatestCopy() bool {
	if o != nil && !IsNil(o.LatestCopy) {
		return true
	}

	return false
}

// SetLatestCopy gets a reference to the given bool and assigns it to the LatestCopy field.
func (o *Phase) SetLatestCopy(v bool) {
	o.LatestCopy = &v
}

func (o Phase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Phase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.ScheduledStartDate) {
		toSerialize["scheduledStartDate"] = o.ScheduledStartDate
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.PlannedDuration) {
		toSerialize["plannedDuration"] = o.PlannedDuration
	}
	if !IsNil(o.FlagStatus) {
		toSerialize["flagStatus"] = o.FlagStatus
	}
	if !IsNil(o.FlagComment) {
		toSerialize["flagComment"] = o.FlagComment
	}
	if !IsNil(o.OverdueNotified) {
		toSerialize["overdueNotified"] = o.OverdueNotified
	}
	if !IsNil(o.Flagged) {
		toSerialize["flagged"] = o.Flagged
	}
	if !IsNil(o.StartOrScheduledDate) {
		toSerialize["startOrScheduledDate"] = o.StartOrScheduledDate
	}
	if !IsNil(o.EndOrDueDate) {
		toSerialize["endOrDueDate"] = o.EndOrDueDate
	}
	if !IsNil(o.Overdue) {
		toSerialize["overdue"] = o.Overdue
	}
	if o.OrCalculateDueDate.IsSet() {
		toSerialize["orCalculateDueDate"] = o.OrCalculateDueDate.Get()
	}
	if !IsNil(o.ComputedPlannedDuration) {
		toSerialize["computedPlannedDuration"] = o.ComputedPlannedDuration
	}
	if !IsNil(o.ActualDuration) {
		toSerialize["actualDuration"] = o.ActualDuration
	}
	if !IsNil(o.ReleaseUid) {
		toSerialize["releaseUid"] = o.ReleaseUid
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if o.Release != nil {
		toSerialize["release"] = o.Release
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.OriginId) {
		toSerialize["originId"] = o.OriginId
	}
	if !IsNil(o.CurrentTask) {
		toSerialize["currentTask"] = o.CurrentTask
	}
	if !IsNil(o.DisplayPath) {
		toSerialize["displayPath"] = o.DisplayPath
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Done) {
		toSerialize["done"] = o.Done
	}
	if !IsNil(o.Defunct) {
		toSerialize["defunct"] = o.Defunct
	}
	if !IsNil(o.Updatable) {
		toSerialize["updatable"] = o.Updatable
	}
	if !IsNil(o.Aborted) {
		toSerialize["aborted"] = o.Aborted
	}
	if !IsNil(o.Planned) {
		toSerialize["planned"] = o.Planned
	}
	if !IsNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	if !IsNil(o.Failing) {
		toSerialize["failing"] = o.Failing
	}
	if !IsNil(o.ReleaseOwner) {
		toSerialize["releaseOwner"] = o.ReleaseOwner
	}
	if !IsNil(o.AllGates) {
		toSerialize["allGates"] = o.AllGates
	}
	if !IsNil(o.AllTasks) {
		toSerialize["allTasks"] = o.AllTasks
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.VariableUsages) {
		toSerialize["variableUsages"] = o.VariableUsages
	}
	if !IsNil(o.Original) {
		toSerialize["original"] = o.Original
	}
	if !IsNil(o.PhaseCopied) {
		toSerialize["phaseCopied"] = o.PhaseCopied
	}
	if !IsNil(o.AncestorId) {
		toSerialize["ancestorId"] = o.AncestorId
	}
	if !IsNil(o.LatestCopy) {
		toSerialize["latestCopy"] = o.LatestCopy
	}
	return toSerialize, nil
}

type NullablePhase struct {
	value *Phase
	isSet bool
}

func (v NullablePhase) Get() *Phase {
	return v.value
}

func (v *NullablePhase) Set(val *Phase) {
	v.value = val
	v.isSet = true
}

func (v NullablePhase) IsSet() bool {
	return v.isSet
}

func (v *NullablePhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhase(val *Phase) *NullablePhase {
	return &NullablePhase{value: val, isSet: true}
}

func (v NullablePhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
