/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Task{}

// Task struct for Task
type Task struct {
	ScheduledStartDate *string `json:"scheduledStartDate,omitempty"`
	FlagStatus *FlagStatus `json:"flagStatus,omitempty"`
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Owner *string `json:"owner,omitempty"`
	DueDate *string `json:"dueDate,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	PlannedDuration *int32 `json:"plannedDuration,omitempty"`
	FlagComment *string `json:"flagComment,omitempty"`
	OverdueNotified *bool `json:"overdueNotified,omitempty"`
	Flagged *bool `json:"flagged,omitempty"`
	StartOrScheduledDate *string `json:"startOrScheduledDate,omitempty"`
	EndOrDueDate *string `json:"endOrDueDate,omitempty"`
	Overdue *bool `json:"overdue,omitempty"`
	OrCalculateDueDate NullableString `json:"orCalculateDueDate,omitempty"`
	ComputedPlannedDuration map[string]interface{} `json:"computedPlannedDuration,omitempty"`
	ActualDuration map[string]interface{} `json:"actualDuration,omitempty"`
	ReleaseUid *int32 `json:"releaseUid,omitempty"`
	CiUid *int32 `json:"ciUid,omitempty"`
	Comments []Comment `json:"comments,omitempty"`
	Container *TaskContainer `json:"container,omitempty"`
	Facets []Facet `json:"facets,omitempty"`
	Attachments []Attachment `json:"attachments,omitempty"`
	Status *TaskStatus `json:"status,omitempty"`
	Team *string `json:"team,omitempty"`
	Watchers []string `json:"watchers,omitempty"`
	WaitForScheduledStartDate *bool `json:"waitForScheduledStartDate,omitempty"`
	DelayDuringBlackout *bool `json:"delayDuringBlackout,omitempty"`
	PostponedDueToBlackout *bool `json:"postponedDueToBlackout,omitempty"`
	PostponedUntilEnvironmentsAreReserved *bool `json:"postponedUntilEnvironmentsAreReserved,omitempty"`
	OriginalScheduledStartDate *string `json:"originalScheduledStartDate,omitempty"`
	HasBeenFlagged *bool `json:"hasBeenFlagged,omitempty"`
	HasBeenDelayed *bool `json:"hasBeenDelayed,omitempty"`
	Precondition *string `json:"precondition,omitempty"`
	FailureHandler *string `json:"failureHandler,omitempty"`
	TaskFailureHandlerEnabled *bool `json:"taskFailureHandlerEnabled,omitempty"`
	TaskRecoverOp *TaskRecoverOp `json:"taskRecoverOp,omitempty"`
	FailuresCount *int32 `json:"failuresCount,omitempty"`
	ExecutionId *string `json:"executionId,omitempty"`
	VariableMapping *map[string]string `json:"variableMapping,omitempty"`
	ExternalVariableMapping *map[string]string `json:"externalVariableMapping,omitempty"`
	MaxCommentSize *int32 `json:"maxCommentSize,omitempty"`
	Tags []string `json:"tags,omitempty"`
	ConfigurationUri *string `json:"configurationUri,omitempty"`
	DueSoonNotified *bool `json:"dueSoonNotified,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	CheckAttributes *bool `json:"checkAttributes,omitempty"`
	AbortScript *string `json:"abortScript,omitempty"`
	Phase *Phase `json:"phase,omitempty"`
	BlackoutMetadata *BlackoutMetadata `json:"blackoutMetadata,omitempty"`
	FlaggedCount *int32 `json:"flaggedCount,omitempty"`
	DelayedCount *int32 `json:"delayedCount,omitempty"`
	Done *bool `json:"done,omitempty"`
	DoneInAdvance *bool `json:"doneInAdvance,omitempty"`
	Defunct *bool `json:"defunct,omitempty"`
	Updatable *bool `json:"updatable,omitempty"`
	Aborted *bool `json:"aborted,omitempty"`
	NotYetReached *bool `json:"notYetReached,omitempty"`
	Planned *bool `json:"planned,omitempty"`
	Active *bool `json:"active,omitempty"`
	InProgress *bool `json:"inProgress,omitempty"`
	Pending *bool `json:"pending,omitempty"`
	WaitingForInput *bool `json:"waitingForInput,omitempty"`
	Failed *bool `json:"failed,omitempty"`
	Failing *bool `json:"failing,omitempty"`
	CompletedInAdvance *bool `json:"completedInAdvance,omitempty"`
	Skipped *bool `json:"skipped,omitempty"`
	SkippedInAdvance *bool `json:"skippedInAdvance,omitempty"`
	PreconditionInProgress *bool `json:"preconditionInProgress,omitempty"`
	FailureHandlerInProgress *bool `json:"failureHandlerInProgress,omitempty"`
	AbortScriptInProgress *bool `json:"abortScriptInProgress,omitempty"`
	FacetInProgress *bool `json:"facetInProgress,omitempty"`
	Movable *bool `json:"movable,omitempty"`
	Gate *bool `json:"gate,omitempty"`
	TaskGroup *bool `json:"taskGroup,omitempty"`
	ParallelGroup *bool `json:"parallelGroup,omitempty"`
	PreconditionEnabled *bool `json:"preconditionEnabled,omitempty"`
	FailureHandlerEnabled *bool `json:"failureHandlerEnabled,omitempty"`
	Release *Release `json:"release,omitempty"`
	DisplayPath *string `json:"displayPath,omitempty"`
	ReleaseOwner *string `json:"releaseOwner,omitempty"`
	AllTasks []Task `json:"allTasks,omitempty"`
	Children []PlanItem `json:"children,omitempty"`
	VariableUsages []UsagePoint `json:"variableUsages,omitempty"`
	InputVariables []Variable `json:"inputVariables,omitempty"`
	ReferencedVariables []Variable `json:"referencedVariables,omitempty"`
	UnboundRequiredVariables []string `json:"unboundRequiredVariables,omitempty"`
	Automated *bool `json:"automated,omitempty"`
	TaskType map[string]interface{} `json:"taskType,omitempty"`
	DueSoon *bool `json:"dueSoon,omitempty"`
	ElapsedDurationFraction *float64 `json:"elapsedDurationFraction,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask() *Task {
	this := Task{}
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetScheduledStartDate returns the ScheduledStartDate field value if set, zero value otherwise.
func (o *Task) GetScheduledStartDate() string {
	if o == nil || isNil(o.ScheduledStartDate) {
		var ret string
		return ret
	}
	return *o.ScheduledStartDate
}

// GetScheduledStartDateOk returns a tuple with the ScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetScheduledStartDateOk() (*string, bool) {
	if o == nil || isNil(o.ScheduledStartDate) {
		return nil, false
	}
	return o.ScheduledStartDate, true
}

// HasScheduledStartDate returns a boolean if a field has been set.
func (o *Task) HasScheduledStartDate() bool {
	if o != nil && !isNil(o.ScheduledStartDate) {
		return true
	}

	return false
}

// SetScheduledStartDate gets a reference to the given string and assigns it to the ScheduledStartDate field.
func (o *Task) SetScheduledStartDate(v string) {
	o.ScheduledStartDate = &v
}

// GetFlagStatus returns the FlagStatus field value if set, zero value otherwise.
func (o *Task) GetFlagStatus() FlagStatus {
	if o == nil || isNil(o.FlagStatus) {
		var ret FlagStatus
		return ret
	}
	return *o.FlagStatus
}

// GetFlagStatusOk returns a tuple with the FlagStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFlagStatusOk() (*FlagStatus, bool) {
	if o == nil || isNil(o.FlagStatus) {
		return nil, false
	}
	return o.FlagStatus, true
}

// HasFlagStatus returns a boolean if a field has been set.
func (o *Task) HasFlagStatus() bool {
	if o != nil && !isNil(o.FlagStatus) {
		return true
	}

	return false
}

// SetFlagStatus gets a reference to the given FlagStatus and assigns it to the FlagStatus field.
func (o *Task) SetFlagStatus(v FlagStatus) {
	o.FlagStatus = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Task) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Task) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Task) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Task) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Task) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Task) SetDescription(v string) {
	o.Description = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Task) GetOwner() string {
	if o == nil || isNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetOwnerOk() (*string, bool) {
	if o == nil || isNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Task) HasOwner() bool {
	if o != nil && !isNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Task) SetOwner(v string) {
	o.Owner = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *Task) GetDueDate() string {
	if o == nil || isNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDueDateOk() (*string, bool) {
	if o == nil || isNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *Task) HasDueDate() bool {
	if o != nil && !isNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *Task) SetDueDate(v string) {
	o.DueDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Task) GetStartDate() string {
	if o == nil || isNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStartDateOk() (*string, bool) {
	if o == nil || isNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Task) HasStartDate() bool {
	if o != nil && !isNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *Task) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Task) GetEndDate() string {
	if o == nil || isNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetEndDateOk() (*string, bool) {
	if o == nil || isNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Task) HasEndDate() bool {
	if o != nil && !isNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *Task) SetEndDate(v string) {
	o.EndDate = &v
}

// GetPlannedDuration returns the PlannedDuration field value if set, zero value otherwise.
func (o *Task) GetPlannedDuration() int32 {
	if o == nil || isNil(o.PlannedDuration) {
		var ret int32
		return ret
	}
	return *o.PlannedDuration
}

// GetPlannedDurationOk returns a tuple with the PlannedDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPlannedDurationOk() (*int32, bool) {
	if o == nil || isNil(o.PlannedDuration) {
		return nil, false
	}
	return o.PlannedDuration, true
}

// HasPlannedDuration returns a boolean if a field has been set.
func (o *Task) HasPlannedDuration() bool {
	if o != nil && !isNil(o.PlannedDuration) {
		return true
	}

	return false
}

// SetPlannedDuration gets a reference to the given int32 and assigns it to the PlannedDuration field.
func (o *Task) SetPlannedDuration(v int32) {
	o.PlannedDuration = &v
}

// GetFlagComment returns the FlagComment field value if set, zero value otherwise.
func (o *Task) GetFlagComment() string {
	if o == nil || isNil(o.FlagComment) {
		var ret string
		return ret
	}
	return *o.FlagComment
}

// GetFlagCommentOk returns a tuple with the FlagComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFlagCommentOk() (*string, bool) {
	if o == nil || isNil(o.FlagComment) {
		return nil, false
	}
	return o.FlagComment, true
}

// HasFlagComment returns a boolean if a field has been set.
func (o *Task) HasFlagComment() bool {
	if o != nil && !isNil(o.FlagComment) {
		return true
	}

	return false
}

// SetFlagComment gets a reference to the given string and assigns it to the FlagComment field.
func (o *Task) SetFlagComment(v string) {
	o.FlagComment = &v
}

// GetOverdueNotified returns the OverdueNotified field value if set, zero value otherwise.
func (o *Task) GetOverdueNotified() bool {
	if o == nil || isNil(o.OverdueNotified) {
		var ret bool
		return ret
	}
	return *o.OverdueNotified
}

// GetOverdueNotifiedOk returns a tuple with the OverdueNotified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetOverdueNotifiedOk() (*bool, bool) {
	if o == nil || isNil(o.OverdueNotified) {
		return nil, false
	}
	return o.OverdueNotified, true
}

// HasOverdueNotified returns a boolean if a field has been set.
func (o *Task) HasOverdueNotified() bool {
	if o != nil && !isNil(o.OverdueNotified) {
		return true
	}

	return false
}

// SetOverdueNotified gets a reference to the given bool and assigns it to the OverdueNotified field.
func (o *Task) SetOverdueNotified(v bool) {
	o.OverdueNotified = &v
}

// GetFlagged returns the Flagged field value if set, zero value otherwise.
func (o *Task) GetFlagged() bool {
	if o == nil || isNil(o.Flagged) {
		var ret bool
		return ret
	}
	return *o.Flagged
}

// GetFlaggedOk returns a tuple with the Flagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFlaggedOk() (*bool, bool) {
	if o == nil || isNil(o.Flagged) {
		return nil, false
	}
	return o.Flagged, true
}

// HasFlagged returns a boolean if a field has been set.
func (o *Task) HasFlagged() bool {
	if o != nil && !isNil(o.Flagged) {
		return true
	}

	return false
}

// SetFlagged gets a reference to the given bool and assigns it to the Flagged field.
func (o *Task) SetFlagged(v bool) {
	o.Flagged = &v
}

// GetStartOrScheduledDate returns the StartOrScheduledDate field value if set, zero value otherwise.
func (o *Task) GetStartOrScheduledDate() string {
	if o == nil || isNil(o.StartOrScheduledDate) {
		var ret string
		return ret
	}
	return *o.StartOrScheduledDate
}

// GetStartOrScheduledDateOk returns a tuple with the StartOrScheduledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStartOrScheduledDateOk() (*string, bool) {
	if o == nil || isNil(o.StartOrScheduledDate) {
		return nil, false
	}
	return o.StartOrScheduledDate, true
}

// HasStartOrScheduledDate returns a boolean if a field has been set.
func (o *Task) HasStartOrScheduledDate() bool {
	if o != nil && !isNil(o.StartOrScheduledDate) {
		return true
	}

	return false
}

// SetStartOrScheduledDate gets a reference to the given string and assigns it to the StartOrScheduledDate field.
func (o *Task) SetStartOrScheduledDate(v string) {
	o.StartOrScheduledDate = &v
}

// GetEndOrDueDate returns the EndOrDueDate field value if set, zero value otherwise.
func (o *Task) GetEndOrDueDate() string {
	if o == nil || isNil(o.EndOrDueDate) {
		var ret string
		return ret
	}
	return *o.EndOrDueDate
}

// GetEndOrDueDateOk returns a tuple with the EndOrDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetEndOrDueDateOk() (*string, bool) {
	if o == nil || isNil(o.EndOrDueDate) {
		return nil, false
	}
	return o.EndOrDueDate, true
}

// HasEndOrDueDate returns a boolean if a field has been set.
func (o *Task) HasEndOrDueDate() bool {
	if o != nil && !isNil(o.EndOrDueDate) {
		return true
	}

	return false
}

// SetEndOrDueDate gets a reference to the given string and assigns it to the EndOrDueDate field.
func (o *Task) SetEndOrDueDate(v string) {
	o.EndOrDueDate = &v
}

// GetOverdue returns the Overdue field value if set, zero value otherwise.
func (o *Task) GetOverdue() bool {
	if o == nil || isNil(o.Overdue) {
		var ret bool
		return ret
	}
	return *o.Overdue
}

// GetOverdueOk returns a tuple with the Overdue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetOverdueOk() (*bool, bool) {
	if o == nil || isNil(o.Overdue) {
		return nil, false
	}
	return o.Overdue, true
}

// HasOverdue returns a boolean if a field has been set.
func (o *Task) HasOverdue() bool {
	if o != nil && !isNil(o.Overdue) {
		return true
	}

	return false
}

// SetOverdue gets a reference to the given bool and assigns it to the Overdue field.
func (o *Task) SetOverdue(v bool) {
	o.Overdue = &v
}

// GetOrCalculateDueDate returns the OrCalculateDueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetOrCalculateDueDate() string {
	if o == nil || isNil(o.OrCalculateDueDate.Get()) {
		var ret string
		return ret
	}
	return *o.OrCalculateDueDate.Get()
}

// GetOrCalculateDueDateOk returns a tuple with the OrCalculateDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetOrCalculateDueDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrCalculateDueDate.Get(), o.OrCalculateDueDate.IsSet()
}

// HasOrCalculateDueDate returns a boolean if a field has been set.
func (o *Task) HasOrCalculateDueDate() bool {
	if o != nil && o.OrCalculateDueDate.IsSet() {
		return true
	}

	return false
}

// SetOrCalculateDueDate gets a reference to the given NullableString and assigns it to the OrCalculateDueDate field.
func (o *Task) SetOrCalculateDueDate(v string) {
	o.OrCalculateDueDate.Set(&v)
}
// SetOrCalculateDueDateNil sets the value for OrCalculateDueDate to be an explicit nil
func (o *Task) SetOrCalculateDueDateNil() {
	o.OrCalculateDueDate.Set(nil)
}

// UnsetOrCalculateDueDate ensures that no value is present for OrCalculateDueDate, not even an explicit nil
func (o *Task) UnsetOrCalculateDueDate() {
	o.OrCalculateDueDate.Unset()
}

// GetComputedPlannedDuration returns the ComputedPlannedDuration field value if set, zero value otherwise.
func (o *Task) GetComputedPlannedDuration() map[string]interface{} {
	if o == nil || isNil(o.ComputedPlannedDuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.ComputedPlannedDuration
}

// GetComputedPlannedDurationOk returns a tuple with the ComputedPlannedDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetComputedPlannedDurationOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.ComputedPlannedDuration) {
		return map[string]interface{}{}, false
	}
	return o.ComputedPlannedDuration, true
}

// HasComputedPlannedDuration returns a boolean if a field has been set.
func (o *Task) HasComputedPlannedDuration() bool {
	if o != nil && !isNil(o.ComputedPlannedDuration) {
		return true
	}

	return false
}

// SetComputedPlannedDuration gets a reference to the given map[string]interface{} and assigns it to the ComputedPlannedDuration field.
func (o *Task) SetComputedPlannedDuration(v map[string]interface{}) {
	o.ComputedPlannedDuration = v
}

// GetActualDuration returns the ActualDuration field value if set, zero value otherwise.
func (o *Task) GetActualDuration() map[string]interface{} {
	if o == nil || isNil(o.ActualDuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.ActualDuration
}

// GetActualDurationOk returns a tuple with the ActualDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetActualDurationOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.ActualDuration) {
		return map[string]interface{}{}, false
	}
	return o.ActualDuration, true
}

// HasActualDuration returns a boolean if a field has been set.
func (o *Task) HasActualDuration() bool {
	if o != nil && !isNil(o.ActualDuration) {
		return true
	}

	return false
}

// SetActualDuration gets a reference to the given map[string]interface{} and assigns it to the ActualDuration field.
func (o *Task) SetActualDuration(v map[string]interface{}) {
	o.ActualDuration = v
}

// GetReleaseUid returns the ReleaseUid field value if set, zero value otherwise.
func (o *Task) GetReleaseUid() int32 {
	if o == nil || isNil(o.ReleaseUid) {
		var ret int32
		return ret
	}
	return *o.ReleaseUid
}

// GetReleaseUidOk returns a tuple with the ReleaseUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetReleaseUidOk() (*int32, bool) {
	if o == nil || isNil(o.ReleaseUid) {
		return nil, false
	}
	return o.ReleaseUid, true
}

// HasReleaseUid returns a boolean if a field has been set.
func (o *Task) HasReleaseUid() bool {
	if o != nil && !isNil(o.ReleaseUid) {
		return true
	}

	return false
}

// SetReleaseUid gets a reference to the given int32 and assigns it to the ReleaseUid field.
func (o *Task) SetReleaseUid(v int32) {
	o.ReleaseUid = &v
}

// GetCiUid returns the CiUid field value if set, zero value otherwise.
func (o *Task) GetCiUid() int32 {
	if o == nil || isNil(o.CiUid) {
		var ret int32
		return ret
	}
	return *o.CiUid
}

// GetCiUidOk returns a tuple with the CiUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCiUidOk() (*int32, bool) {
	if o == nil || isNil(o.CiUid) {
		return nil, false
	}
	return o.CiUid, true
}

// HasCiUid returns a boolean if a field has been set.
func (o *Task) HasCiUid() bool {
	if o != nil && !isNil(o.CiUid) {
		return true
	}

	return false
}

// SetCiUid gets a reference to the given int32 and assigns it to the CiUid field.
func (o *Task) SetCiUid(v int32) {
	o.CiUid = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Task) GetComments() []Comment {
	if o == nil || isNil(o.Comments) {
		var ret []Comment
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCommentsOk() ([]Comment, bool) {
	if o == nil || isNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Task) HasComments() bool {
	if o != nil && !isNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []Comment and assigns it to the Comments field.
func (o *Task) SetComments(v []Comment) {
	o.Comments = v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *Task) GetContainer() TaskContainer {
	if o == nil || isNil(o.Container) {
		var ret TaskContainer
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetContainerOk() (*TaskContainer, bool) {
	if o == nil || isNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *Task) HasContainer() bool {
	if o != nil && !isNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given TaskContainer and assigns it to the Container field.
func (o *Task) SetContainer(v TaskContainer) {
	o.Container = &v
}

// GetFacets returns the Facets field value if set, zero value otherwise.
func (o *Task) GetFacets() []Facet {
	if o == nil || isNil(o.Facets) {
		var ret []Facet
		return ret
	}
	return o.Facets
}

// GetFacetsOk returns a tuple with the Facets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFacetsOk() ([]Facet, bool) {
	if o == nil || isNil(o.Facets) {
		return nil, false
	}
	return o.Facets, true
}

// HasFacets returns a boolean if a field has been set.
func (o *Task) HasFacets() bool {
	if o != nil && !isNil(o.Facets) {
		return true
	}

	return false
}

// SetFacets gets a reference to the given []Facet and assigns it to the Facets field.
func (o *Task) SetFacets(v []Facet) {
	o.Facets = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *Task) GetAttachments() []Attachment {
	if o == nil || isNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || isNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *Task) HasAttachments() bool {
	if o != nil && !isNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *Task) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Task) GetStatus() TaskStatus {
	if o == nil || isNil(o.Status) {
		var ret TaskStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStatusOk() (*TaskStatus, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Task) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TaskStatus and assigns it to the Status field.
func (o *Task) SetStatus(v TaskStatus) {
	o.Status = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *Task) GetTeam() string {
	if o == nil || isNil(o.Team) {
		var ret string
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTeamOk() (*string, bool) {
	if o == nil || isNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *Task) HasTeam() bool {
	if o != nil && !isNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given string and assigns it to the Team field.
func (o *Task) SetTeam(v string) {
	o.Team = &v
}

// GetWatchers returns the Watchers field value if set, zero value otherwise.
func (o *Task) GetWatchers() []string {
	if o == nil || isNil(o.Watchers) {
		var ret []string
		return ret
	}
	return o.Watchers
}

// GetWatchersOk returns a tuple with the Watchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetWatchersOk() ([]string, bool) {
	if o == nil || isNil(o.Watchers) {
		return nil, false
	}
	return o.Watchers, true
}

// HasWatchers returns a boolean if a field has been set.
func (o *Task) HasWatchers() bool {
	if o != nil && !isNil(o.Watchers) {
		return true
	}

	return false
}

// SetWatchers gets a reference to the given []string and assigns it to the Watchers field.
func (o *Task) SetWatchers(v []string) {
	o.Watchers = v
}

// GetWaitForScheduledStartDate returns the WaitForScheduledStartDate field value if set, zero value otherwise.
func (o *Task) GetWaitForScheduledStartDate() bool {
	if o == nil || isNil(o.WaitForScheduledStartDate) {
		var ret bool
		return ret
	}
	return *o.WaitForScheduledStartDate
}

// GetWaitForScheduledStartDateOk returns a tuple with the WaitForScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetWaitForScheduledStartDateOk() (*bool, bool) {
	if o == nil || isNil(o.WaitForScheduledStartDate) {
		return nil, false
	}
	return o.WaitForScheduledStartDate, true
}

// HasWaitForScheduledStartDate returns a boolean if a field has been set.
func (o *Task) HasWaitForScheduledStartDate() bool {
	if o != nil && !isNil(o.WaitForScheduledStartDate) {
		return true
	}

	return false
}

// SetWaitForScheduledStartDate gets a reference to the given bool and assigns it to the WaitForScheduledStartDate field.
func (o *Task) SetWaitForScheduledStartDate(v bool) {
	o.WaitForScheduledStartDate = &v
}

// GetDelayDuringBlackout returns the DelayDuringBlackout field value if set, zero value otherwise.
func (o *Task) GetDelayDuringBlackout() bool {
	if o == nil || isNil(o.DelayDuringBlackout) {
		var ret bool
		return ret
	}
	return *o.DelayDuringBlackout
}

// GetDelayDuringBlackoutOk returns a tuple with the DelayDuringBlackout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDelayDuringBlackoutOk() (*bool, bool) {
	if o == nil || isNil(o.DelayDuringBlackout) {
		return nil, false
	}
	return o.DelayDuringBlackout, true
}

// HasDelayDuringBlackout returns a boolean if a field has been set.
func (o *Task) HasDelayDuringBlackout() bool {
	if o != nil && !isNil(o.DelayDuringBlackout) {
		return true
	}

	return false
}

// SetDelayDuringBlackout gets a reference to the given bool and assigns it to the DelayDuringBlackout field.
func (o *Task) SetDelayDuringBlackout(v bool) {
	o.DelayDuringBlackout = &v
}

// GetPostponedDueToBlackout returns the PostponedDueToBlackout field value if set, zero value otherwise.
func (o *Task) GetPostponedDueToBlackout() bool {
	if o == nil || isNil(o.PostponedDueToBlackout) {
		var ret bool
		return ret
	}
	return *o.PostponedDueToBlackout
}

// GetPostponedDueToBlackoutOk returns a tuple with the PostponedDueToBlackout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPostponedDueToBlackoutOk() (*bool, bool) {
	if o == nil || isNil(o.PostponedDueToBlackout) {
		return nil, false
	}
	return o.PostponedDueToBlackout, true
}

// HasPostponedDueToBlackout returns a boolean if a field has been set.
func (o *Task) HasPostponedDueToBlackout() bool {
	if o != nil && !isNil(o.PostponedDueToBlackout) {
		return true
	}

	return false
}

// SetPostponedDueToBlackout gets a reference to the given bool and assigns it to the PostponedDueToBlackout field.
func (o *Task) SetPostponedDueToBlackout(v bool) {
	o.PostponedDueToBlackout = &v
}

// GetPostponedUntilEnvironmentsAreReserved returns the PostponedUntilEnvironmentsAreReserved field value if set, zero value otherwise.
func (o *Task) GetPostponedUntilEnvironmentsAreReserved() bool {
	if o == nil || isNil(o.PostponedUntilEnvironmentsAreReserved) {
		var ret bool
		return ret
	}
	return *o.PostponedUntilEnvironmentsAreReserved
}

// GetPostponedUntilEnvironmentsAreReservedOk returns a tuple with the PostponedUntilEnvironmentsAreReserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPostponedUntilEnvironmentsAreReservedOk() (*bool, bool) {
	if o == nil || isNil(o.PostponedUntilEnvironmentsAreReserved) {
		return nil, false
	}
	return o.PostponedUntilEnvironmentsAreReserved, true
}

// HasPostponedUntilEnvironmentsAreReserved returns a boolean if a field has been set.
func (o *Task) HasPostponedUntilEnvironmentsAreReserved() bool {
	if o != nil && !isNil(o.PostponedUntilEnvironmentsAreReserved) {
		return true
	}

	return false
}

// SetPostponedUntilEnvironmentsAreReserved gets a reference to the given bool and assigns it to the PostponedUntilEnvironmentsAreReserved field.
func (o *Task) SetPostponedUntilEnvironmentsAreReserved(v bool) {
	o.PostponedUntilEnvironmentsAreReserved = &v
}

// GetOriginalScheduledStartDate returns the OriginalScheduledStartDate field value if set, zero value otherwise.
func (o *Task) GetOriginalScheduledStartDate() string {
	if o == nil || isNil(o.OriginalScheduledStartDate) {
		var ret string
		return ret
	}
	return *o.OriginalScheduledStartDate
}

// GetOriginalScheduledStartDateOk returns a tuple with the OriginalScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetOriginalScheduledStartDateOk() (*string, bool) {
	if o == nil || isNil(o.OriginalScheduledStartDate) {
		return nil, false
	}
	return o.OriginalScheduledStartDate, true
}

// HasOriginalScheduledStartDate returns a boolean if a field has been set.
func (o *Task) HasOriginalScheduledStartDate() bool {
	if o != nil && !isNil(o.OriginalScheduledStartDate) {
		return true
	}

	return false
}

// SetOriginalScheduledStartDate gets a reference to the given string and assigns it to the OriginalScheduledStartDate field.
func (o *Task) SetOriginalScheduledStartDate(v string) {
	o.OriginalScheduledStartDate = &v
}

// GetHasBeenFlagged returns the HasBeenFlagged field value if set, zero value otherwise.
func (o *Task) GetHasBeenFlagged() bool {
	if o == nil || isNil(o.HasBeenFlagged) {
		var ret bool
		return ret
	}
	return *o.HasBeenFlagged
}

// GetHasBeenFlaggedOk returns a tuple with the HasBeenFlagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetHasBeenFlaggedOk() (*bool, bool) {
	if o == nil || isNil(o.HasBeenFlagged) {
		return nil, false
	}
	return o.HasBeenFlagged, true
}

// HasHasBeenFlagged returns a boolean if a field has been set.
func (o *Task) HasHasBeenFlagged() bool {
	if o != nil && !isNil(o.HasBeenFlagged) {
		return true
	}

	return false
}

// SetHasBeenFlagged gets a reference to the given bool and assigns it to the HasBeenFlagged field.
func (o *Task) SetHasBeenFlagged(v bool) {
	o.HasBeenFlagged = &v
}

// GetHasBeenDelayed returns the HasBeenDelayed field value if set, zero value otherwise.
func (o *Task) GetHasBeenDelayed() bool {
	if o == nil || isNil(o.HasBeenDelayed) {
		var ret bool
		return ret
	}
	return *o.HasBeenDelayed
}

// GetHasBeenDelayedOk returns a tuple with the HasBeenDelayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetHasBeenDelayedOk() (*bool, bool) {
	if o == nil || isNil(o.HasBeenDelayed) {
		return nil, false
	}
	return o.HasBeenDelayed, true
}

// HasHasBeenDelayed returns a boolean if a field has been set.
func (o *Task) HasHasBeenDelayed() bool {
	if o != nil && !isNil(o.HasBeenDelayed) {
		return true
	}

	return false
}

// SetHasBeenDelayed gets a reference to the given bool and assigns it to the HasBeenDelayed field.
func (o *Task) SetHasBeenDelayed(v bool) {
	o.HasBeenDelayed = &v
}

// GetPrecondition returns the Precondition field value if set, zero value otherwise.
func (o *Task) GetPrecondition() string {
	if o == nil || isNil(o.Precondition) {
		var ret string
		return ret
	}
	return *o.Precondition
}

// GetPreconditionOk returns a tuple with the Precondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPreconditionOk() (*string, bool) {
	if o == nil || isNil(o.Precondition) {
		return nil, false
	}
	return o.Precondition, true
}

// HasPrecondition returns a boolean if a field has been set.
func (o *Task) HasPrecondition() bool {
	if o != nil && !isNil(o.Precondition) {
		return true
	}

	return false
}

// SetPrecondition gets a reference to the given string and assigns it to the Precondition field.
func (o *Task) SetPrecondition(v string) {
	o.Precondition = &v
}

// GetFailureHandler returns the FailureHandler field value if set, zero value otherwise.
func (o *Task) GetFailureHandler() string {
	if o == nil || isNil(o.FailureHandler) {
		var ret string
		return ret
	}
	return *o.FailureHandler
}

// GetFailureHandlerOk returns a tuple with the FailureHandler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFailureHandlerOk() (*string, bool) {
	if o == nil || isNil(o.FailureHandler) {
		return nil, false
	}
	return o.FailureHandler, true
}

// HasFailureHandler returns a boolean if a field has been set.
func (o *Task) HasFailureHandler() bool {
	if o != nil && !isNil(o.FailureHandler) {
		return true
	}

	return false
}

// SetFailureHandler gets a reference to the given string and assigns it to the FailureHandler field.
func (o *Task) SetFailureHandler(v string) {
	o.FailureHandler = &v
}

// GetTaskFailureHandlerEnabled returns the TaskFailureHandlerEnabled field value if set, zero value otherwise.
func (o *Task) GetTaskFailureHandlerEnabled() bool {
	if o == nil || isNil(o.TaskFailureHandlerEnabled) {
		var ret bool
		return ret
	}
	return *o.TaskFailureHandlerEnabled
}

// GetTaskFailureHandlerEnabledOk returns a tuple with the TaskFailureHandlerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTaskFailureHandlerEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.TaskFailureHandlerEnabled) {
		return nil, false
	}
	return o.TaskFailureHandlerEnabled, true
}

// HasTaskFailureHandlerEnabled returns a boolean if a field has been set.
func (o *Task) HasTaskFailureHandlerEnabled() bool {
	if o != nil && !isNil(o.TaskFailureHandlerEnabled) {
		return true
	}

	return false
}

// SetTaskFailureHandlerEnabled gets a reference to the given bool and assigns it to the TaskFailureHandlerEnabled field.
func (o *Task) SetTaskFailureHandlerEnabled(v bool) {
	o.TaskFailureHandlerEnabled = &v
}

// GetTaskRecoverOp returns the TaskRecoverOp field value if set, zero value otherwise.
func (o *Task) GetTaskRecoverOp() TaskRecoverOp {
	if o == nil || isNil(o.TaskRecoverOp) {
		var ret TaskRecoverOp
		return ret
	}
	return *o.TaskRecoverOp
}

// GetTaskRecoverOpOk returns a tuple with the TaskRecoverOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTaskRecoverOpOk() (*TaskRecoverOp, bool) {
	if o == nil || isNil(o.TaskRecoverOp) {
		return nil, false
	}
	return o.TaskRecoverOp, true
}

// HasTaskRecoverOp returns a boolean if a field has been set.
func (o *Task) HasTaskRecoverOp() bool {
	if o != nil && !isNil(o.TaskRecoverOp) {
		return true
	}

	return false
}

// SetTaskRecoverOp gets a reference to the given TaskRecoverOp and assigns it to the TaskRecoverOp field.
func (o *Task) SetTaskRecoverOp(v TaskRecoverOp) {
	o.TaskRecoverOp = &v
}

// GetFailuresCount returns the FailuresCount field value if set, zero value otherwise.
func (o *Task) GetFailuresCount() int32 {
	if o == nil || isNil(o.FailuresCount) {
		var ret int32
		return ret
	}
	return *o.FailuresCount
}

// GetFailuresCountOk returns a tuple with the FailuresCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFailuresCountOk() (*int32, bool) {
	if o == nil || isNil(o.FailuresCount) {
		return nil, false
	}
	return o.FailuresCount, true
}

// HasFailuresCount returns a boolean if a field has been set.
func (o *Task) HasFailuresCount() bool {
	if o != nil && !isNil(o.FailuresCount) {
		return true
	}

	return false
}

// SetFailuresCount gets a reference to the given int32 and assigns it to the FailuresCount field.
func (o *Task) SetFailuresCount(v int32) {
	o.FailuresCount = &v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *Task) GetExecutionId() string {
	if o == nil || isNil(o.ExecutionId) {
		var ret string
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetExecutionIdOk() (*string, bool) {
	if o == nil || isNil(o.ExecutionId) {
		return nil, false
	}
	return o.ExecutionId, true
}

// HasExecutionId returns a boolean if a field has been set.
func (o *Task) HasExecutionId() bool {
	if o != nil && !isNil(o.ExecutionId) {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given string and assigns it to the ExecutionId field.
func (o *Task) SetExecutionId(v string) {
	o.ExecutionId = &v
}

// GetVariableMapping returns the VariableMapping field value if set, zero value otherwise.
func (o *Task) GetVariableMapping() map[string]string {
	if o == nil || isNil(o.VariableMapping) {
		var ret map[string]string
		return ret
	}
	return *o.VariableMapping
}

// GetVariableMappingOk returns a tuple with the VariableMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetVariableMappingOk() (*map[string]string, bool) {
	if o == nil || isNil(o.VariableMapping) {
		return nil, false
	}
	return o.VariableMapping, true
}

// HasVariableMapping returns a boolean if a field has been set.
func (o *Task) HasVariableMapping() bool {
	if o != nil && !isNil(o.VariableMapping) {
		return true
	}

	return false
}

// SetVariableMapping gets a reference to the given map[string]string and assigns it to the VariableMapping field.
func (o *Task) SetVariableMapping(v map[string]string) {
	o.VariableMapping = &v
}

// GetExternalVariableMapping returns the ExternalVariableMapping field value if set, zero value otherwise.
func (o *Task) GetExternalVariableMapping() map[string]string {
	if o == nil || isNil(o.ExternalVariableMapping) {
		var ret map[string]string
		return ret
	}
	return *o.ExternalVariableMapping
}

// GetExternalVariableMappingOk returns a tuple with the ExternalVariableMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetExternalVariableMappingOk() (*map[string]string, bool) {
	if o == nil || isNil(o.ExternalVariableMapping) {
		return nil, false
	}
	return o.ExternalVariableMapping, true
}

// HasExternalVariableMapping returns a boolean if a field has been set.
func (o *Task) HasExternalVariableMapping() bool {
	if o != nil && !isNil(o.ExternalVariableMapping) {
		return true
	}

	return false
}

// SetExternalVariableMapping gets a reference to the given map[string]string and assigns it to the ExternalVariableMapping field.
func (o *Task) SetExternalVariableMapping(v map[string]string) {
	o.ExternalVariableMapping = &v
}

// GetMaxCommentSize returns the MaxCommentSize field value if set, zero value otherwise.
func (o *Task) GetMaxCommentSize() int32 {
	if o == nil || isNil(o.MaxCommentSize) {
		var ret int32
		return ret
	}
	return *o.MaxCommentSize
}

// GetMaxCommentSizeOk returns a tuple with the MaxCommentSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetMaxCommentSizeOk() (*int32, bool) {
	if o == nil || isNil(o.MaxCommentSize) {
		return nil, false
	}
	return o.MaxCommentSize, true
}

// HasMaxCommentSize returns a boolean if a field has been set.
func (o *Task) HasMaxCommentSize() bool {
	if o != nil && !isNil(o.MaxCommentSize) {
		return true
	}

	return false
}

// SetMaxCommentSize gets a reference to the given int32 and assigns it to the MaxCommentSize field.
func (o *Task) SetMaxCommentSize(v int32) {
	o.MaxCommentSize = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Task) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Task) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Task) SetTags(v []string) {
	o.Tags = v
}

// GetConfigurationUri returns the ConfigurationUri field value if set, zero value otherwise.
func (o *Task) GetConfigurationUri() string {
	if o == nil || isNil(o.ConfigurationUri) {
		var ret string
		return ret
	}
	return *o.ConfigurationUri
}

// GetConfigurationUriOk returns a tuple with the ConfigurationUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetConfigurationUriOk() (*string, bool) {
	if o == nil || isNil(o.ConfigurationUri) {
		return nil, false
	}
	return o.ConfigurationUri, true
}

// HasConfigurationUri returns a boolean if a field has been set.
func (o *Task) HasConfigurationUri() bool {
	if o != nil && !isNil(o.ConfigurationUri) {
		return true
	}

	return false
}

// SetConfigurationUri gets a reference to the given string and assigns it to the ConfigurationUri field.
func (o *Task) SetConfigurationUri(v string) {
	o.ConfigurationUri = &v
}

// GetDueSoonNotified returns the DueSoonNotified field value if set, zero value otherwise.
func (o *Task) GetDueSoonNotified() bool {
	if o == nil || isNil(o.DueSoonNotified) {
		var ret bool
		return ret
	}
	return *o.DueSoonNotified
}

// GetDueSoonNotifiedOk returns a tuple with the DueSoonNotified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDueSoonNotifiedOk() (*bool, bool) {
	if o == nil || isNil(o.DueSoonNotified) {
		return nil, false
	}
	return o.DueSoonNotified, true
}

// HasDueSoonNotified returns a boolean if a field has been set.
func (o *Task) HasDueSoonNotified() bool {
	if o != nil && !isNil(o.DueSoonNotified) {
		return true
	}

	return false
}

// SetDueSoonNotified gets a reference to the given bool and assigns it to the DueSoonNotified field.
func (o *Task) SetDueSoonNotified(v bool) {
	o.DueSoonNotified = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *Task) GetLocked() bool {
	if o == nil || isNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetLockedOk() (*bool, bool) {
	if o == nil || isNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *Task) HasLocked() bool {
	if o != nil && !isNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *Task) SetLocked(v bool) {
	o.Locked = &v
}

// GetCheckAttributes returns the CheckAttributes field value if set, zero value otherwise.
func (o *Task) GetCheckAttributes() bool {
	if o == nil || isNil(o.CheckAttributes) {
		var ret bool
		return ret
	}
	return *o.CheckAttributes
}

// GetCheckAttributesOk returns a tuple with the CheckAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCheckAttributesOk() (*bool, bool) {
	if o == nil || isNil(o.CheckAttributes) {
		return nil, false
	}
	return o.CheckAttributes, true
}

// HasCheckAttributes returns a boolean if a field has been set.
func (o *Task) HasCheckAttributes() bool {
	if o != nil && !isNil(o.CheckAttributes) {
		return true
	}

	return false
}

// SetCheckAttributes gets a reference to the given bool and assigns it to the CheckAttributes field.
func (o *Task) SetCheckAttributes(v bool) {
	o.CheckAttributes = &v
}

// GetAbortScript returns the AbortScript field value if set, zero value otherwise.
func (o *Task) GetAbortScript() string {
	if o == nil || isNil(o.AbortScript) {
		var ret string
		return ret
	}
	return *o.AbortScript
}

// GetAbortScriptOk returns a tuple with the AbortScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAbortScriptOk() (*string, bool) {
	if o == nil || isNil(o.AbortScript) {
		return nil, false
	}
	return o.AbortScript, true
}

// HasAbortScript returns a boolean if a field has been set.
func (o *Task) HasAbortScript() bool {
	if o != nil && !isNil(o.AbortScript) {
		return true
	}

	return false
}

// SetAbortScript gets a reference to the given string and assigns it to the AbortScript field.
func (o *Task) SetAbortScript(v string) {
	o.AbortScript = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *Task) GetPhase() Phase {
	if o == nil || isNil(o.Phase) {
		var ret Phase
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPhaseOk() (*Phase, bool) {
	if o == nil || isNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *Task) HasPhase() bool {
	if o != nil && !isNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given Phase and assigns it to the Phase field.
func (o *Task) SetPhase(v Phase) {
	o.Phase = &v
}

// GetBlackoutMetadata returns the BlackoutMetadata field value if set, zero value otherwise.
func (o *Task) GetBlackoutMetadata() BlackoutMetadata {
	if o == nil || isNil(o.BlackoutMetadata) {
		var ret BlackoutMetadata
		return ret
	}
	return *o.BlackoutMetadata
}

// GetBlackoutMetadataOk returns a tuple with the BlackoutMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetBlackoutMetadataOk() (*BlackoutMetadata, bool) {
	if o == nil || isNil(o.BlackoutMetadata) {
		return nil, false
	}
	return o.BlackoutMetadata, true
}

// HasBlackoutMetadata returns a boolean if a field has been set.
func (o *Task) HasBlackoutMetadata() bool {
	if o != nil && !isNil(o.BlackoutMetadata) {
		return true
	}

	return false
}

// SetBlackoutMetadata gets a reference to the given BlackoutMetadata and assigns it to the BlackoutMetadata field.
func (o *Task) SetBlackoutMetadata(v BlackoutMetadata) {
	o.BlackoutMetadata = &v
}

// GetFlaggedCount returns the FlaggedCount field value if set, zero value otherwise.
func (o *Task) GetFlaggedCount() int32 {
	if o == nil || isNil(o.FlaggedCount) {
		var ret int32
		return ret
	}
	return *o.FlaggedCount
}

// GetFlaggedCountOk returns a tuple with the FlaggedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFlaggedCountOk() (*int32, bool) {
	if o == nil || isNil(o.FlaggedCount) {
		return nil, false
	}
	return o.FlaggedCount, true
}

// HasFlaggedCount returns a boolean if a field has been set.
func (o *Task) HasFlaggedCount() bool {
	if o != nil && !isNil(o.FlaggedCount) {
		return true
	}

	return false
}

// SetFlaggedCount gets a reference to the given int32 and assigns it to the FlaggedCount field.
func (o *Task) SetFlaggedCount(v int32) {
	o.FlaggedCount = &v
}

// GetDelayedCount returns the DelayedCount field value if set, zero value otherwise.
func (o *Task) GetDelayedCount() int32 {
	if o == nil || isNil(o.DelayedCount) {
		var ret int32
		return ret
	}
	return *o.DelayedCount
}

// GetDelayedCountOk returns a tuple with the DelayedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDelayedCountOk() (*int32, bool) {
	if o == nil || isNil(o.DelayedCount) {
		return nil, false
	}
	return o.DelayedCount, true
}

// HasDelayedCount returns a boolean if a field has been set.
func (o *Task) HasDelayedCount() bool {
	if o != nil && !isNil(o.DelayedCount) {
		return true
	}

	return false
}

// SetDelayedCount gets a reference to the given int32 and assigns it to the DelayedCount field.
func (o *Task) SetDelayedCount(v int32) {
	o.DelayedCount = &v
}

// GetDone returns the Done field value if set, zero value otherwise.
func (o *Task) GetDone() bool {
	if o == nil || isNil(o.Done) {
		var ret bool
		return ret
	}
	return *o.Done
}

// GetDoneOk returns a tuple with the Done field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDoneOk() (*bool, bool) {
	if o == nil || isNil(o.Done) {
		return nil, false
	}
	return o.Done, true
}

// HasDone returns a boolean if a field has been set.
func (o *Task) HasDone() bool {
	if o != nil && !isNil(o.Done) {
		return true
	}

	return false
}

// SetDone gets a reference to the given bool and assigns it to the Done field.
func (o *Task) SetDone(v bool) {
	o.Done = &v
}

// GetDoneInAdvance returns the DoneInAdvance field value if set, zero value otherwise.
func (o *Task) GetDoneInAdvance() bool {
	if o == nil || isNil(o.DoneInAdvance) {
		var ret bool
		return ret
	}
	return *o.DoneInAdvance
}

// GetDoneInAdvanceOk returns a tuple with the DoneInAdvance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDoneInAdvanceOk() (*bool, bool) {
	if o == nil || isNil(o.DoneInAdvance) {
		return nil, false
	}
	return o.DoneInAdvance, true
}

// HasDoneInAdvance returns a boolean if a field has been set.
func (o *Task) HasDoneInAdvance() bool {
	if o != nil && !isNil(o.DoneInAdvance) {
		return true
	}

	return false
}

// SetDoneInAdvance gets a reference to the given bool and assigns it to the DoneInAdvance field.
func (o *Task) SetDoneInAdvance(v bool) {
	o.DoneInAdvance = &v
}

// GetDefunct returns the Defunct field value if set, zero value otherwise.
func (o *Task) GetDefunct() bool {
	if o == nil || isNil(o.Defunct) {
		var ret bool
		return ret
	}
	return *o.Defunct
}

// GetDefunctOk returns a tuple with the Defunct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDefunctOk() (*bool, bool) {
	if o == nil || isNil(o.Defunct) {
		return nil, false
	}
	return o.Defunct, true
}

// HasDefunct returns a boolean if a field has been set.
func (o *Task) HasDefunct() bool {
	if o != nil && !isNil(o.Defunct) {
		return true
	}

	return false
}

// SetDefunct gets a reference to the given bool and assigns it to the Defunct field.
func (o *Task) SetDefunct(v bool) {
	o.Defunct = &v
}

// GetUpdatable returns the Updatable field value if set, zero value otherwise.
func (o *Task) GetUpdatable() bool {
	if o == nil || isNil(o.Updatable) {
		var ret bool
		return ret
	}
	return *o.Updatable
}

// GetUpdatableOk returns a tuple with the Updatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetUpdatableOk() (*bool, bool) {
	if o == nil || isNil(o.Updatable) {
		return nil, false
	}
	return o.Updatable, true
}

// HasUpdatable returns a boolean if a field has been set.
func (o *Task) HasUpdatable() bool {
	if o != nil && !isNil(o.Updatable) {
		return true
	}

	return false
}

// SetUpdatable gets a reference to the given bool and assigns it to the Updatable field.
func (o *Task) SetUpdatable(v bool) {
	o.Updatable = &v
}

// GetAborted returns the Aborted field value if set, zero value otherwise.
func (o *Task) GetAborted() bool {
	if o == nil || isNil(o.Aborted) {
		var ret bool
		return ret
	}
	return *o.Aborted
}

// GetAbortedOk returns a tuple with the Aborted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAbortedOk() (*bool, bool) {
	if o == nil || isNil(o.Aborted) {
		return nil, false
	}
	return o.Aborted, true
}

// HasAborted returns a boolean if a field has been set.
func (o *Task) HasAborted() bool {
	if o != nil && !isNil(o.Aborted) {
		return true
	}

	return false
}

// SetAborted gets a reference to the given bool and assigns it to the Aborted field.
func (o *Task) SetAborted(v bool) {
	o.Aborted = &v
}

// GetNotYetReached returns the NotYetReached field value if set, zero value otherwise.
func (o *Task) GetNotYetReached() bool {
	if o == nil || isNil(o.NotYetReached) {
		var ret bool
		return ret
	}
	return *o.NotYetReached
}

// GetNotYetReachedOk returns a tuple with the NotYetReached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetNotYetReachedOk() (*bool, bool) {
	if o == nil || isNil(o.NotYetReached) {
		return nil, false
	}
	return o.NotYetReached, true
}

// HasNotYetReached returns a boolean if a field has been set.
func (o *Task) HasNotYetReached() bool {
	if o != nil && !isNil(o.NotYetReached) {
		return true
	}

	return false
}

// SetNotYetReached gets a reference to the given bool and assigns it to the NotYetReached field.
func (o *Task) SetNotYetReached(v bool) {
	o.NotYetReached = &v
}

// GetPlanned returns the Planned field value if set, zero value otherwise.
func (o *Task) GetPlanned() bool {
	if o == nil || isNil(o.Planned) {
		var ret bool
		return ret
	}
	return *o.Planned
}

// GetPlannedOk returns a tuple with the Planned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPlannedOk() (*bool, bool) {
	if o == nil || isNil(o.Planned) {
		return nil, false
	}
	return o.Planned, true
}

// HasPlanned returns a boolean if a field has been set.
func (o *Task) HasPlanned() bool {
	if o != nil && !isNil(o.Planned) {
		return true
	}

	return false
}

// SetPlanned gets a reference to the given bool and assigns it to the Planned field.
func (o *Task) SetPlanned(v bool) {
	o.Planned = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Task) GetActive() bool {
	if o == nil || isNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetActiveOk() (*bool, bool) {
	if o == nil || isNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Task) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Task) SetActive(v bool) {
	o.Active = &v
}

// GetInProgress returns the InProgress field value if set, zero value otherwise.
func (o *Task) GetInProgress() bool {
	if o == nil || isNil(o.InProgress) {
		var ret bool
		return ret
	}
	return *o.InProgress
}

// GetInProgressOk returns a tuple with the InProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetInProgressOk() (*bool, bool) {
	if o == nil || isNil(o.InProgress) {
		return nil, false
	}
	return o.InProgress, true
}

// HasInProgress returns a boolean if a field has been set.
func (o *Task) HasInProgress() bool {
	if o != nil && !isNil(o.InProgress) {
		return true
	}

	return false
}

// SetInProgress gets a reference to the given bool and assigns it to the InProgress field.
func (o *Task) SetInProgress(v bool) {
	o.InProgress = &v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *Task) GetPending() bool {
	if o == nil || isNil(o.Pending) {
		var ret bool
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPendingOk() (*bool, bool) {
	if o == nil || isNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *Task) HasPending() bool {
	if o != nil && !isNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given bool and assigns it to the Pending field.
func (o *Task) SetPending(v bool) {
	o.Pending = &v
}

// GetWaitingForInput returns the WaitingForInput field value if set, zero value otherwise.
func (o *Task) GetWaitingForInput() bool {
	if o == nil || isNil(o.WaitingForInput) {
		var ret bool
		return ret
	}
	return *o.WaitingForInput
}

// GetWaitingForInputOk returns a tuple with the WaitingForInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetWaitingForInputOk() (*bool, bool) {
	if o == nil || isNil(o.WaitingForInput) {
		return nil, false
	}
	return o.WaitingForInput, true
}

// HasWaitingForInput returns a boolean if a field has been set.
func (o *Task) HasWaitingForInput() bool {
	if o != nil && !isNil(o.WaitingForInput) {
		return true
	}

	return false
}

// SetWaitingForInput gets a reference to the given bool and assigns it to the WaitingForInput field.
func (o *Task) SetWaitingForInput(v bool) {
	o.WaitingForInput = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *Task) GetFailed() bool {
	if o == nil || isNil(o.Failed) {
		var ret bool
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFailedOk() (*bool, bool) {
	if o == nil || isNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *Task) HasFailed() bool {
	if o != nil && !isNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given bool and assigns it to the Failed field.
func (o *Task) SetFailed(v bool) {
	o.Failed = &v
}

// GetFailing returns the Failing field value if set, zero value otherwise.
func (o *Task) GetFailing() bool {
	if o == nil || isNil(o.Failing) {
		var ret bool
		return ret
	}
	return *o.Failing
}

// GetFailingOk returns a tuple with the Failing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFailingOk() (*bool, bool) {
	if o == nil || isNil(o.Failing) {
		return nil, false
	}
	return o.Failing, true
}

// HasFailing returns a boolean if a field has been set.
func (o *Task) HasFailing() bool {
	if o != nil && !isNil(o.Failing) {
		return true
	}

	return false
}

// SetFailing gets a reference to the given bool and assigns it to the Failing field.
func (o *Task) SetFailing(v bool) {
	o.Failing = &v
}

// GetCompletedInAdvance returns the CompletedInAdvance field value if set, zero value otherwise.
func (o *Task) GetCompletedInAdvance() bool {
	if o == nil || isNil(o.CompletedInAdvance) {
		var ret bool
		return ret
	}
	return *o.CompletedInAdvance
}

// GetCompletedInAdvanceOk returns a tuple with the CompletedInAdvance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCompletedInAdvanceOk() (*bool, bool) {
	if o == nil || isNil(o.CompletedInAdvance) {
		return nil, false
	}
	return o.CompletedInAdvance, true
}

// HasCompletedInAdvance returns a boolean if a field has been set.
func (o *Task) HasCompletedInAdvance() bool {
	if o != nil && !isNil(o.CompletedInAdvance) {
		return true
	}

	return false
}

// SetCompletedInAdvance gets a reference to the given bool and assigns it to the CompletedInAdvance field.
func (o *Task) SetCompletedInAdvance(v bool) {
	o.CompletedInAdvance = &v
}

// GetSkipped returns the Skipped field value if set, zero value otherwise.
func (o *Task) GetSkipped() bool {
	if o == nil || isNil(o.Skipped) {
		var ret bool
		return ret
	}
	return *o.Skipped
}

// GetSkippedOk returns a tuple with the Skipped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetSkippedOk() (*bool, bool) {
	if o == nil || isNil(o.Skipped) {
		return nil, false
	}
	return o.Skipped, true
}

// HasSkipped returns a boolean if a field has been set.
func (o *Task) HasSkipped() bool {
	if o != nil && !isNil(o.Skipped) {
		return true
	}

	return false
}

// SetSkipped gets a reference to the given bool and assigns it to the Skipped field.
func (o *Task) SetSkipped(v bool) {
	o.Skipped = &v
}

// GetSkippedInAdvance returns the SkippedInAdvance field value if set, zero value otherwise.
func (o *Task) GetSkippedInAdvance() bool {
	if o == nil || isNil(o.SkippedInAdvance) {
		var ret bool
		return ret
	}
	return *o.SkippedInAdvance
}

// GetSkippedInAdvanceOk returns a tuple with the SkippedInAdvance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetSkippedInAdvanceOk() (*bool, bool) {
	if o == nil || isNil(o.SkippedInAdvance) {
		return nil, false
	}
	return o.SkippedInAdvance, true
}

// HasSkippedInAdvance returns a boolean if a field has been set.
func (o *Task) HasSkippedInAdvance() bool {
	if o != nil && !isNil(o.SkippedInAdvance) {
		return true
	}

	return false
}

// SetSkippedInAdvance gets a reference to the given bool and assigns it to the SkippedInAdvance field.
func (o *Task) SetSkippedInAdvance(v bool) {
	o.SkippedInAdvance = &v
}

// GetPreconditionInProgress returns the PreconditionInProgress field value if set, zero value otherwise.
func (o *Task) GetPreconditionInProgress() bool {
	if o == nil || isNil(o.PreconditionInProgress) {
		var ret bool
		return ret
	}
	return *o.PreconditionInProgress
}

// GetPreconditionInProgressOk returns a tuple with the PreconditionInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPreconditionInProgressOk() (*bool, bool) {
	if o == nil || isNil(o.PreconditionInProgress) {
		return nil, false
	}
	return o.PreconditionInProgress, true
}

// HasPreconditionInProgress returns a boolean if a field has been set.
func (o *Task) HasPreconditionInProgress() bool {
	if o != nil && !isNil(o.PreconditionInProgress) {
		return true
	}

	return false
}

// SetPreconditionInProgress gets a reference to the given bool and assigns it to the PreconditionInProgress field.
func (o *Task) SetPreconditionInProgress(v bool) {
	o.PreconditionInProgress = &v
}

// GetFailureHandlerInProgress returns the FailureHandlerInProgress field value if set, zero value otherwise.
func (o *Task) GetFailureHandlerInProgress() bool {
	if o == nil || isNil(o.FailureHandlerInProgress) {
		var ret bool
		return ret
	}
	return *o.FailureHandlerInProgress
}

// GetFailureHandlerInProgressOk returns a tuple with the FailureHandlerInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFailureHandlerInProgressOk() (*bool, bool) {
	if o == nil || isNil(o.FailureHandlerInProgress) {
		return nil, false
	}
	return o.FailureHandlerInProgress, true
}

// HasFailureHandlerInProgress returns a boolean if a field has been set.
func (o *Task) HasFailureHandlerInProgress() bool {
	if o != nil && !isNil(o.FailureHandlerInProgress) {
		return true
	}

	return false
}

// SetFailureHandlerInProgress gets a reference to the given bool and assigns it to the FailureHandlerInProgress field.
func (o *Task) SetFailureHandlerInProgress(v bool) {
	o.FailureHandlerInProgress = &v
}

// GetAbortScriptInProgress returns the AbortScriptInProgress field value if set, zero value otherwise.
func (o *Task) GetAbortScriptInProgress() bool {
	if o == nil || isNil(o.AbortScriptInProgress) {
		var ret bool
		return ret
	}
	return *o.AbortScriptInProgress
}

// GetAbortScriptInProgressOk returns a tuple with the AbortScriptInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAbortScriptInProgressOk() (*bool, bool) {
	if o == nil || isNil(o.AbortScriptInProgress) {
		return nil, false
	}
	return o.AbortScriptInProgress, true
}

// HasAbortScriptInProgress returns a boolean if a field has been set.
func (o *Task) HasAbortScriptInProgress() bool {
	if o != nil && !isNil(o.AbortScriptInProgress) {
		return true
	}

	return false
}

// SetAbortScriptInProgress gets a reference to the given bool and assigns it to the AbortScriptInProgress field.
func (o *Task) SetAbortScriptInProgress(v bool) {
	o.AbortScriptInProgress = &v
}

// GetFacetInProgress returns the FacetInProgress field value if set, zero value otherwise.
func (o *Task) GetFacetInProgress() bool {
	if o == nil || isNil(o.FacetInProgress) {
		var ret bool
		return ret
	}
	return *o.FacetInProgress
}

// GetFacetInProgressOk returns a tuple with the FacetInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFacetInProgressOk() (*bool, bool) {
	if o == nil || isNil(o.FacetInProgress) {
		return nil, false
	}
	return o.FacetInProgress, true
}

// HasFacetInProgress returns a boolean if a field has been set.
func (o *Task) HasFacetInProgress() bool {
	if o != nil && !isNil(o.FacetInProgress) {
		return true
	}

	return false
}

// SetFacetInProgress gets a reference to the given bool and assigns it to the FacetInProgress field.
func (o *Task) SetFacetInProgress(v bool) {
	o.FacetInProgress = &v
}

// GetMovable returns the Movable field value if set, zero value otherwise.
func (o *Task) GetMovable() bool {
	if o == nil || isNil(o.Movable) {
		var ret bool
		return ret
	}
	return *o.Movable
}

// GetMovableOk returns a tuple with the Movable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetMovableOk() (*bool, bool) {
	if o == nil || isNil(o.Movable) {
		return nil, false
	}
	return o.Movable, true
}

// HasMovable returns a boolean if a field has been set.
func (o *Task) HasMovable() bool {
	if o != nil && !isNil(o.Movable) {
		return true
	}

	return false
}

// SetMovable gets a reference to the given bool and assigns it to the Movable field.
func (o *Task) SetMovable(v bool) {
	o.Movable = &v
}

// GetGate returns the Gate field value if set, zero value otherwise.
func (o *Task) GetGate() bool {
	if o == nil || isNil(o.Gate) {
		var ret bool
		return ret
	}
	return *o.Gate
}

// GetGateOk returns a tuple with the Gate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetGateOk() (*bool, bool) {
	if o == nil || isNil(o.Gate) {
		return nil, false
	}
	return o.Gate, true
}

// HasGate returns a boolean if a field has been set.
func (o *Task) HasGate() bool {
	if o != nil && !isNil(o.Gate) {
		return true
	}

	return false
}

// SetGate gets a reference to the given bool and assigns it to the Gate field.
func (o *Task) SetGate(v bool) {
	o.Gate = &v
}

// GetTaskGroup returns the TaskGroup field value if set, zero value otherwise.
func (o *Task) GetTaskGroup() bool {
	if o == nil || isNil(o.TaskGroup) {
		var ret bool
		return ret
	}
	return *o.TaskGroup
}

// GetTaskGroupOk returns a tuple with the TaskGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTaskGroupOk() (*bool, bool) {
	if o == nil || isNil(o.TaskGroup) {
		return nil, false
	}
	return o.TaskGroup, true
}

// HasTaskGroup returns a boolean if a field has been set.
func (o *Task) HasTaskGroup() bool {
	if o != nil && !isNil(o.TaskGroup) {
		return true
	}

	return false
}

// SetTaskGroup gets a reference to the given bool and assigns it to the TaskGroup field.
func (o *Task) SetTaskGroup(v bool) {
	o.TaskGroup = &v
}

// GetParallelGroup returns the ParallelGroup field value if set, zero value otherwise.
func (o *Task) GetParallelGroup() bool {
	if o == nil || isNil(o.ParallelGroup) {
		var ret bool
		return ret
	}
	return *o.ParallelGroup
}

// GetParallelGroupOk returns a tuple with the ParallelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetParallelGroupOk() (*bool, bool) {
	if o == nil || isNil(o.ParallelGroup) {
		return nil, false
	}
	return o.ParallelGroup, true
}

// HasParallelGroup returns a boolean if a field has been set.
func (o *Task) HasParallelGroup() bool {
	if o != nil && !isNil(o.ParallelGroup) {
		return true
	}

	return false
}

// SetParallelGroup gets a reference to the given bool and assigns it to the ParallelGroup field.
func (o *Task) SetParallelGroup(v bool) {
	o.ParallelGroup = &v
}

// GetPreconditionEnabled returns the PreconditionEnabled field value if set, zero value otherwise.
func (o *Task) GetPreconditionEnabled() bool {
	if o == nil || isNil(o.PreconditionEnabled) {
		var ret bool
		return ret
	}
	return *o.PreconditionEnabled
}

// GetPreconditionEnabledOk returns a tuple with the PreconditionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPreconditionEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.PreconditionEnabled) {
		return nil, false
	}
	return o.PreconditionEnabled, true
}

// HasPreconditionEnabled returns a boolean if a field has been set.
func (o *Task) HasPreconditionEnabled() bool {
	if o != nil && !isNil(o.PreconditionEnabled) {
		return true
	}

	return false
}

// SetPreconditionEnabled gets a reference to the given bool and assigns it to the PreconditionEnabled field.
func (o *Task) SetPreconditionEnabled(v bool) {
	o.PreconditionEnabled = &v
}

// GetFailureHandlerEnabled returns the FailureHandlerEnabled field value if set, zero value otherwise.
func (o *Task) GetFailureHandlerEnabled() bool {
	if o == nil || isNil(o.FailureHandlerEnabled) {
		var ret bool
		return ret
	}
	return *o.FailureHandlerEnabled
}

// GetFailureHandlerEnabledOk returns a tuple with the FailureHandlerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFailureHandlerEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.FailureHandlerEnabled) {
		return nil, false
	}
	return o.FailureHandlerEnabled, true
}

// HasFailureHandlerEnabled returns a boolean if a field has been set.
func (o *Task) HasFailureHandlerEnabled() bool {
	if o != nil && !isNil(o.FailureHandlerEnabled) {
		return true
	}

	return false
}

// SetFailureHandlerEnabled gets a reference to the given bool and assigns it to the FailureHandlerEnabled field.
func (o *Task) SetFailureHandlerEnabled(v bool) {
	o.FailureHandlerEnabled = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *Task) GetRelease() Release {
	if o == nil || isNil(o.Release) {
		var ret Release
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetReleaseOk() (*Release, bool) {
	if o == nil || isNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *Task) HasRelease() bool {
	if o != nil && !isNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given Release and assigns it to the Release field.
func (o *Task) SetRelease(v Release) {
	o.Release = &v
}

// GetDisplayPath returns the DisplayPath field value if set, zero value otherwise.
func (o *Task) GetDisplayPath() string {
	if o == nil || isNil(o.DisplayPath) {
		var ret string
		return ret
	}
	return *o.DisplayPath
}

// GetDisplayPathOk returns a tuple with the DisplayPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDisplayPathOk() (*string, bool) {
	if o == nil || isNil(o.DisplayPath) {
		return nil, false
	}
	return o.DisplayPath, true
}

// HasDisplayPath returns a boolean if a field has been set.
func (o *Task) HasDisplayPath() bool {
	if o != nil && !isNil(o.DisplayPath) {
		return true
	}

	return false
}

// SetDisplayPath gets a reference to the given string and assigns it to the DisplayPath field.
func (o *Task) SetDisplayPath(v string) {
	o.DisplayPath = &v
}

// GetReleaseOwner returns the ReleaseOwner field value if set, zero value otherwise.
func (o *Task) GetReleaseOwner() string {
	if o == nil || isNil(o.ReleaseOwner) {
		var ret string
		return ret
	}
	return *o.ReleaseOwner
}

// GetReleaseOwnerOk returns a tuple with the ReleaseOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetReleaseOwnerOk() (*string, bool) {
	if o == nil || isNil(o.ReleaseOwner) {
		return nil, false
	}
	return o.ReleaseOwner, true
}

// HasReleaseOwner returns a boolean if a field has been set.
func (o *Task) HasReleaseOwner() bool {
	if o != nil && !isNil(o.ReleaseOwner) {
		return true
	}

	return false
}

// SetReleaseOwner gets a reference to the given string and assigns it to the ReleaseOwner field.
func (o *Task) SetReleaseOwner(v string) {
	o.ReleaseOwner = &v
}

// GetAllTasks returns the AllTasks field value if set, zero value otherwise.
func (o *Task) GetAllTasks() []Task {
	if o == nil || isNil(o.AllTasks) {
		var ret []Task
		return ret
	}
	return o.AllTasks
}

// GetAllTasksOk returns a tuple with the AllTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAllTasksOk() ([]Task, bool) {
	if o == nil || isNil(o.AllTasks) {
		return nil, false
	}
	return o.AllTasks, true
}

// HasAllTasks returns a boolean if a field has been set.
func (o *Task) HasAllTasks() bool {
	if o != nil && !isNil(o.AllTasks) {
		return true
	}

	return false
}

// SetAllTasks gets a reference to the given []Task and assigns it to the AllTasks field.
func (o *Task) SetAllTasks(v []Task) {
	o.AllTasks = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *Task) GetChildren() []PlanItem {
	if o == nil || isNil(o.Children) {
		var ret []PlanItem
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetChildrenOk() ([]PlanItem, bool) {
	if o == nil || isNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Task) HasChildren() bool {
	if o != nil && !isNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []PlanItem and assigns it to the Children field.
func (o *Task) SetChildren(v []PlanItem) {
	o.Children = v
}

// GetVariableUsages returns the VariableUsages field value if set, zero value otherwise.
func (o *Task) GetVariableUsages() []UsagePoint {
	if o == nil || isNil(o.VariableUsages) {
		var ret []UsagePoint
		return ret
	}
	return o.VariableUsages
}

// GetVariableUsagesOk returns a tuple with the VariableUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetVariableUsagesOk() ([]UsagePoint, bool) {
	if o == nil || isNil(o.VariableUsages) {
		return nil, false
	}
	return o.VariableUsages, true
}

// HasVariableUsages returns a boolean if a field has been set.
func (o *Task) HasVariableUsages() bool {
	if o != nil && !isNil(o.VariableUsages) {
		return true
	}

	return false
}

// SetVariableUsages gets a reference to the given []UsagePoint and assigns it to the VariableUsages field.
func (o *Task) SetVariableUsages(v []UsagePoint) {
	o.VariableUsages = v
}

// GetInputVariables returns the InputVariables field value if set, zero value otherwise.
func (o *Task) GetInputVariables() []Variable {
	if o == nil || isNil(o.InputVariables) {
		var ret []Variable
		return ret
	}
	return o.InputVariables
}

// GetInputVariablesOk returns a tuple with the InputVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetInputVariablesOk() ([]Variable, bool) {
	if o == nil || isNil(o.InputVariables) {
		return nil, false
	}
	return o.InputVariables, true
}

// HasInputVariables returns a boolean if a field has been set.
func (o *Task) HasInputVariables() bool {
	if o != nil && !isNil(o.InputVariables) {
		return true
	}

	return false
}

// SetInputVariables gets a reference to the given []Variable and assigns it to the InputVariables field.
func (o *Task) SetInputVariables(v []Variable) {
	o.InputVariables = v
}

// GetReferencedVariables returns the ReferencedVariables field value if set, zero value otherwise.
func (o *Task) GetReferencedVariables() []Variable {
	if o == nil || isNil(o.ReferencedVariables) {
		var ret []Variable
		return ret
	}
	return o.ReferencedVariables
}

// GetReferencedVariablesOk returns a tuple with the ReferencedVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetReferencedVariablesOk() ([]Variable, bool) {
	if o == nil || isNil(o.ReferencedVariables) {
		return nil, false
	}
	return o.ReferencedVariables, true
}

// HasReferencedVariables returns a boolean if a field has been set.
func (o *Task) HasReferencedVariables() bool {
	if o != nil && !isNil(o.ReferencedVariables) {
		return true
	}

	return false
}

// SetReferencedVariables gets a reference to the given []Variable and assigns it to the ReferencedVariables field.
func (o *Task) SetReferencedVariables(v []Variable) {
	o.ReferencedVariables = v
}

// GetUnboundRequiredVariables returns the UnboundRequiredVariables field value if set, zero value otherwise.
func (o *Task) GetUnboundRequiredVariables() []string {
	if o == nil || isNil(o.UnboundRequiredVariables) {
		var ret []string
		return ret
	}
	return o.UnboundRequiredVariables
}

// GetUnboundRequiredVariablesOk returns a tuple with the UnboundRequiredVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetUnboundRequiredVariablesOk() ([]string, bool) {
	if o == nil || isNil(o.UnboundRequiredVariables) {
		return nil, false
	}
	return o.UnboundRequiredVariables, true
}

// HasUnboundRequiredVariables returns a boolean if a field has been set.
func (o *Task) HasUnboundRequiredVariables() bool {
	if o != nil && !isNil(o.UnboundRequiredVariables) {
		return true
	}

	return false
}

// SetUnboundRequiredVariables gets a reference to the given []string and assigns it to the UnboundRequiredVariables field.
func (o *Task) SetUnboundRequiredVariables(v []string) {
	o.UnboundRequiredVariables = v
}

// GetAutomated returns the Automated field value if set, zero value otherwise.
func (o *Task) GetAutomated() bool {
	if o == nil || isNil(o.Automated) {
		var ret bool
		return ret
	}
	return *o.Automated
}

// GetAutomatedOk returns a tuple with the Automated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAutomatedOk() (*bool, bool) {
	if o == nil || isNil(o.Automated) {
		return nil, false
	}
	return o.Automated, true
}

// HasAutomated returns a boolean if a field has been set.
func (o *Task) HasAutomated() bool {
	if o != nil && !isNil(o.Automated) {
		return true
	}

	return false
}

// SetAutomated gets a reference to the given bool and assigns it to the Automated field.
func (o *Task) SetAutomated(v bool) {
	o.Automated = &v
}

// GetTaskType returns the TaskType field value if set, zero value otherwise.
func (o *Task) GetTaskType() map[string]interface{} {
	if o == nil || isNil(o.TaskType) {
		var ret map[string]interface{}
		return ret
	}
	return o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTaskTypeOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.TaskType) {
		return map[string]interface{}{}, false
	}
	return o.TaskType, true
}

// HasTaskType returns a boolean if a field has been set.
func (o *Task) HasTaskType() bool {
	if o != nil && !isNil(o.TaskType) {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given map[string]interface{} and assigns it to the TaskType field.
func (o *Task) SetTaskType(v map[string]interface{}) {
	o.TaskType = v
}

// GetDueSoon returns the DueSoon field value if set, zero value otherwise.
func (o *Task) GetDueSoon() bool {
	if o == nil || isNil(o.DueSoon) {
		var ret bool
		return ret
	}
	return *o.DueSoon
}

// GetDueSoonOk returns a tuple with the DueSoon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDueSoonOk() (*bool, bool) {
	if o == nil || isNil(o.DueSoon) {
		return nil, false
	}
	return o.DueSoon, true
}

// HasDueSoon returns a boolean if a field has been set.
func (o *Task) HasDueSoon() bool {
	if o != nil && !isNil(o.DueSoon) {
		return true
	}

	return false
}

// SetDueSoon gets a reference to the given bool and assigns it to the DueSoon field.
func (o *Task) SetDueSoon(v bool) {
	o.DueSoon = &v
}

// GetElapsedDurationFraction returns the ElapsedDurationFraction field value if set, zero value otherwise.
func (o *Task) GetElapsedDurationFraction() float64 {
	if o == nil || isNil(o.ElapsedDurationFraction) {
		var ret float64
		return ret
	}
	return *o.ElapsedDurationFraction
}

// GetElapsedDurationFractionOk returns a tuple with the ElapsedDurationFraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetElapsedDurationFractionOk() (*float64, bool) {
	if o == nil || isNil(o.ElapsedDurationFraction) {
		return nil, false
	}
	return o.ElapsedDurationFraction, true
}

// HasElapsedDurationFraction returns a boolean if a field has been set.
func (o *Task) HasElapsedDurationFraction() bool {
	if o != nil && !isNil(o.ElapsedDurationFraction) {
		return true
	}

	return false
}

// SetElapsedDurationFraction gets a reference to the given float64 and assigns it to the ElapsedDurationFraction field.
func (o *Task) SetElapsedDurationFraction(v float64) {
	o.ElapsedDurationFraction = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Task) GetUrl() string {
	if o == nil || isNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetUrlOk() (*string, bool) {
	if o == nil || isNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Task) HasUrl() bool {
	if o != nil && !isNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Task) SetUrl(v string) {
	o.Url = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ScheduledStartDate) {
		toSerialize["scheduledStartDate"] = o.ScheduledStartDate
	}
	if !isNil(o.FlagStatus) {
		toSerialize["flagStatus"] = o.FlagStatus
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !isNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !isNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !isNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !isNil(o.PlannedDuration) {
		toSerialize["plannedDuration"] = o.PlannedDuration
	}
	if !isNil(o.FlagComment) {
		toSerialize["flagComment"] = o.FlagComment
	}
	if !isNil(o.OverdueNotified) {
		toSerialize["overdueNotified"] = o.OverdueNotified
	}
	if !isNil(o.Flagged) {
		toSerialize["flagged"] = o.Flagged
	}
	if !isNil(o.StartOrScheduledDate) {
		toSerialize["startOrScheduledDate"] = o.StartOrScheduledDate
	}
	if !isNil(o.EndOrDueDate) {
		toSerialize["endOrDueDate"] = o.EndOrDueDate
	}
	if !isNil(o.Overdue) {
		toSerialize["overdue"] = o.Overdue
	}
	if o.OrCalculateDueDate.IsSet() {
		toSerialize["orCalculateDueDate"] = o.OrCalculateDueDate.Get()
	}
	if !isNil(o.ComputedPlannedDuration) {
		toSerialize["computedPlannedDuration"] = o.ComputedPlannedDuration
	}
	if !isNil(o.ActualDuration) {
		toSerialize["actualDuration"] = o.ActualDuration
	}
	if !isNil(o.ReleaseUid) {
		toSerialize["releaseUid"] = o.ReleaseUid
	}
	if !isNil(o.CiUid) {
		toSerialize["ciUid"] = o.CiUid
	}
	if !isNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !isNil(o.Container) {
		toSerialize["container"] = o.Container
	}
	if !isNil(o.Facets) {
		toSerialize["facets"] = o.Facets
	}
	if !isNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if !isNil(o.Watchers) {
		toSerialize["watchers"] = o.Watchers
	}
	if !isNil(o.WaitForScheduledStartDate) {
		toSerialize["waitForScheduledStartDate"] = o.WaitForScheduledStartDate
	}
	if !isNil(o.DelayDuringBlackout) {
		toSerialize["delayDuringBlackout"] = o.DelayDuringBlackout
	}
	if !isNil(o.PostponedDueToBlackout) {
		toSerialize["postponedDueToBlackout"] = o.PostponedDueToBlackout
	}
	if !isNil(o.PostponedUntilEnvironmentsAreReserved) {
		toSerialize["postponedUntilEnvironmentsAreReserved"] = o.PostponedUntilEnvironmentsAreReserved
	}
	if !isNil(o.OriginalScheduledStartDate) {
		toSerialize["originalScheduledStartDate"] = o.OriginalScheduledStartDate
	}
	if !isNil(o.HasBeenFlagged) {
		toSerialize["hasBeenFlagged"] = o.HasBeenFlagged
	}
	if !isNil(o.HasBeenDelayed) {
		toSerialize["hasBeenDelayed"] = o.HasBeenDelayed
	}
	if !isNil(o.Precondition) {
		toSerialize["precondition"] = o.Precondition
	}
	if !isNil(o.FailureHandler) {
		toSerialize["failureHandler"] = o.FailureHandler
	}
	if !isNil(o.TaskFailureHandlerEnabled) {
		toSerialize["taskFailureHandlerEnabled"] = o.TaskFailureHandlerEnabled
	}
	if !isNil(o.TaskRecoverOp) {
		toSerialize["taskRecoverOp"] = o.TaskRecoverOp
	}
	if !isNil(o.FailuresCount) {
		toSerialize["failuresCount"] = o.FailuresCount
	}
	if !isNil(o.ExecutionId) {
		toSerialize["executionId"] = o.ExecutionId
	}
	if !isNil(o.VariableMapping) {
		toSerialize["variableMapping"] = o.VariableMapping
	}
	if !isNil(o.ExternalVariableMapping) {
		toSerialize["externalVariableMapping"] = o.ExternalVariableMapping
	}
	if !isNil(o.MaxCommentSize) {
		toSerialize["maxCommentSize"] = o.MaxCommentSize
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !isNil(o.ConfigurationUri) {
		toSerialize["configurationUri"] = o.ConfigurationUri
	}
	if !isNil(o.DueSoonNotified) {
		toSerialize["dueSoonNotified"] = o.DueSoonNotified
	}
	if !isNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !isNil(o.CheckAttributes) {
		toSerialize["checkAttributes"] = o.CheckAttributes
	}
	if !isNil(o.AbortScript) {
		toSerialize["abortScript"] = o.AbortScript
	}
	if !isNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !isNil(o.BlackoutMetadata) {
		toSerialize["blackoutMetadata"] = o.BlackoutMetadata
	}
	if !isNil(o.FlaggedCount) {
		toSerialize["flaggedCount"] = o.FlaggedCount
	}
	if !isNil(o.DelayedCount) {
		toSerialize["delayedCount"] = o.DelayedCount
	}
	if !isNil(o.Done) {
		toSerialize["done"] = o.Done
	}
	if !isNil(o.DoneInAdvance) {
		toSerialize["doneInAdvance"] = o.DoneInAdvance
	}
	if !isNil(o.Defunct) {
		toSerialize["defunct"] = o.Defunct
	}
	if !isNil(o.Updatable) {
		toSerialize["updatable"] = o.Updatable
	}
	if !isNil(o.Aborted) {
		toSerialize["aborted"] = o.Aborted
	}
	if !isNil(o.NotYetReached) {
		toSerialize["notYetReached"] = o.NotYetReached
	}
	if !isNil(o.Planned) {
		toSerialize["planned"] = o.Planned
	}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.InProgress) {
		toSerialize["inProgress"] = o.InProgress
	}
	if !isNil(o.Pending) {
		toSerialize["pending"] = o.Pending
	}
	if !isNil(o.WaitingForInput) {
		toSerialize["waitingForInput"] = o.WaitingForInput
	}
	if !isNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	if !isNil(o.Failing) {
		toSerialize["failing"] = o.Failing
	}
	if !isNil(o.CompletedInAdvance) {
		toSerialize["completedInAdvance"] = o.CompletedInAdvance
	}
	if !isNil(o.Skipped) {
		toSerialize["skipped"] = o.Skipped
	}
	if !isNil(o.SkippedInAdvance) {
		toSerialize["skippedInAdvance"] = o.SkippedInAdvance
	}
	if !isNil(o.PreconditionInProgress) {
		toSerialize["preconditionInProgress"] = o.PreconditionInProgress
	}
	if !isNil(o.FailureHandlerInProgress) {
		toSerialize["failureHandlerInProgress"] = o.FailureHandlerInProgress
	}
	if !isNil(o.AbortScriptInProgress) {
		toSerialize["abortScriptInProgress"] = o.AbortScriptInProgress
	}
	if !isNil(o.FacetInProgress) {
		toSerialize["facetInProgress"] = o.FacetInProgress
	}
	if !isNil(o.Movable) {
		toSerialize["movable"] = o.Movable
	}
	if !isNil(o.Gate) {
		toSerialize["gate"] = o.Gate
	}
	if !isNil(o.TaskGroup) {
		toSerialize["taskGroup"] = o.TaskGroup
	}
	if !isNil(o.ParallelGroup) {
		toSerialize["parallelGroup"] = o.ParallelGroup
	}
	if !isNil(o.PreconditionEnabled) {
		toSerialize["preconditionEnabled"] = o.PreconditionEnabled
	}
	if !isNil(o.FailureHandlerEnabled) {
		toSerialize["failureHandlerEnabled"] = o.FailureHandlerEnabled
	}
	if !isNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !isNil(o.DisplayPath) {
		toSerialize["displayPath"] = o.DisplayPath
	}
	if !isNil(o.ReleaseOwner) {
		toSerialize["releaseOwner"] = o.ReleaseOwner
	}
	if !isNil(o.AllTasks) {
		toSerialize["allTasks"] = o.AllTasks
	}
	if !isNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !isNil(o.VariableUsages) {
		toSerialize["variableUsages"] = o.VariableUsages
	}
	if !isNil(o.InputVariables) {
		toSerialize["inputVariables"] = o.InputVariables
	}
	if !isNil(o.ReferencedVariables) {
		toSerialize["referencedVariables"] = o.ReferencedVariables
	}
	if !isNil(o.UnboundRequiredVariables) {
		toSerialize["unboundRequiredVariables"] = o.UnboundRequiredVariables
	}
	if !isNil(o.Automated) {
		toSerialize["automated"] = o.Automated
	}
	if !isNil(o.TaskType) {
		toSerialize["taskType"] = o.TaskType
	}
	if !isNil(o.DueSoon) {
		toSerialize["dueSoon"] = o.DueSoon
	}
	if !isNil(o.ElapsedDurationFraction) {
		toSerialize["elapsedDurationFraction"] = o.ElapsedDurationFraction
	}
	if !isNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


