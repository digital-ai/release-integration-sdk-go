/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateRelease type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRelease{}

// CreateRelease struct for CreateRelease
type CreateRelease struct {
	ReleaseTitle *string `json:"releaseTitle,omitempty"`
	FolderId *string `json:"folderId,omitempty"`
	Variables map[string]map[string]interface{} `json:"variables,omitempty"`
	ReleaseVariables *map[string]string `json:"releaseVariables,omitempty"`
	ReleasePasswordVariables *map[string]string `json:"releasePasswordVariables,omitempty"`
	ScheduledStartDate *string `json:"scheduledStartDate,omitempty"`
	AutoStart *bool `json:"autoStart,omitempty"`
	StartedFromTaskId *string `json:"startedFromTaskId,omitempty"`
	ReleaseOwner *string `json:"releaseOwner,omitempty"`
}

// NewCreateRelease instantiates a new CreateRelease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRelease() *CreateRelease {
	this := CreateRelease{}
	return &this
}

// NewCreateReleaseWithDefaults instantiates a new CreateRelease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateReleaseWithDefaults() *CreateRelease {
	this := CreateRelease{}
	return &this
}

// GetReleaseTitle returns the ReleaseTitle field value if set, zero value otherwise.
func (o *CreateRelease) GetReleaseTitle() string {
	if o == nil || isNil(o.ReleaseTitle) {
		var ret string
		return ret
	}
	return *o.ReleaseTitle
}

// GetReleaseTitleOk returns a tuple with the ReleaseTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRelease) GetReleaseTitleOk() (*string, bool) {
	if o == nil || isNil(o.ReleaseTitle) {
		return nil, false
	}
	return o.ReleaseTitle, true
}

// HasReleaseTitle returns a boolean if a field has been set.
func (o *CreateRelease) HasReleaseTitle() bool {
	if o != nil && !isNil(o.ReleaseTitle) {
		return true
	}

	return false
}

// SetReleaseTitle gets a reference to the given string and assigns it to the ReleaseTitle field.
func (o *CreateRelease) SetReleaseTitle(v string) {
	o.ReleaseTitle = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *CreateRelease) GetFolderId() string {
	if o == nil || isNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRelease) GetFolderIdOk() (*string, bool) {
	if o == nil || isNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *CreateRelease) HasFolderId() bool {
	if o != nil && !isNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *CreateRelease) SetFolderId(v string) {
	o.FolderId = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *CreateRelease) GetVariables() map[string]map[string]interface{} {
	if o == nil || isNil(o.Variables) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRelease) GetVariablesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.Variables) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *CreateRelease) HasVariables() bool {
	if o != nil && !isNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]map[string]interface{} and assigns it to the Variables field.
func (o *CreateRelease) SetVariables(v map[string]map[string]interface{}) {
	o.Variables = v
}

// GetReleaseVariables returns the ReleaseVariables field value if set, zero value otherwise.
func (o *CreateRelease) GetReleaseVariables() map[string]string {
	if o == nil || isNil(o.ReleaseVariables) {
		var ret map[string]string
		return ret
	}
	return *o.ReleaseVariables
}

// GetReleaseVariablesOk returns a tuple with the ReleaseVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRelease) GetReleaseVariablesOk() (*map[string]string, bool) {
	if o == nil || isNil(o.ReleaseVariables) {
		return nil, false
	}
	return o.ReleaseVariables, true
}

// HasReleaseVariables returns a boolean if a field has been set.
func (o *CreateRelease) HasReleaseVariables() bool {
	if o != nil && !isNil(o.ReleaseVariables) {
		return true
	}

	return false
}

// SetReleaseVariables gets a reference to the given map[string]string and assigns it to the ReleaseVariables field.
func (o *CreateRelease) SetReleaseVariables(v map[string]string) {
	o.ReleaseVariables = &v
}

// GetReleasePasswordVariables returns the ReleasePasswordVariables field value if set, zero value otherwise.
func (o *CreateRelease) GetReleasePasswordVariables() map[string]string {
	if o == nil || isNil(o.ReleasePasswordVariables) {
		var ret map[string]string
		return ret
	}
	return *o.ReleasePasswordVariables
}

// GetReleasePasswordVariablesOk returns a tuple with the ReleasePasswordVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRelease) GetReleasePasswordVariablesOk() (*map[string]string, bool) {
	if o == nil || isNil(o.ReleasePasswordVariables) {
		return nil, false
	}
	return o.ReleasePasswordVariables, true
}

// HasReleasePasswordVariables returns a boolean if a field has been set.
func (o *CreateRelease) HasReleasePasswordVariables() bool {
	if o != nil && !isNil(o.ReleasePasswordVariables) {
		return true
	}

	return false
}

// SetReleasePasswordVariables gets a reference to the given map[string]string and assigns it to the ReleasePasswordVariables field.
func (o *CreateRelease) SetReleasePasswordVariables(v map[string]string) {
	o.ReleasePasswordVariables = &v
}

// GetScheduledStartDate returns the ScheduledStartDate field value if set, zero value otherwise.
func (o *CreateRelease) GetScheduledStartDate() string {
	if o == nil || isNil(o.ScheduledStartDate) {
		var ret string
		return ret
	}
	return *o.ScheduledStartDate
}

// GetScheduledStartDateOk returns a tuple with the ScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRelease) GetScheduledStartDateOk() (*string, bool) {
	if o == nil || isNil(o.ScheduledStartDate) {
		return nil, false
	}
	return o.ScheduledStartDate, true
}

// HasScheduledStartDate returns a boolean if a field has been set.
func (o *CreateRelease) HasScheduledStartDate() bool {
	if o != nil && !isNil(o.ScheduledStartDate) {
		return true
	}

	return false
}

// SetScheduledStartDate gets a reference to the given string and assigns it to the ScheduledStartDate field.
func (o *CreateRelease) SetScheduledStartDate(v string) {
	o.ScheduledStartDate = &v
}

// GetAutoStart returns the AutoStart field value if set, zero value otherwise.
func (o *CreateRelease) GetAutoStart() bool {
	if o == nil || isNil(o.AutoStart) {
		var ret bool
		return ret
	}
	return *o.AutoStart
}

// GetAutoStartOk returns a tuple with the AutoStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRelease) GetAutoStartOk() (*bool, bool) {
	if o == nil || isNil(o.AutoStart) {
		return nil, false
	}
	return o.AutoStart, true
}

// HasAutoStart returns a boolean if a field has been set.
func (o *CreateRelease) HasAutoStart() bool {
	if o != nil && !isNil(o.AutoStart) {
		return true
	}

	return false
}

// SetAutoStart gets a reference to the given bool and assigns it to the AutoStart field.
func (o *CreateRelease) SetAutoStart(v bool) {
	o.AutoStart = &v
}

// GetStartedFromTaskId returns the StartedFromTaskId field value if set, zero value otherwise.
func (o *CreateRelease) GetStartedFromTaskId() string {
	if o == nil || isNil(o.StartedFromTaskId) {
		var ret string
		return ret
	}
	return *o.StartedFromTaskId
}

// GetStartedFromTaskIdOk returns a tuple with the StartedFromTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRelease) GetStartedFromTaskIdOk() (*string, bool) {
	if o == nil || isNil(o.StartedFromTaskId) {
		return nil, false
	}
	return o.StartedFromTaskId, true
}

// HasStartedFromTaskId returns a boolean if a field has been set.
func (o *CreateRelease) HasStartedFromTaskId() bool {
	if o != nil && !isNil(o.StartedFromTaskId) {
		return true
	}

	return false
}

// SetStartedFromTaskId gets a reference to the given string and assigns it to the StartedFromTaskId field.
func (o *CreateRelease) SetStartedFromTaskId(v string) {
	o.StartedFromTaskId = &v
}

// GetReleaseOwner returns the ReleaseOwner field value if set, zero value otherwise.
func (o *CreateRelease) GetReleaseOwner() string {
	if o == nil || isNil(o.ReleaseOwner) {
		var ret string
		return ret
	}
	return *o.ReleaseOwner
}

// GetReleaseOwnerOk returns a tuple with the ReleaseOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRelease) GetReleaseOwnerOk() (*string, bool) {
	if o == nil || isNil(o.ReleaseOwner) {
		return nil, false
	}
	return o.ReleaseOwner, true
}

// HasReleaseOwner returns a boolean if a field has been set.
func (o *CreateRelease) HasReleaseOwner() bool {
	if o != nil && !isNil(o.ReleaseOwner) {
		return true
	}

	return false
}

// SetReleaseOwner gets a reference to the given string and assigns it to the ReleaseOwner field.
func (o *CreateRelease) SetReleaseOwner(v string) {
	o.ReleaseOwner = &v
}

func (o CreateRelease) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRelease) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ReleaseTitle) {
		toSerialize["releaseTitle"] = o.ReleaseTitle
	}
	if !isNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !isNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !isNil(o.ReleaseVariables) {
		toSerialize["releaseVariables"] = o.ReleaseVariables
	}
	if !isNil(o.ReleasePasswordVariables) {
		toSerialize["releasePasswordVariables"] = o.ReleasePasswordVariables
	}
	if !isNil(o.ScheduledStartDate) {
		toSerialize["scheduledStartDate"] = o.ScheduledStartDate
	}
	if !isNil(o.AutoStart) {
		toSerialize["autoStart"] = o.AutoStart
	}
	if !isNil(o.StartedFromTaskId) {
		toSerialize["startedFromTaskId"] = o.StartedFromTaskId
	}
	if !isNil(o.ReleaseOwner) {
		toSerialize["releaseOwner"] = o.ReleaseOwner
	}
	return toSerialize, nil
}

type NullableCreateRelease struct {
	value *CreateRelease
	isSet bool
}

func (v NullableCreateRelease) Get() *CreateRelease {
	return v.value
}

func (v *NullableCreateRelease) Set(val *CreateRelease) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRelease(val *CreateRelease) *NullableCreateRelease {
	return &NullableCreateRelease{value: val, isSet: true}
}

func (v NullableCreateRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


