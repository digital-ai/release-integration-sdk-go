/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FacetScope the model 'FacetScope'
type FacetScope string

// List of FacetScope
const (
	TASK FacetScope = "TASK"
)

// All allowed values of FacetScope enum
var AllowedFacetScopeEnumValues = []FacetScope{
	"TASK",
}

func (v *FacetScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FacetScope(value)
	for _, existing := range AllowedFacetScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FacetScope", value)
}

// NewFacetScopeFromValue returns a pointer to a valid FacetScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFacetScopeFromValue(v string) (*FacetScope, error) {
	ev := FacetScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FacetScope: valid values are %v", v, AllowedFacetScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FacetScope) IsValid() bool {
	for _, existing := range AllowedFacetScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FacetScope value
func (v FacetScope) Ptr() *FacetScope {
	return &v
}

type NullableFacetScope struct {
	value *FacetScope
	isSet bool
}

func (v NullableFacetScope) Get() *FacetScope {
	return v.value
}

func (v *NullableFacetScope) Set(val *FacetScope) {
	v.value = val
	v.isSet = true
}

func (v NullableFacetScope) IsSet() bool {
	return v.isSet
}

func (v *NullableFacetScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacetScope(val *FacetScope) *NullableFacetScope {
	return &NullableFacetScope{value: val, isSet: true}
}

func (v NullableFacetScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacetScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

