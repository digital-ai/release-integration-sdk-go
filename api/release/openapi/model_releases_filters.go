/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ReleasesFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleasesFilters{}

// ReleasesFilters struct for ReleasesFilters
type ReleasesFilters struct {
	Title                    *string                   `json:"title,omitempty"`
	Tags                     []string                  `json:"tags,omitempty"`
	TaskTags                 []string                  `json:"taskTags,omitempty"`
	TimeFrame                *TimeFrame                `json:"timeFrame,omitempty"`
	From                     *time.Time                `json:"from,omitempty"`
	To                       *time.Time                `json:"to,omitempty"`
	Active                   *bool                     `json:"active,omitempty"`
	Planned                  *bool                     `json:"planned,omitempty"`
	InProgress               *bool                     `json:"inProgress,omitempty"`
	Paused                   *bool                     `json:"paused,omitempty"`
	Failing                  *bool                     `json:"failing,omitempty"`
	Failed                   *bool                     `json:"failed,omitempty"`
	Inactive                 *bool                     `json:"inactive,omitempty"`
	Completed                *bool                     `json:"completed,omitempty"`
	Aborted                  *bool                     `json:"aborted,omitempty"`
	OnlyMine                 *bool                     `json:"onlyMine,omitempty"`
	OnlyFlagged              *bool                     `json:"onlyFlagged,omitempty"`
	OnlyArchived             *bool                     `json:"onlyArchived,omitempty"`
	ParentId                 *string                   `json:"parentId,omitempty"`
	OrderBy                  *ReleaseOrderMode         `json:"orderBy,omitempty"`
	OrderDirection           *ReleaseOrderDirection    `json:"orderDirection,omitempty"`
	RiskStatusWithThresholds *RiskStatusWithThresholds `json:"riskStatusWithThresholds,omitempty"`
	QueryStartDate           *time.Time                `json:"queryStartDate,omitempty"`
	QueryEndDate             *time.Time                `json:"queryEndDate,omitempty"`
	Statuses                 []ReleaseStatus           `json:"statuses,omitempty"`
}

// NewReleasesFilters instantiates a new ReleasesFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleasesFilters() *ReleasesFilters {
	this := ReleasesFilters{}
	return &this
}

// NewReleasesFiltersWithDefaults instantiates a new ReleasesFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleasesFiltersWithDefaults() *ReleasesFilters {
	this := ReleasesFilters{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ReleasesFilters) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ReleasesFilters) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ReleasesFilters) SetTitle(v string) {
	o.Title = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ReleasesFilters) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ReleasesFilters) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ReleasesFilters) SetTags(v []string) {
	o.Tags = v
}

// GetTaskTags returns the TaskTags field value if set, zero value otherwise.
func (o *ReleasesFilters) GetTaskTags() []string {
	if o == nil || IsNil(o.TaskTags) {
		var ret []string
		return ret
	}
	return o.TaskTags
}

// GetTaskTagsOk returns a tuple with the TaskTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetTaskTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.TaskTags) {
		return nil, false
	}
	return o.TaskTags, true
}

// HasTaskTags returns a boolean if a field has been set.
func (o *ReleasesFilters) HasTaskTags() bool {
	if o != nil && !IsNil(o.TaskTags) {
		return true
	}

	return false
}

// SetTaskTags gets a reference to the given []string and assigns it to the TaskTags field.
func (o *ReleasesFilters) SetTaskTags(v []string) {
	o.TaskTags = v
}

// GetTimeFrame returns the TimeFrame field value if set, zero value otherwise.
func (o *ReleasesFilters) GetTimeFrame() TimeFrame {
	if o == nil || IsNil(o.TimeFrame) {
		var ret TimeFrame
		return ret
	}
	return *o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetTimeFrameOk() (*TimeFrame, bool) {
	if o == nil || IsNil(o.TimeFrame) {
		return nil, false
	}
	return o.TimeFrame, true
}

// HasTimeFrame returns a boolean if a field has been set.
func (o *ReleasesFilters) HasTimeFrame() bool {
	if o != nil && !IsNil(o.TimeFrame) {
		return true
	}

	return false
}

// SetTimeFrame gets a reference to the given TimeFrame and assigns it to the TimeFrame field.
func (o *ReleasesFilters) SetTimeFrame(v TimeFrame) {
	o.TimeFrame = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ReleasesFilters) GetFrom() time.Time {
	if o == nil || IsNil(o.From) {
		var ret time.Time
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ReleasesFilters) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given time.Time and assigns it to the From field.
func (o *ReleasesFilters) SetFrom(v time.Time) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ReleasesFilters) GetTo() time.Time {
	if o == nil || IsNil(o.To) {
		var ret time.Time
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetToOk() (*time.Time, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ReleasesFilters) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given time.Time and assigns it to the To field.
func (o *ReleasesFilters) SetTo(v time.Time) {
	o.To = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ReleasesFilters) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ReleasesFilters) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ReleasesFilters) SetActive(v bool) {
	o.Active = &v
}

// GetPlanned returns the Planned field value if set, zero value otherwise.
func (o *ReleasesFilters) GetPlanned() bool {
	if o == nil || IsNil(o.Planned) {
		var ret bool
		return ret
	}
	return *o.Planned
}

// GetPlannedOk returns a tuple with the Planned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetPlannedOk() (*bool, bool) {
	if o == nil || IsNil(o.Planned) {
		return nil, false
	}
	return o.Planned, true
}

// HasPlanned returns a boolean if a field has been set.
func (o *ReleasesFilters) HasPlanned() bool {
	if o != nil && !IsNil(o.Planned) {
		return true
	}

	return false
}

// SetPlanned gets a reference to the given bool and assigns it to the Planned field.
func (o *ReleasesFilters) SetPlanned(v bool) {
	o.Planned = &v
}

// GetInProgress returns the InProgress field value if set, zero value otherwise.
func (o *ReleasesFilters) GetInProgress() bool {
	if o == nil || IsNil(o.InProgress) {
		var ret bool
		return ret
	}
	return *o.InProgress
}

// GetInProgressOk returns a tuple with the InProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetInProgressOk() (*bool, bool) {
	if o == nil || IsNil(o.InProgress) {
		return nil, false
	}
	return o.InProgress, true
}

// HasInProgress returns a boolean if a field has been set.
func (o *ReleasesFilters) HasInProgress() bool {
	if o != nil && !IsNil(o.InProgress) {
		return true
	}

	return false
}

// SetInProgress gets a reference to the given bool and assigns it to the InProgress field.
func (o *ReleasesFilters) SetInProgress(v bool) {
	o.InProgress = &v
}

// GetPaused returns the Paused field value if set, zero value otherwise.
func (o *ReleasesFilters) GetPaused() bool {
	if o == nil || IsNil(o.Paused) {
		var ret bool
		return ret
	}
	return *o.Paused
}

// GetPausedOk returns a tuple with the Paused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetPausedOk() (*bool, bool) {
	if o == nil || IsNil(o.Paused) {
		return nil, false
	}
	return o.Paused, true
}

// HasPaused returns a boolean if a field has been set.
func (o *ReleasesFilters) HasPaused() bool {
	if o != nil && !IsNil(o.Paused) {
		return true
	}

	return false
}

// SetPaused gets a reference to the given bool and assigns it to the Paused field.
func (o *ReleasesFilters) SetPaused(v bool) {
	o.Paused = &v
}

// GetFailing returns the Failing field value if set, zero value otherwise.
func (o *ReleasesFilters) GetFailing() bool {
	if o == nil || IsNil(o.Failing) {
		var ret bool
		return ret
	}
	return *o.Failing
}

// GetFailingOk returns a tuple with the Failing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetFailingOk() (*bool, bool) {
	if o == nil || IsNil(o.Failing) {
		return nil, false
	}
	return o.Failing, true
}

// HasFailing returns a boolean if a field has been set.
func (o *ReleasesFilters) HasFailing() bool {
	if o != nil && !IsNil(o.Failing) {
		return true
	}

	return false
}

// SetFailing gets a reference to the given bool and assigns it to the Failing field.
func (o *ReleasesFilters) SetFailing(v bool) {
	o.Failing = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *ReleasesFilters) GetFailed() bool {
	if o == nil || IsNil(o.Failed) {
		var ret bool
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetFailedOk() (*bool, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *ReleasesFilters) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given bool and assigns it to the Failed field.
func (o *ReleasesFilters) SetFailed(v bool) {
	o.Failed = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *ReleasesFilters) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *ReleasesFilters) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *ReleasesFilters) SetInactive(v bool) {
	o.Inactive = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *ReleasesFilters) GetCompleted() bool {
	if o == nil || IsNil(o.Completed) {
		var ret bool
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetCompletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *ReleasesFilters) HasCompleted() bool {
	if o != nil && !IsNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given bool and assigns it to the Completed field.
func (o *ReleasesFilters) SetCompleted(v bool) {
	o.Completed = &v
}

// GetAborted returns the Aborted field value if set, zero value otherwise.
func (o *ReleasesFilters) GetAborted() bool {
	if o == nil || IsNil(o.Aborted) {
		var ret bool
		return ret
	}
	return *o.Aborted
}

// GetAbortedOk returns a tuple with the Aborted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetAbortedOk() (*bool, bool) {
	if o == nil || IsNil(o.Aborted) {
		return nil, false
	}
	return o.Aborted, true
}

// HasAborted returns a boolean if a field has been set.
func (o *ReleasesFilters) HasAborted() bool {
	if o != nil && !IsNil(o.Aborted) {
		return true
	}

	return false
}

// SetAborted gets a reference to the given bool and assigns it to the Aborted field.
func (o *ReleasesFilters) SetAborted(v bool) {
	o.Aborted = &v
}

// GetOnlyMine returns the OnlyMine field value if set, zero value otherwise.
func (o *ReleasesFilters) GetOnlyMine() bool {
	if o == nil || IsNil(o.OnlyMine) {
		var ret bool
		return ret
	}
	return *o.OnlyMine
}

// GetOnlyMineOk returns a tuple with the OnlyMine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetOnlyMineOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyMine) {
		return nil, false
	}
	return o.OnlyMine, true
}

// HasOnlyMine returns a boolean if a field has been set.
func (o *ReleasesFilters) HasOnlyMine() bool {
	if o != nil && !IsNil(o.OnlyMine) {
		return true
	}

	return false
}

// SetOnlyMine gets a reference to the given bool and assigns it to the OnlyMine field.
func (o *ReleasesFilters) SetOnlyMine(v bool) {
	o.OnlyMine = &v
}

// GetOnlyFlagged returns the OnlyFlagged field value if set, zero value otherwise.
func (o *ReleasesFilters) GetOnlyFlagged() bool {
	if o == nil || IsNil(o.OnlyFlagged) {
		var ret bool
		return ret
	}
	return *o.OnlyFlagged
}

// GetOnlyFlaggedOk returns a tuple with the OnlyFlagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetOnlyFlaggedOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyFlagged) {
		return nil, false
	}
	return o.OnlyFlagged, true
}

// HasOnlyFlagged returns a boolean if a field has been set.
func (o *ReleasesFilters) HasOnlyFlagged() bool {
	if o != nil && !IsNil(o.OnlyFlagged) {
		return true
	}

	return false
}

// SetOnlyFlagged gets a reference to the given bool and assigns it to the OnlyFlagged field.
func (o *ReleasesFilters) SetOnlyFlagged(v bool) {
	o.OnlyFlagged = &v
}

// GetOnlyArchived returns the OnlyArchived field value if set, zero value otherwise.
func (o *ReleasesFilters) GetOnlyArchived() bool {
	if o == nil || IsNil(o.OnlyArchived) {
		var ret bool
		return ret
	}
	return *o.OnlyArchived
}

// GetOnlyArchivedOk returns a tuple with the OnlyArchived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetOnlyArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyArchived) {
		return nil, false
	}
	return o.OnlyArchived, true
}

// HasOnlyArchived returns a boolean if a field has been set.
func (o *ReleasesFilters) HasOnlyArchived() bool {
	if o != nil && !IsNil(o.OnlyArchived) {
		return true
	}

	return false
}

// SetOnlyArchived gets a reference to the given bool and assigns it to the OnlyArchived field.
func (o *ReleasesFilters) SetOnlyArchived(v bool) {
	o.OnlyArchived = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ReleasesFilters) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *ReleasesFilters) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *ReleasesFilters) SetParentId(v string) {
	o.ParentId = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *ReleasesFilters) GetOrderBy() ReleaseOrderMode {
	if o == nil || IsNil(o.OrderBy) {
		var ret ReleaseOrderMode
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetOrderByOk() (*ReleaseOrderMode, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *ReleasesFilters) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given ReleaseOrderMode and assigns it to the OrderBy field.
func (o *ReleasesFilters) SetOrderBy(v ReleaseOrderMode) {
	o.OrderBy = &v
}

// GetOrderDirection returns the OrderDirection field value if set, zero value otherwise.
func (o *ReleasesFilters) GetOrderDirection() ReleaseOrderDirection {
	if o == nil || IsNil(o.OrderDirection) {
		var ret ReleaseOrderDirection
		return ret
	}
	return *o.OrderDirection
}

// GetOrderDirectionOk returns a tuple with the OrderDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetOrderDirectionOk() (*ReleaseOrderDirection, bool) {
	if o == nil || IsNil(o.OrderDirection) {
		return nil, false
	}
	return o.OrderDirection, true
}

// HasOrderDirection returns a boolean if a field has been set.
func (o *ReleasesFilters) HasOrderDirection() bool {
	if o != nil && !IsNil(o.OrderDirection) {
		return true
	}

	return false
}

// SetOrderDirection gets a reference to the given ReleaseOrderDirection and assigns it to the OrderDirection field.
func (o *ReleasesFilters) SetOrderDirection(v ReleaseOrderDirection) {
	o.OrderDirection = &v
}

// GetRiskStatusWithThresholds returns the RiskStatusWithThresholds field value if set, zero value otherwise.
func (o *ReleasesFilters) GetRiskStatusWithThresholds() RiskStatusWithThresholds {
	if o == nil || IsNil(o.RiskStatusWithThresholds) {
		var ret RiskStatusWithThresholds
		return ret
	}
	return *o.RiskStatusWithThresholds
}

// GetRiskStatusWithThresholdsOk returns a tuple with the RiskStatusWithThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetRiskStatusWithThresholdsOk() (*RiskStatusWithThresholds, bool) {
	if o == nil || IsNil(o.RiskStatusWithThresholds) {
		return nil, false
	}
	return o.RiskStatusWithThresholds, true
}

// HasRiskStatusWithThresholds returns a boolean if a field has been set.
func (o *ReleasesFilters) HasRiskStatusWithThresholds() bool {
	if o != nil && !IsNil(o.RiskStatusWithThresholds) {
		return true
	}

	return false
}

// SetRiskStatusWithThresholds gets a reference to the given RiskStatusWithThresholds and assigns it to the RiskStatusWithThresholds field.
func (o *ReleasesFilters) SetRiskStatusWithThresholds(v RiskStatusWithThresholds) {
	o.RiskStatusWithThresholds = &v
}

// GetQueryStartDate returns the QueryStartDate field value if set, zero value otherwise.
func (o *ReleasesFilters) GetQueryStartDate() time.Time {
	if o == nil || IsNil(o.QueryStartDate) {
		var ret time.Time
		return ret
	}
	return *o.QueryStartDate
}

// GetQueryStartDateOk returns a tuple with the QueryStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetQueryStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.QueryStartDate) {
		return nil, false
	}
	return o.QueryStartDate, true
}

// HasQueryStartDate returns a boolean if a field has been set.
func (o *ReleasesFilters) HasQueryStartDate() bool {
	if o != nil && !IsNil(o.QueryStartDate) {
		return true
	}

	return false
}

// SetQueryStartDate gets a reference to the given time.Time and assigns it to the QueryStartDate field.
func (o *ReleasesFilters) SetQueryStartDate(v time.Time) {
	o.QueryStartDate = &v
}

// GetQueryEndDate returns the QueryEndDate field value if set, zero value otherwise.
func (o *ReleasesFilters) GetQueryEndDate() time.Time {
	if o == nil || IsNil(o.QueryEndDate) {
		var ret time.Time
		return ret
	}
	return *o.QueryEndDate
}

// GetQueryEndDateOk returns a tuple with the QueryEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetQueryEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.QueryEndDate) {
		return nil, false
	}
	return o.QueryEndDate, true
}

// HasQueryEndDate returns a boolean if a field has been set.
func (o *ReleasesFilters) HasQueryEndDate() bool {
	if o != nil && !IsNil(o.QueryEndDate) {
		return true
	}

	return false
}

// SetQueryEndDate gets a reference to the given time.Time and assigns it to the QueryEndDate field.
func (o *ReleasesFilters) SetQueryEndDate(v time.Time) {
	o.QueryEndDate = &v
}

// GetStatuses returns the Statuses field value if set, zero value otherwise.
func (o *ReleasesFilters) GetStatuses() []ReleaseStatus {
	if o == nil || IsNil(o.Statuses) {
		var ret []ReleaseStatus
		return ret
	}
	return o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleasesFilters) GetStatusesOk() ([]ReleaseStatus, bool) {
	if o == nil || IsNil(o.Statuses) {
		return nil, false
	}
	return o.Statuses, true
}

// HasStatuses returns a boolean if a field has been set.
func (o *ReleasesFilters) HasStatuses() bool {
	if o != nil && !IsNil(o.Statuses) {
		return true
	}

	return false
}

// SetStatuses gets a reference to the given []ReleaseStatus and assigns it to the Statuses field.
func (o *ReleasesFilters) SetStatuses(v []ReleaseStatus) {
	o.Statuses = v
}

func (o ReleasesFilters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleasesFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.TaskTags) {
		toSerialize["taskTags"] = o.TaskTags
	}
	if !IsNil(o.TimeFrame) {
		toSerialize["timeFrame"] = o.TimeFrame
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Planned) {
		toSerialize["planned"] = o.Planned
	}
	if !IsNil(o.InProgress) {
		toSerialize["inProgress"] = o.InProgress
	}
	if !IsNil(o.Paused) {
		toSerialize["paused"] = o.Paused
	}
	if !IsNil(o.Failing) {
		toSerialize["failing"] = o.Failing
	}
	if !IsNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !IsNil(o.Aborted) {
		toSerialize["aborted"] = o.Aborted
	}
	if !IsNil(o.OnlyMine) {
		toSerialize["onlyMine"] = o.OnlyMine
	}
	if !IsNil(o.OnlyFlagged) {
		toSerialize["onlyFlagged"] = o.OnlyFlagged
	}
	if !IsNil(o.OnlyArchived) {
		toSerialize["onlyArchived"] = o.OnlyArchived
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.OrderDirection) {
		toSerialize["orderDirection"] = o.OrderDirection
	}
	if !IsNil(o.RiskStatusWithThresholds) {
		toSerialize["riskStatusWithThresholds"] = o.RiskStatusWithThresholds
	}
	if !IsNil(o.QueryStartDate) {
		toSerialize["queryStartDate"] = o.QueryStartDate
	}
	if !IsNil(o.QueryEndDate) {
		toSerialize["queryEndDate"] = o.QueryEndDate
	}
	if !IsNil(o.Statuses) {
		toSerialize["statuses"] = o.Statuses
	}
	return toSerialize, nil
}

type NullableReleasesFilters struct {
	value *ReleasesFilters
	isSet bool
}

func (v NullableReleasesFilters) Get() *ReleasesFilters {
	return v.value
}

func (v *NullableReleasesFilters) Set(val *ReleasesFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableReleasesFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableReleasesFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleasesFilters(val *ReleasesFilters) *NullableReleasesFilters {
	return &NullableReleasesFilters{value: val, isSet: true}
}

func (v NullableReleasesFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleasesFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
