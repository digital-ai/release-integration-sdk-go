/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GateCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GateCondition{}

// GateCondition struct for GateCondition
type GateCondition struct {
	Id      *string `json:"id,omitempty"`
	Type    *string `json:"type,omitempty"`
	Title   *string `json:"title,omitempty"`
	Checked *bool   `json:"checked,omitempty"`
}

// NewGateCondition instantiates a new GateCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGateCondition() *GateCondition {
	this := GateCondition{}
	return &this
}

// NewGateConditionWithDefaults instantiates a new GateCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGateConditionWithDefaults() *GateCondition {
	this := GateCondition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GateCondition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GateCondition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GateCondition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GateCondition) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GateCondition) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GateCondition) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GateCondition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GateCondition) SetType(v string) {
	o.Type = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *GateCondition) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GateCondition) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *GateCondition) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *GateCondition) SetTitle(v string) {
	o.Title = &v
}

// GetChecked returns the Checked field value if set, zero value otherwise.
func (o *GateCondition) GetChecked() bool {
	if o == nil || IsNil(o.Checked) {
		var ret bool
		return ret
	}
	return *o.Checked
}

// GetCheckedOk returns a tuple with the Checked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GateCondition) GetCheckedOk() (*bool, bool) {
	if o == nil || IsNil(o.Checked) {
		return nil, false
	}
	return o.Checked, true
}

// HasChecked returns a boolean if a field has been set.
func (o *GateCondition) HasChecked() bool {
	if o != nil && !IsNil(o.Checked) {
		return true
	}

	return false
}

// SetChecked gets a reference to the given bool and assigns it to the Checked field.
func (o *GateCondition) SetChecked(v bool) {
	o.Checked = &v
}

func (o GateCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GateCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Checked) {
		toSerialize["checked"] = o.Checked
	}
	return toSerialize, nil
}

type NullableGateCondition struct {
	value *GateCondition
	isSet bool
}

func (v NullableGateCondition) Get() *GateCondition {
	return v.value
}

func (v *NullableGateCondition) Set(val *GateCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableGateCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableGateCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGateCondition(val *GateCondition) *NullableGateCondition {
	return &NullableGateCondition{value: val, isSet: true}
}

func (v NullableGateCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGateCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
