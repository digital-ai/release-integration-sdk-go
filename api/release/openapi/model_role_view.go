/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoleView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleView{}

// RoleView struct for RoleView
type RoleView struct {
	Name        *string         `json:"name,omitempty"`
	Id          *string         `json:"id,omitempty"`
	Permissions []string        `json:"permissions,omitempty"`
	Principals  []PrincipalView `json:"principals,omitempty"`
}

// NewRoleView instantiates a new RoleView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleView() *RoleView {
	this := RoleView{}
	return &this
}

// NewRoleViewWithDefaults instantiates a new RoleView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleViewWithDefaults() *RoleView {
	this := RoleView{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleView) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleView) SetId(v string) {
	o.Id = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *RoleView) GetPermissions() []string {
	if o == nil || IsNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleView) GetPermissionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *RoleView) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *RoleView) SetPermissions(v []string) {
	o.Permissions = v
}

// GetPrincipals returns the Principals field value if set, zero value otherwise.
func (o *RoleView) GetPrincipals() []PrincipalView {
	if o == nil || IsNil(o.Principals) {
		var ret []PrincipalView
		return ret
	}
	return o.Principals
}

// GetPrincipalsOk returns a tuple with the Principals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleView) GetPrincipalsOk() ([]PrincipalView, bool) {
	if o == nil || IsNil(o.Principals) {
		return nil, false
	}
	return o.Principals, true
}

// HasPrincipals returns a boolean if a field has been set.
func (o *RoleView) HasPrincipals() bool {
	if o != nil && !IsNil(o.Principals) {
		return true
	}

	return false
}

// SetPrincipals gets a reference to the given []PrincipalView and assigns it to the Principals field.
func (o *RoleView) SetPrincipals(v []PrincipalView) {
	o.Principals = v
}

func (o RoleView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Principals) {
		toSerialize["principals"] = o.Principals
	}
	return toSerialize, nil
}

type NullableRoleView struct {
	value *RoleView
	isSet bool
}

func (v NullableRoleView) Get() *RoleView {
	return v.value
}

func (v *NullableRoleView) Set(val *RoleView) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleView) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleView(val *RoleView) *NullableRoleView {
	return &NullableRoleView{value: val, isSet: true}
}

func (v NullableRoleView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
