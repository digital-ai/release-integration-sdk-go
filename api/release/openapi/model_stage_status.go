/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StageStatus the model 'StageStatus'
type StageStatus string

// List of StageStatus
const (
	STAGESTATUS_OPEN   StageStatus = "OPEN"
	STAGESTATUS_CLOSED StageStatus = "CLOSED"
)

// All allowed values of StageStatus enum
var AllowedStageStatusEnumValues = []StageStatus{
	"OPEN",
	"CLOSED",
}

func (v *StageStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StageStatus(value)
	for _, existing := range AllowedStageStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StageStatus", value)
}

// NewStageStatusFromValue returns a pointer to a valid StageStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStageStatusFromValue(v string) (*StageStatus, error) {
	ev := StageStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StageStatus: valid values are %v", v, AllowedStageStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StageStatus) IsValid() bool {
	for _, existing := range AllowedStageStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StageStatus value
func (v StageStatus) Ptr() *StageStatus {
	return &v
}

type NullableStageStatus struct {
	value *StageStatus
	isSet bool
}

func (v NullableStageStatus) Get() *StageStatus {
	return v.value
}

func (v *NullableStageStatus) Set(val *StageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStageStatus(val *StageStatus) *NullableStageStatus {
	return &NullableStageStatus{value: val, isSet: true}
}

func (v NullableStageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
