/*
Digital.ai Release API

Testing DeliveryPatternApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/digital-ai/release-integration-sdk-go/api/release/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_DeliveryPatternApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DeliveryPatternApiService CheckTitle", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DeliveryPatternApi.CheckTitle(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService CreateDeliveryFromPattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.CreateDeliveryFromPattern(context.Background(), patternId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService CreatePattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DeliveryPatternApi.CreatePattern(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService CreateStage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.CreateStage(context.Background(), patternId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService CreateStage1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.CreateStage1(context.Background(), patternId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService CreateStage2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternId string
		var position int32

		resp, httpRes, err := apiClient.DeliveryPatternApi.CreateStage2(context.Background(), patternId, position).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService CreateTrackedItemInPattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.CreateTrackedItemInPattern(context.Background(), patternId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService CreateTransition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stageId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.CreateTransition(context.Background(), stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService DeletePattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternId string

		resp, err := apiClient.DeliveryPatternApi.DeletePattern(context.Background(), patternId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService DeleteStage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stageId string

		resp, err := apiClient.DeliveryPatternApi.DeleteStage(context.Background(), stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService DeleteTrackedItemDeliveryPattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var itemId string

		resp, err := apiClient.DeliveryPatternApi.DeleteTrackedItemDeliveryPattern(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService DeleteTransition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transitionId string

		resp, err := apiClient.DeliveryPatternApi.DeleteTransition(context.Background(), transitionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService DuplicatePattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.DuplicatePattern(context.Background(), patternId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService GetPattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.GetPattern(context.Background(), patternId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService GetPatternByIdOrTitle", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternIdOrTitle string

		resp, httpRes, err := apiClient.DeliveryPatternApi.GetPatternByIdOrTitle(context.Background(), patternIdOrTitle).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService GetStagesInPattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.GetStagesInPattern(context.Background(), patternId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService GetTrackedItemsInPattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.GetTrackedItemsInPattern(context.Background(), patternId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService SearchPatterns", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DeliveryPatternApi.SearchPatterns(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService UpdatePattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var patternId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.UpdatePattern(context.Background(), patternId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService UpdateStageFromBatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stageId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.UpdateStageFromBatch(context.Background(), stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService UpdateStageInPattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stageId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.UpdateStageInPattern(context.Background(), stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService UpdateTrackedItemInPattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.UpdateTrackedItemInPattern(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryPatternApiService UpdateTransitionInPattern", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transitionId string

		resp, httpRes, err := apiClient.DeliveryPatternApi.UpdateTransitionInPattern(context.Background(), transitionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
