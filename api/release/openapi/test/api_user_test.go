/*
Digital.ai Release API

Testing UserApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/digital-ai/release-integration-sdk-go/api/release/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_UserApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserApiService CreateUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var username string

		resp, err := apiClient.UserApi.CreateUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test UserApiService DeleteUserRest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var username string

		resp, err := apiClient.UserApi.DeleteUserRest(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test UserApiService FindUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserApi.FindUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserApiService GetUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var username string

		resp, httpRes, err := apiClient.UserApi.GetUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserApiService UpdatePassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var username string

		resp, err := apiClient.UserApi.UpdatePassword(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test UserApiService UpdateUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var username string

		resp, err := apiClient.UserApi.UpdateUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test UserApiService UpdateUsersRest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, err := apiClient.UserApi.UpdateUsersRest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

}
