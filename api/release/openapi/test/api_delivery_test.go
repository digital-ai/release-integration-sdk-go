/*
Digital.ai Release API

Testing DeliveryApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/digital-ai/release-integration-sdk-go/api/release/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_DeliveryApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DeliveryApiService CompleteStage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stageId string

		resp, err := apiClient.DeliveryApi.CompleteStage(context.Background(), stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryApiService CompleteTrackedItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var itemId string
		var stageId string

		resp, err := apiClient.DeliveryApi.CompleteTrackedItem(context.Background(), itemId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryApiService CompleteTransition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transitionId string

		resp, err := apiClient.DeliveryApi.CompleteTransition(context.Background(), transitionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryApiService CreateTrackedItemInDelivery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryId string

		resp, httpRes, err := apiClient.DeliveryApi.CreateTrackedItemInDelivery(context.Background(), deliveryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryApiService DeleteDelivery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryId string

		resp, err := apiClient.DeliveryApi.DeleteDelivery(context.Background(), deliveryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryApiService DeleteTrackedItemDelivery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var itemId string

		resp, err := apiClient.DeliveryApi.DeleteTrackedItemDelivery(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryApiService DescopeTrackedItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var itemId string

		resp, err := apiClient.DeliveryApi.DescopeTrackedItem(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryApiService GetDelivery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryId string

		resp, httpRes, err := apiClient.DeliveryApi.GetDelivery(context.Background(), deliveryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryApiService GetDeliveryTimeline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryId string

		resp, httpRes, err := apiClient.DeliveryApi.GetDeliveryTimeline(context.Background(), deliveryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryApiService GetReleasesForDelivery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryId string

		resp, httpRes, err := apiClient.DeliveryApi.GetReleasesForDelivery(context.Background(), deliveryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryApiService GetStagesInDelivery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryId string

		resp, httpRes, err := apiClient.DeliveryApi.GetStagesInDelivery(context.Background(), deliveryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryApiService GetTrackedItemsinDelivery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryId string

		resp, httpRes, err := apiClient.DeliveryApi.GetTrackedItemsinDelivery(context.Background(), deliveryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryApiService ReopenStage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stageId string

		resp, err := apiClient.DeliveryApi.ReopenStage(context.Background(), stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryApiService RescopeTrackedItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var itemId string

		resp, err := apiClient.DeliveryApi.RescopeTrackedItem(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryApiService ResetTrackedItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var itemId string
		var stageId string

		resp, err := apiClient.DeliveryApi.ResetTrackedItem(context.Background(), itemId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryApiService SearchDeliveries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DeliveryApi.SearchDeliveries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryApiService SkipTrackedItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var itemId string
		var stageId string

		resp, err := apiClient.DeliveryApi.SkipTrackedItem(context.Background(), itemId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test DeliveryApiService UpdateDelivery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryId string

		resp, httpRes, err := apiClient.DeliveryApi.UpdateDelivery(context.Background(), deliveryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryApiService UpdateStageInDelivery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stageId string

		resp, httpRes, err := apiClient.DeliveryApi.UpdateStageInDelivery(context.Background(), stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryApiService UpdateTrackedItemInDelivery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.DeliveryApi.UpdateTrackedItemInDelivery(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryApiService UpdateTransitionInDelivery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transitionId string

		resp, httpRes, err := apiClient.DeliveryApi.UpdateTransitionInDelivery(context.Background(), transitionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
