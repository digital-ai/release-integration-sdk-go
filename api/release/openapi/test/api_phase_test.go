/*
Digital.ai Release API

Testing PhaseApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/digital-ai/release-integration-sdk-go/api/release/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_PhaseApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PhaseApiService AddPhase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.PhaseApi.AddPhase(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhaseApiService AddTaskToContainer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var containerId string

		resp, httpRes, err := apiClient.PhaseApi.AddTaskToContainer(context.Background(), containerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhaseApiService CopyPhase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var phaseId string

		resp, httpRes, err := apiClient.PhaseApi.CopyPhase(context.Background(), phaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhaseApiService DeletePhase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var phaseId string

		resp, err := apiClient.PhaseApi.DeletePhase(context.Background(), phaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test PhaseApiService GetPhase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var phaseId string

		resp, httpRes, err := apiClient.PhaseApi.GetPhase(context.Background(), phaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhaseApiService SearchPhases", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PhaseApi.SearchPhases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhaseApiService SearchPhasesByTitle", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PhaseApi.SearchPhasesByTitle(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhaseApiService UpdatePhase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var phaseId string

		resp, httpRes, err := apiClient.PhaseApi.UpdatePhase(context.Background(), phaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
