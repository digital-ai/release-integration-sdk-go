/*
Digital.ai Release API

Testing RiskApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/digital-ai/release-integration-sdk-go/api/release/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_RiskApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RiskApiService CopyRiskProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var riskProfileId string

		resp, httpRes, err := apiClient.RiskApi.CopyRiskProfile(context.Background(), riskProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskApiService CreateRiskProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RiskApi.CreateRiskProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskApiService DeleteRiskProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var riskProfileId string

		resp, err := apiClient.RiskApi.DeleteRiskProfile(context.Background(), riskProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test RiskApiService GetAllRiskAssessors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RiskApi.GetAllRiskAssessors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskApiService GetRisk", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var riskId string

		resp, httpRes, err := apiClient.RiskApi.GetRisk(context.Background(), riskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskApiService GetRiskGlobalThresholds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RiskApi.GetRiskGlobalThresholds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskApiService GetRiskProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var riskProfileId string

		resp, httpRes, err := apiClient.RiskApi.GetRiskProfile(context.Background(), riskProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskApiService GetRiskProfiles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RiskApi.GetRiskProfiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskApiService UpdateRiskGlobalThresholds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RiskApi.UpdateRiskGlobalThresholds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskApiService UpdateRiskProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var riskProfileId string

		resp, httpRes, err := apiClient.RiskApi.UpdateRiskProfile(context.Background(), riskProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
