/*
Digital.ai Release API

Testing TemplateApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/digital-ai/release-integration-sdk-go/api/release/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_TemplateApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TemplateApiService CopyTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplateApi.CopyTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService CreateTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TemplateApi.CreateTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService CreateTemplate1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplateApi.CreateTemplate1(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService CreateTemplateVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplateApi.CreateTemplateVariable(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService DeleteTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId string

		resp, err := apiClient.TemplateApi.DeleteTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test TemplateApiService DeleteTemplateVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, err := apiClient.TemplateApi.DeleteTemplateVariable(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test TemplateApiService ExportTemplateToZip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId string

		resp, err := apiClient.TemplateApi.ExportTemplateToZip(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test TemplateApiService GetPossibleTemplateVariableValues", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, httpRes, err := apiClient.TemplateApi.GetPossibleTemplateVariableValues(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService GetTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplateApi.GetTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService GetTemplatePermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TemplateApi.GetTemplatePermissions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService GetTemplateTeams", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplateApi.GetTemplateTeams(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService GetTemplateVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, httpRes, err := apiClient.TemplateApi.GetTemplateVariable(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService GetTemplateVariables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplateApi.GetTemplateVariables(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService GetTemplates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TemplateApi.GetTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService ImportTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TemplateApi.ImportTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService IsVariableUsedTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, httpRes, err := apiClient.TemplateApi.IsVariableUsedTemplate(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService ReplaceTemplateVariables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, err := apiClient.TemplateApi.ReplaceTemplateVariables(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test TemplateApiService SetTemplateTeams", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplateApi.SetTemplateTeams(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService StartTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplateApi.StartTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService UpdateTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplateApi.UpdateTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService UpdateTemplateVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, httpRes, err := apiClient.TemplateApi.UpdateTemplateVariable(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplateApiService UpdateTemplateVariables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.TemplateApi.UpdateTemplateVariables(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
