/*
Digital.ai Release API

Testing TriggersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/xebialabs/go-remote-runner-wrapper/api/release/openapi"
	"testing"
)

func Test_openapi_TriggersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TriggersApiService AddTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TriggersApi.AddTrigger(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersApiService DisableAllTriggers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TriggersApi.DisableAllTriggers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersApiService DisableTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerId string

		resp, err := apiClient.TriggersApi.DisableTrigger(context.Background(), triggerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test TriggersApiService DisableTriggers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TriggersApi.DisableTriggers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersApiService EnableAllTriggers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TriggersApi.EnableAllTriggers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersApiService EnableTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerId string

		resp, err := apiClient.TriggersApi.EnableTrigger(context.Background(), triggerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test TriggersApiService EnableTriggers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TriggersApi.EnableTriggers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersApiService GetTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerId string

		resp, httpRes, err := apiClient.TriggersApi.GetTrigger(context.Background(), triggerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersApiService GetTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TriggersApi.GetTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersApiService RemoveTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerId string

		resp, err := apiClient.TriggersApi.RemoveTrigger(context.Background(), triggerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test TriggersApiService RunTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerId string

		resp, err := apiClient.TriggersApi.RunTrigger(context.Background(), triggerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, resp.StatusCode)

	})

	t.Run("Test TriggersApiService SearchTriggers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TriggersApi.SearchTriggers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersApiService UpdateTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerId string

		resp, httpRes, err := apiClient.TriggersApi.UpdateTrigger(context.Background(), triggerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
