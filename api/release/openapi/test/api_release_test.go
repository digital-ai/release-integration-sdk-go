/*
Digital.ai Release API

Testing ReleaseApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/xebialabs/go-remote-runner-wrapper/api/release/openapi"
	"testing"
)

func Test_openapi_ReleaseApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReleaseApiService Abort", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.Abort(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService CountReleases", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ReleaseApi.CountReleases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService CreateReleaseVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.CreateReleaseVariable(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService DeleteRelease", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.DeleteRelease(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService DeleteReleaseVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, httpRes, err := apiClient.ReleaseApi.DeleteReleaseVariable(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService DownloadAttachment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var attachmentId string

		resp, httpRes, err := apiClient.ReleaseApi.DownloadAttachment(context.Background(), attachmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService FullSearchReleases", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ReleaseApi.FullSearchReleases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService GetActiveTasks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.GetActiveTasks(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService GetArchivedRelease", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.GetArchivedRelease(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService GetPossibleReleaseVariableValues", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, httpRes, err := apiClient.ReleaseApi.GetPossibleReleaseVariableValues(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService GetRelease", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.GetRelease(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService GetReleasePermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ReleaseApi.GetReleasePermissions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService GetReleaseTeams", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.GetReleaseTeams(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService GetReleaseVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, httpRes, err := apiClient.ReleaseApi.GetReleaseVariable(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService GetReleaseVariables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.GetReleaseVariables(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService GetReleases", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ReleaseApi.GetReleases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService GetVariableValues", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.GetVariableValues(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService IsVariableUsedRelease", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, httpRes, err := apiClient.ReleaseApi.IsVariableUsedRelease(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService ReplaceReleaseVariables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, httpRes, err := apiClient.ReleaseApi.ReplaceReleaseVariables(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService RestartPhases", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.RestartPhases(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService Resume", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.Resume(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService SearchReleasesByTitle", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ReleaseApi.SearchReleasesByTitle(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService SearchReleasesRelease", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ReleaseApi.SearchReleasesRelease(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService SetReleaseTeams", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.SetReleaseTeams(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService StartRelease", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.StartRelease(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService UpdateRelease", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.UpdateRelease(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService UpdateReleaseVariable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var variableId string

		resp, httpRes, err := apiClient.ReleaseApi.UpdateReleaseVariable(context.Background(), variableId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseApiService UpdateReleaseVariables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var releaseId string

		resp, httpRes, err := apiClient.ReleaseApi.UpdateReleaseVariables(context.Background(), releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
