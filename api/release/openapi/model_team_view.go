/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TeamView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamView{}

// TeamView struct for TeamView
type TeamView struct {
	Id          *string          `json:"id,omitempty"`
	TeamName    *string          `json:"teamName,omitempty"`
	Members     []TeamMemberView `json:"members,omitempty"`
	Permissions []string         `json:"permissions,omitempty"`
	SystemTeam  *bool            `json:"systemTeam,omitempty"`
}

// NewTeamView instantiates a new TeamView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamView() *TeamView {
	this := TeamView{}
	return &this
}

// NewTeamViewWithDefaults instantiates a new TeamView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamViewWithDefaults() *TeamView {
	this := TeamView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TeamView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TeamView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TeamView) SetId(v string) {
	o.Id = &v
}

// GetTeamName returns the TeamName field value if set, zero value otherwise.
func (o *TeamView) GetTeamName() string {
	if o == nil || IsNil(o.TeamName) {
		var ret string
		return ret
	}
	return *o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamView) GetTeamNameOk() (*string, bool) {
	if o == nil || IsNil(o.TeamName) {
		return nil, false
	}
	return o.TeamName, true
}

// HasTeamName returns a boolean if a field has been set.
func (o *TeamView) HasTeamName() bool {
	if o != nil && !IsNil(o.TeamName) {
		return true
	}

	return false
}

// SetTeamName gets a reference to the given string and assigns it to the TeamName field.
func (o *TeamView) SetTeamName(v string) {
	o.TeamName = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *TeamView) GetMembers() []TeamMemberView {
	if o == nil || IsNil(o.Members) {
		var ret []TeamMemberView
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamView) GetMembersOk() ([]TeamMemberView, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *TeamView) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []TeamMemberView and assigns it to the Members field.
func (o *TeamView) SetMembers(v []TeamMemberView) {
	o.Members = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *TeamView) GetPermissions() []string {
	if o == nil || IsNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamView) GetPermissionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *TeamView) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *TeamView) SetPermissions(v []string) {
	o.Permissions = v
}

// GetSystemTeam returns the SystemTeam field value if set, zero value otherwise.
func (o *TeamView) GetSystemTeam() bool {
	if o == nil || IsNil(o.SystemTeam) {
		var ret bool
		return ret
	}
	return *o.SystemTeam
}

// GetSystemTeamOk returns a tuple with the SystemTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamView) GetSystemTeamOk() (*bool, bool) {
	if o == nil || IsNil(o.SystemTeam) {
		return nil, false
	}
	return o.SystemTeam, true
}

// HasSystemTeam returns a boolean if a field has been set.
func (o *TeamView) HasSystemTeam() bool {
	if o != nil && !IsNil(o.SystemTeam) {
		return true
	}

	return false
}

// SetSystemTeam gets a reference to the given bool and assigns it to the SystemTeam field.
func (o *TeamView) SetSystemTeam(v bool) {
	o.SystemTeam = &v
}

func (o TeamView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TeamName) {
		toSerialize["teamName"] = o.TeamName
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.SystemTeam) {
		toSerialize["systemTeam"] = o.SystemTeam
	}
	return toSerialize, nil
}

type NullableTeamView struct {
	value *TeamView
	isSet bool
}

func (v NullableTeamView) Get() *TeamView {
	return v.value
}

func (v *NullableTeamView) Set(val *TeamView) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamView) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamView(val *TeamView) *NullableTeamView {
	return &NullableTeamView{value: val, isSet: true}
}

func (v NullableTeamView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
