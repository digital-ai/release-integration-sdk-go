/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// EnvironmentLabelApiService EnvironmentLabelApi service
type EnvironmentLabelApiService service

type ApiCreateLabelRequest struct {
	ctx context.Context
	ApiService *EnvironmentLabelApiService
	environmentLabelForm *EnvironmentLabelForm
}

func (r ApiCreateLabelRequest) EnvironmentLabelForm(environmentLabelForm EnvironmentLabelForm) ApiCreateLabelRequest {
	r.environmentLabelForm = &environmentLabelForm
	return r
}

func (r ApiCreateLabelRequest) Execute() (*EnvironmentLabelView, *http.Response, error) {
	return r.ApiService.CreateLabelExecute(r)
}

/*
CreateLabel Method for CreateLabel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateLabelRequest
*/
func (a *EnvironmentLabelApiService) CreateLabel(ctx context.Context) ApiCreateLabelRequest {
	return ApiCreateLabelRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnvironmentLabelView
func (a *EnvironmentLabelApiService) CreateLabelExecute(r ApiCreateLabelRequest) (*EnvironmentLabelView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvironmentLabelView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentLabelApiService.CreateLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/environments/labels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentLabelForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteEnvironmentLabelRequest struct {
	ctx context.Context
	ApiService *EnvironmentLabelApiService
	environmentLabelId string
}

func (r ApiDeleteEnvironmentLabelRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEnvironmentLabelExecute(r)
}

/*
DeleteEnvironmentLabel Method for DeleteEnvironmentLabel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentLabelId
 @return ApiDeleteEnvironmentLabelRequest
*/
func (a *EnvironmentLabelApiService) DeleteEnvironmentLabel(ctx context.Context, environmentLabelId string) ApiDeleteEnvironmentLabelRequest {
	return ApiDeleteEnvironmentLabelRequest{
		ApiService: a,
		ctx: ctx,
		environmentLabelId: environmentLabelId,
	}
}

// Execute executes the request
func (a *EnvironmentLabelApiService) DeleteEnvironmentLabelExecute(r ApiDeleteEnvironmentLabelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentLabelApiService.DeleteEnvironmentLabel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/environments/labels/{environmentLabelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentLabelId"+"}", url.PathEscape(parameterValueToString(r.environmentLabelId, "environmentLabelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLabelByIdRequest struct {
	ctx context.Context
	ApiService *EnvironmentLabelApiService
	environmentLabelId string
}

func (r ApiGetLabelByIdRequest) Execute() (*EnvironmentLabelView, *http.Response, error) {
	return r.ApiService.GetLabelByIdExecute(r)
}

/*
GetLabelById Method for GetLabelById

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentLabelId
 @return ApiGetLabelByIdRequest
*/
func (a *EnvironmentLabelApiService) GetLabelById(ctx context.Context, environmentLabelId string) ApiGetLabelByIdRequest {
	return ApiGetLabelByIdRequest{
		ApiService: a,
		ctx: ctx,
		environmentLabelId: environmentLabelId,
	}
}

// Execute executes the request
//  @return EnvironmentLabelView
func (a *EnvironmentLabelApiService) GetLabelByIdExecute(r ApiGetLabelByIdRequest) (*EnvironmentLabelView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvironmentLabelView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentLabelApiService.GetLabelById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/environments/labels/{environmentLabelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentLabelId"+"}", url.PathEscape(parameterValueToString(r.environmentLabelId, "environmentLabelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchLabelsRequest struct {
	ctx context.Context
	ApiService *EnvironmentLabelApiService
	environmentLabelFilters *EnvironmentLabelFilters
}

func (r ApiSearchLabelsRequest) EnvironmentLabelFilters(environmentLabelFilters EnvironmentLabelFilters) ApiSearchLabelsRequest {
	r.environmentLabelFilters = &environmentLabelFilters
	return r
}

func (r ApiSearchLabelsRequest) Execute() ([]EnvironmentLabelView, *http.Response, error) {
	return r.ApiService.SearchLabelsExecute(r)
}

/*
SearchLabels Method for SearchLabels

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchLabelsRequest
*/
func (a *EnvironmentLabelApiService) SearchLabels(ctx context.Context) ApiSearchLabelsRequest {
	return ApiSearchLabelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []EnvironmentLabelView
func (a *EnvironmentLabelApiService) SearchLabelsExecute(r ApiSearchLabelsRequest) ([]EnvironmentLabelView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EnvironmentLabelView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentLabelApiService.SearchLabels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/environments/labels/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentLabelFilters
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLabelRequest struct {
	ctx context.Context
	ApiService *EnvironmentLabelApiService
	environmentLabelId string
	environmentLabelForm *EnvironmentLabelForm
}

func (r ApiUpdateLabelRequest) EnvironmentLabelForm(environmentLabelForm EnvironmentLabelForm) ApiUpdateLabelRequest {
	r.environmentLabelForm = &environmentLabelForm
	return r
}

func (r ApiUpdateLabelRequest) Execute() (*EnvironmentLabelView, *http.Response, error) {
	return r.ApiService.UpdateLabelExecute(r)
}

/*
UpdateLabel Method for UpdateLabel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentLabelId
 @return ApiUpdateLabelRequest
*/
func (a *EnvironmentLabelApiService) UpdateLabel(ctx context.Context, environmentLabelId string) ApiUpdateLabelRequest {
	return ApiUpdateLabelRequest{
		ApiService: a,
		ctx: ctx,
		environmentLabelId: environmentLabelId,
	}
}

// Execute executes the request
//  @return EnvironmentLabelView
func (a *EnvironmentLabelApiService) UpdateLabelExecute(r ApiUpdateLabelRequest) (*EnvironmentLabelView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvironmentLabelView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentLabelApiService.UpdateLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/environments/labels/{environmentLabelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentLabelId"+"}", url.PathEscape(parameterValueToString(r.environmentLabelId, "environmentLabelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentLabelForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
