/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseCountResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseCountResult{}

// ReleaseCountResult struct for ReleaseCountResult
type ReleaseCountResult struct {
	Total    *int32            `json:"total,omitempty"`
	ByStatus *map[string]int32 `json:"byStatus,omitempty"`
}

// NewReleaseCountResult instantiates a new ReleaseCountResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseCountResult() *ReleaseCountResult {
	this := ReleaseCountResult{}
	return &this
}

// NewReleaseCountResultWithDefaults instantiates a new ReleaseCountResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseCountResultWithDefaults() *ReleaseCountResult {
	this := ReleaseCountResult{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ReleaseCountResult) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseCountResult) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ReleaseCountResult) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *ReleaseCountResult) SetTotal(v int32) {
	o.Total = &v
}

// GetByStatus returns the ByStatus field value if set, zero value otherwise.
func (o *ReleaseCountResult) GetByStatus() map[string]int32 {
	if o == nil || IsNil(o.ByStatus) {
		var ret map[string]int32
		return ret
	}
	return *o.ByStatus
}

// GetByStatusOk returns a tuple with the ByStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseCountResult) GetByStatusOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.ByStatus) {
		return nil, false
	}
	return o.ByStatus, true
}

// HasByStatus returns a boolean if a field has been set.
func (o *ReleaseCountResult) HasByStatus() bool {
	if o != nil && !IsNil(o.ByStatus) {
		return true
	}

	return false
}

// SetByStatus gets a reference to the given map[string]int32 and assigns it to the ByStatus field.
func (o *ReleaseCountResult) SetByStatus(v map[string]int32) {
	o.ByStatus = &v
}

func (o ReleaseCountResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseCountResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.ByStatus) {
		toSerialize["byStatus"] = o.ByStatus
	}
	return toSerialize, nil
}

type NullableReleaseCountResult struct {
	value *ReleaseCountResult
	isSet bool
}

func (v NullableReleaseCountResult) Get() *ReleaseCountResult {
	return v.value
}

func (v *NullableReleaseCountResult) Set(val *ReleaseCountResult) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseCountResult) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseCountResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseCountResult(val *ReleaseCountResult) *NullableReleaseCountResult {
	return &NullableReleaseCountResult{value: val, isSet: true}
}

func (v NullableReleaseCountResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseCountResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
