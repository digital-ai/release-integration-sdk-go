/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlanItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanItem{}

// PlanItem struct for PlanItem
type PlanItem struct {
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Owner *string `json:"owner,omitempty"`
	ScheduledStartDate *string `json:"scheduledStartDate,omitempty"`
	DueDate *string `json:"dueDate,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	PlannedDuration *int32 `json:"plannedDuration,omitempty"`
	FlagStatus *FlagStatus `json:"flagStatus,omitempty"`
	FlagComment *string `json:"flagComment,omitempty"`
	OverdueNotified *bool `json:"overdueNotified,omitempty"`
	Flagged *bool `json:"flagged,omitempty"`
	StartOrScheduledDate *string `json:"startOrScheduledDate,omitempty"`
	EndOrDueDate *string `json:"endOrDueDate,omitempty"`
	Children []PlanItem `json:"children,omitempty"`
	Overdue *bool `json:"overdue,omitempty"`
	Done *bool `json:"done,omitempty"`
	Release *Release `json:"release,omitempty"`
	ReleaseUid *int32 `json:"releaseUid,omitempty"`
	Updatable *bool `json:"updatable,omitempty"`
	DisplayPath *string `json:"displayPath,omitempty"`
	Aborted *bool `json:"aborted,omitempty"`
	Active *bool `json:"active,omitempty"`
	VariableUsages []UsagePoint `json:"variableUsages,omitempty"`
	OrCalculateDueDate NullableString `json:"orCalculateDueDate,omitempty"`
	ComputedPlannedDuration map[string]interface{} `json:"computedPlannedDuration,omitempty"`
	ActualDuration map[string]interface{} `json:"actualDuration,omitempty"`
}

// NewPlanItem instantiates a new PlanItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanItem() *PlanItem {
	this := PlanItem{}
	return &this
}

// NewPlanItemWithDefaults instantiates a new PlanItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanItemWithDefaults() *PlanItem {
	this := PlanItem{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PlanItem) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PlanItem) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PlanItem) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PlanItem) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PlanItem) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PlanItem) SetDescription(v string) {
	o.Description = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *PlanItem) GetOwner() string {
	if o == nil || isNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetOwnerOk() (*string, bool) {
	if o == nil || isNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *PlanItem) HasOwner() bool {
	if o != nil && !isNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *PlanItem) SetOwner(v string) {
	o.Owner = &v
}

// GetScheduledStartDate returns the ScheduledStartDate field value if set, zero value otherwise.
func (o *PlanItem) GetScheduledStartDate() string {
	if o == nil || isNil(o.ScheduledStartDate) {
		var ret string
		return ret
	}
	return *o.ScheduledStartDate
}

// GetScheduledStartDateOk returns a tuple with the ScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetScheduledStartDateOk() (*string, bool) {
	if o == nil || isNil(o.ScheduledStartDate) {
		return nil, false
	}
	return o.ScheduledStartDate, true
}

// HasScheduledStartDate returns a boolean if a field has been set.
func (o *PlanItem) HasScheduledStartDate() bool {
	if o != nil && !isNil(o.ScheduledStartDate) {
		return true
	}

	return false
}

// SetScheduledStartDate gets a reference to the given string and assigns it to the ScheduledStartDate field.
func (o *PlanItem) SetScheduledStartDate(v string) {
	o.ScheduledStartDate = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *PlanItem) GetDueDate() string {
	if o == nil || isNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetDueDateOk() (*string, bool) {
	if o == nil || isNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *PlanItem) HasDueDate() bool {
	if o != nil && !isNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *PlanItem) SetDueDate(v string) {
	o.DueDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *PlanItem) GetStartDate() string {
	if o == nil || isNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetStartDateOk() (*string, bool) {
	if o == nil || isNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *PlanItem) HasStartDate() bool {
	if o != nil && !isNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *PlanItem) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *PlanItem) GetEndDate() string {
	if o == nil || isNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetEndDateOk() (*string, bool) {
	if o == nil || isNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *PlanItem) HasEndDate() bool {
	if o != nil && !isNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *PlanItem) SetEndDate(v string) {
	o.EndDate = &v
}

// GetPlannedDuration returns the PlannedDuration field value if set, zero value otherwise.
func (o *PlanItem) GetPlannedDuration() int32 {
	if o == nil || isNil(o.PlannedDuration) {
		var ret int32
		return ret
	}
	return *o.PlannedDuration
}

// GetPlannedDurationOk returns a tuple with the PlannedDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetPlannedDurationOk() (*int32, bool) {
	if o == nil || isNil(o.PlannedDuration) {
		return nil, false
	}
	return o.PlannedDuration, true
}

// HasPlannedDuration returns a boolean if a field has been set.
func (o *PlanItem) HasPlannedDuration() bool {
	if o != nil && !isNil(o.PlannedDuration) {
		return true
	}

	return false
}

// SetPlannedDuration gets a reference to the given int32 and assigns it to the PlannedDuration field.
func (o *PlanItem) SetPlannedDuration(v int32) {
	o.PlannedDuration = &v
}

// GetFlagStatus returns the FlagStatus field value if set, zero value otherwise.
func (o *PlanItem) GetFlagStatus() FlagStatus {
	if o == nil || isNil(o.FlagStatus) {
		var ret FlagStatus
		return ret
	}
	return *o.FlagStatus
}

// GetFlagStatusOk returns a tuple with the FlagStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetFlagStatusOk() (*FlagStatus, bool) {
	if o == nil || isNil(o.FlagStatus) {
		return nil, false
	}
	return o.FlagStatus, true
}

// HasFlagStatus returns a boolean if a field has been set.
func (o *PlanItem) HasFlagStatus() bool {
	if o != nil && !isNil(o.FlagStatus) {
		return true
	}

	return false
}

// SetFlagStatus gets a reference to the given FlagStatus and assigns it to the FlagStatus field.
func (o *PlanItem) SetFlagStatus(v FlagStatus) {
	o.FlagStatus = &v
}

// GetFlagComment returns the FlagComment field value if set, zero value otherwise.
func (o *PlanItem) GetFlagComment() string {
	if o == nil || isNil(o.FlagComment) {
		var ret string
		return ret
	}
	return *o.FlagComment
}

// GetFlagCommentOk returns a tuple with the FlagComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetFlagCommentOk() (*string, bool) {
	if o == nil || isNil(o.FlagComment) {
		return nil, false
	}
	return o.FlagComment, true
}

// HasFlagComment returns a boolean if a field has been set.
func (o *PlanItem) HasFlagComment() bool {
	if o != nil && !isNil(o.FlagComment) {
		return true
	}

	return false
}

// SetFlagComment gets a reference to the given string and assigns it to the FlagComment field.
func (o *PlanItem) SetFlagComment(v string) {
	o.FlagComment = &v
}

// GetOverdueNotified returns the OverdueNotified field value if set, zero value otherwise.
func (o *PlanItem) GetOverdueNotified() bool {
	if o == nil || isNil(o.OverdueNotified) {
		var ret bool
		return ret
	}
	return *o.OverdueNotified
}

// GetOverdueNotifiedOk returns a tuple with the OverdueNotified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetOverdueNotifiedOk() (*bool, bool) {
	if o == nil || isNil(o.OverdueNotified) {
		return nil, false
	}
	return o.OverdueNotified, true
}

// HasOverdueNotified returns a boolean if a field has been set.
func (o *PlanItem) HasOverdueNotified() bool {
	if o != nil && !isNil(o.OverdueNotified) {
		return true
	}

	return false
}

// SetOverdueNotified gets a reference to the given bool and assigns it to the OverdueNotified field.
func (o *PlanItem) SetOverdueNotified(v bool) {
	o.OverdueNotified = &v
}

// GetFlagged returns the Flagged field value if set, zero value otherwise.
func (o *PlanItem) GetFlagged() bool {
	if o == nil || isNil(o.Flagged) {
		var ret bool
		return ret
	}
	return *o.Flagged
}

// GetFlaggedOk returns a tuple with the Flagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetFlaggedOk() (*bool, bool) {
	if o == nil || isNil(o.Flagged) {
		return nil, false
	}
	return o.Flagged, true
}

// HasFlagged returns a boolean if a field has been set.
func (o *PlanItem) HasFlagged() bool {
	if o != nil && !isNil(o.Flagged) {
		return true
	}

	return false
}

// SetFlagged gets a reference to the given bool and assigns it to the Flagged field.
func (o *PlanItem) SetFlagged(v bool) {
	o.Flagged = &v
}

// GetStartOrScheduledDate returns the StartOrScheduledDate field value if set, zero value otherwise.
func (o *PlanItem) GetStartOrScheduledDate() string {
	if o == nil || isNil(o.StartOrScheduledDate) {
		var ret string
		return ret
	}
	return *o.StartOrScheduledDate
}

// GetStartOrScheduledDateOk returns a tuple with the StartOrScheduledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetStartOrScheduledDateOk() (*string, bool) {
	if o == nil || isNil(o.StartOrScheduledDate) {
		return nil, false
	}
	return o.StartOrScheduledDate, true
}

// HasStartOrScheduledDate returns a boolean if a field has been set.
func (o *PlanItem) HasStartOrScheduledDate() bool {
	if o != nil && !isNil(o.StartOrScheduledDate) {
		return true
	}

	return false
}

// SetStartOrScheduledDate gets a reference to the given string and assigns it to the StartOrScheduledDate field.
func (o *PlanItem) SetStartOrScheduledDate(v string) {
	o.StartOrScheduledDate = &v
}

// GetEndOrDueDate returns the EndOrDueDate field value if set, zero value otherwise.
func (o *PlanItem) GetEndOrDueDate() string {
	if o == nil || isNil(o.EndOrDueDate) {
		var ret string
		return ret
	}
	return *o.EndOrDueDate
}

// GetEndOrDueDateOk returns a tuple with the EndOrDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetEndOrDueDateOk() (*string, bool) {
	if o == nil || isNil(o.EndOrDueDate) {
		return nil, false
	}
	return o.EndOrDueDate, true
}

// HasEndOrDueDate returns a boolean if a field has been set.
func (o *PlanItem) HasEndOrDueDate() bool {
	if o != nil && !isNil(o.EndOrDueDate) {
		return true
	}

	return false
}

// SetEndOrDueDate gets a reference to the given string and assigns it to the EndOrDueDate field.
func (o *PlanItem) SetEndOrDueDate(v string) {
	o.EndOrDueDate = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *PlanItem) GetChildren() []PlanItem {
	if o == nil || isNil(o.Children) {
		var ret []PlanItem
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetChildrenOk() ([]PlanItem, bool) {
	if o == nil || isNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *PlanItem) HasChildren() bool {
	if o != nil && !isNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []PlanItem and assigns it to the Children field.
func (o *PlanItem) SetChildren(v []PlanItem) {
	o.Children = v
}

// GetOverdue returns the Overdue field value if set, zero value otherwise.
func (o *PlanItem) GetOverdue() bool {
	if o == nil || isNil(o.Overdue) {
		var ret bool
		return ret
	}
	return *o.Overdue
}

// GetOverdueOk returns a tuple with the Overdue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetOverdueOk() (*bool, bool) {
	if o == nil || isNil(o.Overdue) {
		return nil, false
	}
	return o.Overdue, true
}

// HasOverdue returns a boolean if a field has been set.
func (o *PlanItem) HasOverdue() bool {
	if o != nil && !isNil(o.Overdue) {
		return true
	}

	return false
}

// SetOverdue gets a reference to the given bool and assigns it to the Overdue field.
func (o *PlanItem) SetOverdue(v bool) {
	o.Overdue = &v
}

// GetDone returns the Done field value if set, zero value otherwise.
func (o *PlanItem) GetDone() bool {
	if o == nil || isNil(o.Done) {
		var ret bool
		return ret
	}
	return *o.Done
}

// GetDoneOk returns a tuple with the Done field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetDoneOk() (*bool, bool) {
	if o == nil || isNil(o.Done) {
		return nil, false
	}
	return o.Done, true
}

// HasDone returns a boolean if a field has been set.
func (o *PlanItem) HasDone() bool {
	if o != nil && !isNil(o.Done) {
		return true
	}

	return false
}

// SetDone gets a reference to the given bool and assigns it to the Done field.
func (o *PlanItem) SetDone(v bool) {
	o.Done = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *PlanItem) GetRelease() Release {
	if o == nil || isNil(o.Release) {
		var ret Release
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetReleaseOk() (*Release, bool) {
	if o == nil || isNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *PlanItem) HasRelease() bool {
	if o != nil && !isNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given Release and assigns it to the Release field.
func (o *PlanItem) SetRelease(v Release) {
	o.Release = &v
}

// GetReleaseUid returns the ReleaseUid field value if set, zero value otherwise.
func (o *PlanItem) GetReleaseUid() int32 {
	if o == nil || isNil(o.ReleaseUid) {
		var ret int32
		return ret
	}
	return *o.ReleaseUid
}

// GetReleaseUidOk returns a tuple with the ReleaseUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetReleaseUidOk() (*int32, bool) {
	if o == nil || isNil(o.ReleaseUid) {
		return nil, false
	}
	return o.ReleaseUid, true
}

// HasReleaseUid returns a boolean if a field has been set.
func (o *PlanItem) HasReleaseUid() bool {
	if o != nil && !isNil(o.ReleaseUid) {
		return true
	}

	return false
}

// SetReleaseUid gets a reference to the given int32 and assigns it to the ReleaseUid field.
func (o *PlanItem) SetReleaseUid(v int32) {
	o.ReleaseUid = &v
}

// GetUpdatable returns the Updatable field value if set, zero value otherwise.
func (o *PlanItem) GetUpdatable() bool {
	if o == nil || isNil(o.Updatable) {
		var ret bool
		return ret
	}
	return *o.Updatable
}

// GetUpdatableOk returns a tuple with the Updatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetUpdatableOk() (*bool, bool) {
	if o == nil || isNil(o.Updatable) {
		return nil, false
	}
	return o.Updatable, true
}

// HasUpdatable returns a boolean if a field has been set.
func (o *PlanItem) HasUpdatable() bool {
	if o != nil && !isNil(o.Updatable) {
		return true
	}

	return false
}

// SetUpdatable gets a reference to the given bool and assigns it to the Updatable field.
func (o *PlanItem) SetUpdatable(v bool) {
	o.Updatable = &v
}

// GetDisplayPath returns the DisplayPath field value if set, zero value otherwise.
func (o *PlanItem) GetDisplayPath() string {
	if o == nil || isNil(o.DisplayPath) {
		var ret string
		return ret
	}
	return *o.DisplayPath
}

// GetDisplayPathOk returns a tuple with the DisplayPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetDisplayPathOk() (*string, bool) {
	if o == nil || isNil(o.DisplayPath) {
		return nil, false
	}
	return o.DisplayPath, true
}

// HasDisplayPath returns a boolean if a field has been set.
func (o *PlanItem) HasDisplayPath() bool {
	if o != nil && !isNil(o.DisplayPath) {
		return true
	}

	return false
}

// SetDisplayPath gets a reference to the given string and assigns it to the DisplayPath field.
func (o *PlanItem) SetDisplayPath(v string) {
	o.DisplayPath = &v
}

// GetAborted returns the Aborted field value if set, zero value otherwise.
func (o *PlanItem) GetAborted() bool {
	if o == nil || isNil(o.Aborted) {
		var ret bool
		return ret
	}
	return *o.Aborted
}

// GetAbortedOk returns a tuple with the Aborted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetAbortedOk() (*bool, bool) {
	if o == nil || isNil(o.Aborted) {
		return nil, false
	}
	return o.Aborted, true
}

// HasAborted returns a boolean if a field has been set.
func (o *PlanItem) HasAborted() bool {
	if o != nil && !isNil(o.Aborted) {
		return true
	}

	return false
}

// SetAborted gets a reference to the given bool and assigns it to the Aborted field.
func (o *PlanItem) SetAborted(v bool) {
	o.Aborted = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PlanItem) GetActive() bool {
	if o == nil || isNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetActiveOk() (*bool, bool) {
	if o == nil || isNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PlanItem) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PlanItem) SetActive(v bool) {
	o.Active = &v
}

// GetVariableUsages returns the VariableUsages field value if set, zero value otherwise.
func (o *PlanItem) GetVariableUsages() []UsagePoint {
	if o == nil || isNil(o.VariableUsages) {
		var ret []UsagePoint
		return ret
	}
	return o.VariableUsages
}

// GetVariableUsagesOk returns a tuple with the VariableUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetVariableUsagesOk() ([]UsagePoint, bool) {
	if o == nil || isNil(o.VariableUsages) {
		return nil, false
	}
	return o.VariableUsages, true
}

// HasVariableUsages returns a boolean if a field has been set.
func (o *PlanItem) HasVariableUsages() bool {
	if o != nil && !isNil(o.VariableUsages) {
		return true
	}

	return false
}

// SetVariableUsages gets a reference to the given []UsagePoint and assigns it to the VariableUsages field.
func (o *PlanItem) SetVariableUsages(v []UsagePoint) {
	o.VariableUsages = v
}

// GetOrCalculateDueDate returns the OrCalculateDueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanItem) GetOrCalculateDueDate() string {
	if o == nil || isNil(o.OrCalculateDueDate.Get()) {
		var ret string
		return ret
	}
	return *o.OrCalculateDueDate.Get()
}

// GetOrCalculateDueDateOk returns a tuple with the OrCalculateDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanItem) GetOrCalculateDueDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrCalculateDueDate.Get(), o.OrCalculateDueDate.IsSet()
}

// HasOrCalculateDueDate returns a boolean if a field has been set.
func (o *PlanItem) HasOrCalculateDueDate() bool {
	if o != nil && o.OrCalculateDueDate.IsSet() {
		return true
	}

	return false
}

// SetOrCalculateDueDate gets a reference to the given NullableString and assigns it to the OrCalculateDueDate field.
func (o *PlanItem) SetOrCalculateDueDate(v string) {
	o.OrCalculateDueDate.Set(&v)
}
// SetOrCalculateDueDateNil sets the value for OrCalculateDueDate to be an explicit nil
func (o *PlanItem) SetOrCalculateDueDateNil() {
	o.OrCalculateDueDate.Set(nil)
}

// UnsetOrCalculateDueDate ensures that no value is present for OrCalculateDueDate, not even an explicit nil
func (o *PlanItem) UnsetOrCalculateDueDate() {
	o.OrCalculateDueDate.Unset()
}

// GetComputedPlannedDuration returns the ComputedPlannedDuration field value if set, zero value otherwise.
func (o *PlanItem) GetComputedPlannedDuration() map[string]interface{} {
	if o == nil || isNil(o.ComputedPlannedDuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.ComputedPlannedDuration
}

// GetComputedPlannedDurationOk returns a tuple with the ComputedPlannedDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetComputedPlannedDurationOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.ComputedPlannedDuration) {
		return map[string]interface{}{}, false
	}
	return o.ComputedPlannedDuration, true
}

// HasComputedPlannedDuration returns a boolean if a field has been set.
func (o *PlanItem) HasComputedPlannedDuration() bool {
	if o != nil && !isNil(o.ComputedPlannedDuration) {
		return true
	}

	return false
}

// SetComputedPlannedDuration gets a reference to the given map[string]interface{} and assigns it to the ComputedPlannedDuration field.
func (o *PlanItem) SetComputedPlannedDuration(v map[string]interface{}) {
	o.ComputedPlannedDuration = v
}

// GetActualDuration returns the ActualDuration field value if set, zero value otherwise.
func (o *PlanItem) GetActualDuration() map[string]interface{} {
	if o == nil || isNil(o.ActualDuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.ActualDuration
}

// GetActualDurationOk returns a tuple with the ActualDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanItem) GetActualDurationOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.ActualDuration) {
		return map[string]interface{}{}, false
	}
	return o.ActualDuration, true
}

// HasActualDuration returns a boolean if a field has been set.
func (o *PlanItem) HasActualDuration() bool {
	if o != nil && !isNil(o.ActualDuration) {
		return true
	}

	return false
}

// SetActualDuration gets a reference to the given map[string]interface{} and assigns it to the ActualDuration field.
func (o *PlanItem) SetActualDuration(v map[string]interface{}) {
	o.ActualDuration = v
}

func (o PlanItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !isNil(o.ScheduledStartDate) {
		toSerialize["scheduledStartDate"] = o.ScheduledStartDate
	}
	if !isNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !isNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !isNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !isNil(o.PlannedDuration) {
		toSerialize["plannedDuration"] = o.PlannedDuration
	}
	if !isNil(o.FlagStatus) {
		toSerialize["flagStatus"] = o.FlagStatus
	}
	if !isNil(o.FlagComment) {
		toSerialize["flagComment"] = o.FlagComment
	}
	if !isNil(o.OverdueNotified) {
		toSerialize["overdueNotified"] = o.OverdueNotified
	}
	if !isNil(o.Flagged) {
		toSerialize["flagged"] = o.Flagged
	}
	if !isNil(o.StartOrScheduledDate) {
		toSerialize["startOrScheduledDate"] = o.StartOrScheduledDate
	}
	if !isNil(o.EndOrDueDate) {
		toSerialize["endOrDueDate"] = o.EndOrDueDate
	}
	if !isNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !isNil(o.Overdue) {
		toSerialize["overdue"] = o.Overdue
	}
	if !isNil(o.Done) {
		toSerialize["done"] = o.Done
	}
	if !isNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !isNil(o.ReleaseUid) {
		toSerialize["releaseUid"] = o.ReleaseUid
	}
	if !isNil(o.Updatable) {
		toSerialize["updatable"] = o.Updatable
	}
	if !isNil(o.DisplayPath) {
		toSerialize["displayPath"] = o.DisplayPath
	}
	if !isNil(o.Aborted) {
		toSerialize["aborted"] = o.Aborted
	}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.VariableUsages) {
		toSerialize["variableUsages"] = o.VariableUsages
	}
	if o.OrCalculateDueDate.IsSet() {
		toSerialize["orCalculateDueDate"] = o.OrCalculateDueDate.Get()
	}
	if !isNil(o.ComputedPlannedDuration) {
		toSerialize["computedPlannedDuration"] = o.ComputedPlannedDuration
	}
	if !isNil(o.ActualDuration) {
		toSerialize["actualDuration"] = o.ActualDuration
	}
	return toSerialize, nil
}

type NullablePlanItem struct {
	value *PlanItem
	isSet bool
}

func (v NullablePlanItem) Get() *PlanItem {
	return v.value
}

func (v *NullablePlanItem) Set(val *PlanItem) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanItem) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanItem(val *PlanItem) *NullablePlanItem {
	return &NullablePlanItem{value: val, isSet: true}
}

func (v NullablePlanItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


