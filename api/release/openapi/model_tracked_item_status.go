/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TrackedItemStatus the model 'TrackedItemStatus'
type TrackedItemStatus string

// List of TrackedItemStatus
const (
	NOT_READY TrackedItemStatus = "NOT_READY"
	READY TrackedItemStatus = "READY"
	SKIPPED TrackedItemStatus = "SKIPPED"
)

// All allowed values of TrackedItemStatus enum
var AllowedTrackedItemStatusEnumValues = []TrackedItemStatus{
	"NOT_READY",
	"READY",
	"SKIPPED",
}

func (v *TrackedItemStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackedItemStatus(value)
	for _, existing := range AllowedTrackedItemStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackedItemStatus", value)
}

// NewTrackedItemStatusFromValue returns a pointer to a valid TrackedItemStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackedItemStatusFromValue(v string) (*TrackedItemStatus, error) {
	ev := TrackedItemStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackedItemStatus: valid values are %v", v, AllowedTrackedItemStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackedItemStatus) IsValid() bool {
	for _, existing := range AllowedTrackedItemStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackedItemStatus value
func (v TrackedItemStatus) Ptr() *TrackedItemStatus {
	return &v
}

type NullableTrackedItemStatus struct {
	value *TrackedItemStatus
	isSet bool
}

func (v NullableTrackedItemStatus) Get() *TrackedItemStatus {
	return v.value
}

func (v *NullableTrackedItemStatus) Set(val *TrackedItemStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackedItemStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackedItemStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackedItemStatus(val *TrackedItemStatus) *NullableTrackedItemStatus {
	return &NullableTrackedItemStatus{value: val, isSet: true}
}

func (v NullableTrackedItemStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackedItemStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

