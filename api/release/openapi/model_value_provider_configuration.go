/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValueProviderConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueProviderConfiguration{}

// ValueProviderConfiguration struct for ValueProviderConfiguration
type ValueProviderConfiguration struct {
	Id       *string   `json:"id,omitempty"`
	Type     *string   `json:"type,omitempty"`
	Variable *Variable `json:"variable,omitempty"`
}

// NewValueProviderConfiguration instantiates a new ValueProviderConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueProviderConfiguration() *ValueProviderConfiguration {
	this := ValueProviderConfiguration{}
	return &this
}

// NewValueProviderConfigurationWithDefaults instantiates a new ValueProviderConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueProviderConfigurationWithDefaults() *ValueProviderConfiguration {
	this := ValueProviderConfiguration{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ValueProviderConfiguration) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueProviderConfiguration) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ValueProviderConfiguration) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ValueProviderConfiguration) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ValueProviderConfiguration) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueProviderConfiguration) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ValueProviderConfiguration) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ValueProviderConfiguration) SetType(v string) {
	o.Type = &v
}

// GetVariable returns the Variable field value if set, zero value otherwise.
func (o *ValueProviderConfiguration) GetVariable() Variable {
	if o == nil || IsNil(o.Variable) {
		var ret Variable
		return ret
	}
	return *o.Variable
}

// GetVariableOk returns a tuple with the Variable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueProviderConfiguration) GetVariableOk() (*Variable, bool) {
	if o == nil || IsNil(o.Variable) {
		return nil, false
	}
	return o.Variable, true
}

// HasVariable returns a boolean if a field has been set.
func (o *ValueProviderConfiguration) HasVariable() bool {
	if o != nil && !IsNil(o.Variable) {
		return true
	}

	return false
}

// SetVariable gets a reference to the given Variable and assigns it to the Variable field.
func (o *ValueProviderConfiguration) SetVariable(v Variable) {
	o.Variable = &v
}

func (o ValueProviderConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueProviderConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Variable) {
		toSerialize["variable"] = o.Variable
	}
	return toSerialize, nil
}

type NullableValueProviderConfiguration struct {
	value *ValueProviderConfiguration
	isSet bool
}

func (v NullableValueProviderConfiguration) Get() *ValueProviderConfiguration {
	return v.value
}

func (v *NullableValueProviderConfiguration) Set(val *ValueProviderConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableValueProviderConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableValueProviderConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueProviderConfiguration(val *ValueProviderConfiguration) *NullableValueProviderConfiguration {
	return &NullableValueProviderConfiguration{value: val, isSet: true}
}

func (v NullableValueProviderConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueProviderConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
