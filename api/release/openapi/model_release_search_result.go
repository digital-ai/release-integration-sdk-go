/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseSearchResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseSearchResult{}

// ReleaseSearchResult struct for ReleaseSearchResult
type ReleaseSearchResult struct {
	Page *int64 `json:"page,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Releases []Release `json:"releases,omitempty"`
}

// NewReleaseSearchResult instantiates a new ReleaseSearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseSearchResult() *ReleaseSearchResult {
	this := ReleaseSearchResult{}
	return &this
}

// NewReleaseSearchResultWithDefaults instantiates a new ReleaseSearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseSearchResultWithDefaults() *ReleaseSearchResult {
	this := ReleaseSearchResult{}
	return &this
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *ReleaseSearchResult) GetPage() int64 {
	if o == nil || isNil(o.Page) {
		var ret int64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchResult) GetPageOk() (*int64, bool) {
	if o == nil || isNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *ReleaseSearchResult) HasPage() bool {
	if o != nil && !isNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int64 and assigns it to the Page field.
func (o *ReleaseSearchResult) SetPage(v int64) {
	o.Page = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ReleaseSearchResult) GetSize() int64 {
	if o == nil || isNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchResult) GetSizeOk() (*int64, bool) {
	if o == nil || isNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ReleaseSearchResult) HasSize() bool {
	if o != nil && !isNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *ReleaseSearchResult) SetSize(v int64) {
	o.Size = &v
}

// GetReleases returns the Releases field value if set, zero value otherwise.
func (o *ReleaseSearchResult) GetReleases() []Release {
	if o == nil || isNil(o.Releases) {
		var ret []Release
		return ret
	}
	return o.Releases
}

// GetReleasesOk returns a tuple with the Releases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchResult) GetReleasesOk() ([]Release, bool) {
	if o == nil || isNil(o.Releases) {
		return nil, false
	}
	return o.Releases, true
}

// HasReleases returns a boolean if a field has been set.
func (o *ReleaseSearchResult) HasReleases() bool {
	if o != nil && !isNil(o.Releases) {
		return true
	}

	return false
}

// SetReleases gets a reference to the given []Release and assigns it to the Releases field.
func (o *ReleaseSearchResult) SetReleases(v []Release) {
	o.Releases = v
}

func (o ReleaseSearchResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseSearchResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !isNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !isNil(o.Releases) {
		toSerialize["releases"] = o.Releases
	}
	return toSerialize, nil
}

type NullableReleaseSearchResult struct {
	value *ReleaseSearchResult
	isSet bool
}

func (v NullableReleaseSearchResult) Get() *ReleaseSearchResult {
	return v.value
}

func (v *NullableReleaseSearchResult) Set(val *ReleaseSearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseSearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseSearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseSearchResult(val *ReleaseSearchResult) *NullableReleaseSearchResult {
	return &NullableReleaseSearchResult{value: val, isSet: true}
}

func (v NullableReleaseSearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseSearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


