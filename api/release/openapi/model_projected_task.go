/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectedTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectedTask{}

// ProjectedTask struct for ProjectedTask
type ProjectedTask struct {
	Id *string `json:"id,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	StartDateString *string `json:"startDateString,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	EndDateString *string `json:"endDateString,omitempty"`
	Status *string `json:"status,omitempty"`
	Type *string `json:"type,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewProjectedTask instantiates a new ProjectedTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectedTask() *ProjectedTask {
	this := ProjectedTask{}
	return &this
}

// NewProjectedTaskWithDefaults instantiates a new ProjectedTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectedTaskWithDefaults() *ProjectedTask {
	this := ProjectedTask{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectedTask) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedTask) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectedTask) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProjectedTask) SetId(v string) {
	o.Id = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ProjectedTask) GetStartDate() string {
	if o == nil || isNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedTask) GetStartDateOk() (*string, bool) {
	if o == nil || isNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ProjectedTask) HasStartDate() bool {
	if o != nil && !isNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ProjectedTask) SetStartDate(v string) {
	o.StartDate = &v
}

// GetStartDateString returns the StartDateString field value if set, zero value otherwise.
func (o *ProjectedTask) GetStartDateString() string {
	if o == nil || isNil(o.StartDateString) {
		var ret string
		return ret
	}
	return *o.StartDateString
}

// GetStartDateStringOk returns a tuple with the StartDateString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedTask) GetStartDateStringOk() (*string, bool) {
	if o == nil || isNil(o.StartDateString) {
		return nil, false
	}
	return o.StartDateString, true
}

// HasStartDateString returns a boolean if a field has been set.
func (o *ProjectedTask) HasStartDateString() bool {
	if o != nil && !isNil(o.StartDateString) {
		return true
	}

	return false
}

// SetStartDateString gets a reference to the given string and assigns it to the StartDateString field.
func (o *ProjectedTask) SetStartDateString(v string) {
	o.StartDateString = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ProjectedTask) GetEndDate() string {
	if o == nil || isNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedTask) GetEndDateOk() (*string, bool) {
	if o == nil || isNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ProjectedTask) HasEndDate() bool {
	if o != nil && !isNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ProjectedTask) SetEndDate(v string) {
	o.EndDate = &v
}

// GetEndDateString returns the EndDateString field value if set, zero value otherwise.
func (o *ProjectedTask) GetEndDateString() string {
	if o == nil || isNil(o.EndDateString) {
		var ret string
		return ret
	}
	return *o.EndDateString
}

// GetEndDateStringOk returns a tuple with the EndDateString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedTask) GetEndDateStringOk() (*string, bool) {
	if o == nil || isNil(o.EndDateString) {
		return nil, false
	}
	return o.EndDateString, true
}

// HasEndDateString returns a boolean if a field has been set.
func (o *ProjectedTask) HasEndDateString() bool {
	if o != nil && !isNil(o.EndDateString) {
		return true
	}

	return false
}

// SetEndDateString gets a reference to the given string and assigns it to the EndDateString field.
func (o *ProjectedTask) SetEndDateString(v string) {
	o.EndDateString = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProjectedTask) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedTask) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProjectedTask) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ProjectedTask) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProjectedTask) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedTask) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProjectedTask) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProjectedTask) SetType(v string) {
	o.Type = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ProjectedTask) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedTask) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ProjectedTask) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ProjectedTask) SetTitle(v string) {
	o.Title = &v
}

func (o ProjectedTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectedTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !isNil(o.StartDateString) {
		toSerialize["startDateString"] = o.StartDateString
	}
	if !isNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !isNil(o.EndDateString) {
		toSerialize["endDateString"] = o.EndDateString
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableProjectedTask struct {
	value *ProjectedTask
	isSet bool
}

func (v NullableProjectedTask) Get() *ProjectedTask {
	return v.value
}

func (v *NullableProjectedTask) Set(val *ProjectedTask) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectedTask) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectedTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectedTask(val *ProjectedTask) *NullableProjectedTask {
	return &NullableProjectedTask{value: val, isSet: true}
}

func (v NullableProjectedTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectedTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


