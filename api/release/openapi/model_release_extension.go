/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseExtension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseExtension{}

// ReleaseExtension struct for ReleaseExtension
type ReleaseExtension struct {
	VariableUsages []UsagePoint `json:"variableUsages,omitempty"`
}

// NewReleaseExtension instantiates a new ReleaseExtension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseExtension() *ReleaseExtension {
	this := ReleaseExtension{}
	return &this
}

// NewReleaseExtensionWithDefaults instantiates a new ReleaseExtension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseExtensionWithDefaults() *ReleaseExtension {
	this := ReleaseExtension{}
	return &this
}

// GetVariableUsages returns the VariableUsages field value if set, zero value otherwise.
func (o *ReleaseExtension) GetVariableUsages() []UsagePoint {
	if o == nil || isNil(o.VariableUsages) {
		var ret []UsagePoint
		return ret
	}
	return o.VariableUsages
}

// GetVariableUsagesOk returns a tuple with the VariableUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseExtension) GetVariableUsagesOk() ([]UsagePoint, bool) {
	if o == nil || isNil(o.VariableUsages) {
		return nil, false
	}
	return o.VariableUsages, true
}

// HasVariableUsages returns a boolean if a field has been set.
func (o *ReleaseExtension) HasVariableUsages() bool {
	if o != nil && !isNil(o.VariableUsages) {
		return true
	}

	return false
}

// SetVariableUsages gets a reference to the given []UsagePoint and assigns it to the VariableUsages field.
func (o *ReleaseExtension) SetVariableUsages(v []UsagePoint) {
	o.VariableUsages = v
}

func (o ReleaseExtension) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseExtension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.VariableUsages) {
		toSerialize["variableUsages"] = o.VariableUsages
	}
	return toSerialize, nil
}

type NullableReleaseExtension struct {
	value *ReleaseExtension
	isSet bool
}

func (v NullableReleaseExtension) Get() *ReleaseExtension {
	return v.value
}

func (v *NullableReleaseExtension) Set(val *ReleaseExtension) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseExtension) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseExtension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseExtension(val *ReleaseExtension) *NullableReleaseExtension {
	return &NullableReleaseExtension{value: val, isSet: true}
}

func (v NullableReleaseExtension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseExtension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


