/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Release type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Release{}

// Release struct for Release
type Release struct {
	StartDate *string `json:"startDate,omitempty"`
	ScheduledStartDate *string `json:"scheduledStartDate,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	DueDate *string `json:"dueDate,omitempty"`
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Owner *string `json:"owner,omitempty"`
	PlannedDuration *int32 `json:"plannedDuration,omitempty"`
	FlagStatus *FlagStatus `json:"flagStatus,omitempty"`
	FlagComment *string `json:"flagComment,omitempty"`
	OverdueNotified *bool `json:"overdueNotified,omitempty"`
	Flagged *bool `json:"flagged,omitempty"`
	StartOrScheduledDate *string `json:"startOrScheduledDate,omitempty"`
	EndOrDueDate *string `json:"endOrDueDate,omitempty"`
	Overdue *bool `json:"overdue,omitempty"`
	OrCalculateDueDate NullableString `json:"orCalculateDueDate,omitempty"`
	ComputedPlannedDuration map[string]interface{} `json:"computedPlannedDuration,omitempty"`
	ActualDuration map[string]interface{} `json:"actualDuration,omitempty"`
	RootReleaseId *string `json:"rootReleaseId,omitempty"`
	MaxConcurrentReleases *int32 `json:"maxConcurrentReleases,omitempty"`
	// Deprecated
	ReleaseTriggers []ReleaseTrigger `json:"releaseTriggers,omitempty"`
	Teams []Team `json:"teams,omitempty"`
	// Deprecated
	MemberViewers []string `json:"memberViewers,omitempty"`
	// Deprecated
	RoleViewers []string `json:"roleViewers,omitempty"`
	Attachments []Attachment `json:"attachments,omitempty"`
	Phases []Phase `json:"phases,omitempty"`
	QueryableStartDate *string `json:"queryableStartDate,omitempty"`
	QueryableEndDate *string `json:"queryableEndDate,omitempty"`
	RealFlagStatus *FlagStatus `json:"realFlagStatus,omitempty"`
	Status *ReleaseStatus `json:"status,omitempty"`
	Tags []string `json:"tags,omitempty"`
	Variables []Variable `json:"variables,omitempty"`
	CalendarLinkToken *string `json:"calendarLinkToken,omitempty"`
	CalendarPublished *bool `json:"calendarPublished,omitempty"`
	Tutorial *bool `json:"tutorial,omitempty"`
	AbortOnFailure *bool `json:"abortOnFailure,omitempty"`
	ArchiveRelease *bool `json:"archiveRelease,omitempty"`
	AllowPasswordsInAllFields *bool `json:"allowPasswordsInAllFields,omitempty"`
	DisableNotifications *bool `json:"disableNotifications,omitempty"`
	AllowConcurrentReleasesFromTrigger *bool `json:"allowConcurrentReleasesFromTrigger,omitempty"`
	OriginTemplateId *string `json:"originTemplateId,omitempty"`
	CreatedFromTrigger *bool `json:"createdFromTrigger,omitempty"`
	ScriptUsername *string `json:"scriptUsername,omitempty"`
	ScriptUserPassword *string `json:"scriptUserPassword,omitempty"`
	Extensions []ReleaseExtension `json:"extensions,omitempty"`
	StartedFromTaskId *string `json:"startedFromTaskId,omitempty"`
	AutoStart *bool `json:"autoStart,omitempty"`
	AutomatedResumeCount *int32 `json:"automatedResumeCount,omitempty"`
	MaxAutomatedResumes *int32 `json:"maxAutomatedResumes,omitempty"`
	AbortComment *string `json:"abortComment,omitempty"`
	VariableMapping *map[string]string `json:"variableMapping,omitempty"`
	RiskProfile *RiskProfile `json:"riskProfile,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"$metadata,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	CiUid *int32 `json:"ciUid,omitempty"`
	VariableValues map[string]map[string]interface{} `json:"variableValues,omitempty"`
	PasswordVariableValues map[string]map[string]interface{} `json:"passwordVariableValues,omitempty"`
	CiPropertyVariables []Variable `json:"ciPropertyVariables,omitempty"`
	AllStringVariableValues *map[string]string `json:"allStringVariableValues,omitempty"`
	AllReleaseGlobalAndFolderVariables []Variable `json:"allReleaseGlobalAndFolderVariables,omitempty"`
	AllVariableValuesAsStringsWithInterpolationInfo *map[string]ValueWithInterpolation `json:"allVariableValuesAsStringsWithInterpolationInfo,omitempty"`
	VariablesKeysInNonInterpolatableVariableValues []string `json:"variablesKeysInNonInterpolatableVariableValues,omitempty"`
	VariablesByKeys *map[string]Variable `json:"variablesByKeys,omitempty"`
	AllVariables []Variable `json:"allVariables,omitempty"`
	GlobalVariables *GlobalVariables `json:"globalVariables,omitempty"`
	FolderVariables *FolderVariables `json:"folderVariables,omitempty"`
	AdminTeam *Team `json:"adminTeam,omitempty"`
	ReleaseAttachments []Attachment `json:"releaseAttachments,omitempty"`
	CurrentPhase *Phase `json:"currentPhase,omitempty"`
	CurrentTask *Task `json:"currentTask,omitempty"`
	AllTasks []Task `json:"allTasks,omitempty"`
	AllGates []GateTask `json:"allGates,omitempty"`
	AllUserInputTasks []UserInputTask `json:"allUserInputTasks,omitempty"`
	Done *bool `json:"done,omitempty"`
	PlannedOrActive *bool `json:"plannedOrActive,omitempty"`
	Active *bool `json:"active,omitempty"`
	Defunct *bool `json:"defunct,omitempty"`
	Updatable *bool `json:"updatable,omitempty"`
	Aborted *bool `json:"aborted,omitempty"`
	Failing *bool `json:"failing,omitempty"`
	Failed *bool `json:"failed,omitempty"`
	Paused *bool `json:"paused,omitempty"`
	Template *bool `json:"template,omitempty"`
	Planned *bool `json:"planned,omitempty"`
	InProgress *bool `json:"inProgress,omitempty"`
	Release *Release `json:"release,omitempty"`
	ReleaseUid *int32 `json:"releaseUid,omitempty"`
	DisplayPath *string `json:"displayPath,omitempty"`
	Children []PlanItem `json:"children,omitempty"`
	AllPlanItems []PlanItem `json:"allPlanItems,omitempty"`
	Url *string `json:"url,omitempty"`
	ActiveTasks []Task `json:"activeTasks,omitempty"`
	VariableUsages []UsagePoint `json:"variableUsages,omitempty"`
	Pending *bool `json:"pending,omitempty"`
}

// NewRelease instantiates a new Release object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelease() *Release {
	this := Release{}
	return &this
}

// NewReleaseWithDefaults instantiates a new Release object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseWithDefaults() *Release {
	this := Release{}
	return &this
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Release) GetStartDate() string {
	if o == nil || isNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetStartDateOk() (*string, bool) {
	if o == nil || isNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Release) HasStartDate() bool {
	if o != nil && !isNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *Release) SetStartDate(v string) {
	o.StartDate = &v
}

// GetScheduledStartDate returns the ScheduledStartDate field value if set, zero value otherwise.
func (o *Release) GetScheduledStartDate() string {
	if o == nil || isNil(o.ScheduledStartDate) {
		var ret string
		return ret
	}
	return *o.ScheduledStartDate
}

// GetScheduledStartDateOk returns a tuple with the ScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetScheduledStartDateOk() (*string, bool) {
	if o == nil || isNil(o.ScheduledStartDate) {
		return nil, false
	}
	return o.ScheduledStartDate, true
}

// HasScheduledStartDate returns a boolean if a field has been set.
func (o *Release) HasScheduledStartDate() bool {
	if o != nil && !isNil(o.ScheduledStartDate) {
		return true
	}

	return false
}

// SetScheduledStartDate gets a reference to the given string and assigns it to the ScheduledStartDate field.
func (o *Release) SetScheduledStartDate(v string) {
	o.ScheduledStartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Release) GetEndDate() string {
	if o == nil || isNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetEndDateOk() (*string, bool) {
	if o == nil || isNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Release) HasEndDate() bool {
	if o != nil && !isNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *Release) SetEndDate(v string) {
	o.EndDate = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *Release) GetDueDate() string {
	if o == nil || isNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetDueDateOk() (*string, bool) {
	if o == nil || isNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *Release) HasDueDate() bool {
	if o != nil && !isNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *Release) SetDueDate(v string) {
	o.DueDate = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Release) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Release) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Release) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Release) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Release) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Release) SetDescription(v string) {
	o.Description = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Release) GetOwner() string {
	if o == nil || isNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetOwnerOk() (*string, bool) {
	if o == nil || isNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Release) HasOwner() bool {
	if o != nil && !isNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Release) SetOwner(v string) {
	o.Owner = &v
}

// GetPlannedDuration returns the PlannedDuration field value if set, zero value otherwise.
func (o *Release) GetPlannedDuration() int32 {
	if o == nil || isNil(o.PlannedDuration) {
		var ret int32
		return ret
	}
	return *o.PlannedDuration
}

// GetPlannedDurationOk returns a tuple with the PlannedDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetPlannedDurationOk() (*int32, bool) {
	if o == nil || isNil(o.PlannedDuration) {
		return nil, false
	}
	return o.PlannedDuration, true
}

// HasPlannedDuration returns a boolean if a field has been set.
func (o *Release) HasPlannedDuration() bool {
	if o != nil && !isNil(o.PlannedDuration) {
		return true
	}

	return false
}

// SetPlannedDuration gets a reference to the given int32 and assigns it to the PlannedDuration field.
func (o *Release) SetPlannedDuration(v int32) {
	o.PlannedDuration = &v
}

// GetFlagStatus returns the FlagStatus field value if set, zero value otherwise.
func (o *Release) GetFlagStatus() FlagStatus {
	if o == nil || isNil(o.FlagStatus) {
		var ret FlagStatus
		return ret
	}
	return *o.FlagStatus
}

// GetFlagStatusOk returns a tuple with the FlagStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetFlagStatusOk() (*FlagStatus, bool) {
	if o == nil || isNil(o.FlagStatus) {
		return nil, false
	}
	return o.FlagStatus, true
}

// HasFlagStatus returns a boolean if a field has been set.
func (o *Release) HasFlagStatus() bool {
	if o != nil && !isNil(o.FlagStatus) {
		return true
	}

	return false
}

// SetFlagStatus gets a reference to the given FlagStatus and assigns it to the FlagStatus field.
func (o *Release) SetFlagStatus(v FlagStatus) {
	o.FlagStatus = &v
}

// GetFlagComment returns the FlagComment field value if set, zero value otherwise.
func (o *Release) GetFlagComment() string {
	if o == nil || isNil(o.FlagComment) {
		var ret string
		return ret
	}
	return *o.FlagComment
}

// GetFlagCommentOk returns a tuple with the FlagComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetFlagCommentOk() (*string, bool) {
	if o == nil || isNil(o.FlagComment) {
		return nil, false
	}
	return o.FlagComment, true
}

// HasFlagComment returns a boolean if a field has been set.
func (o *Release) HasFlagComment() bool {
	if o != nil && !isNil(o.FlagComment) {
		return true
	}

	return false
}

// SetFlagComment gets a reference to the given string and assigns it to the FlagComment field.
func (o *Release) SetFlagComment(v string) {
	o.FlagComment = &v
}

// GetOverdueNotified returns the OverdueNotified field value if set, zero value otherwise.
func (o *Release) GetOverdueNotified() bool {
	if o == nil || isNil(o.OverdueNotified) {
		var ret bool
		return ret
	}
	return *o.OverdueNotified
}

// GetOverdueNotifiedOk returns a tuple with the OverdueNotified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetOverdueNotifiedOk() (*bool, bool) {
	if o == nil || isNil(o.OverdueNotified) {
		return nil, false
	}
	return o.OverdueNotified, true
}

// HasOverdueNotified returns a boolean if a field has been set.
func (o *Release) HasOverdueNotified() bool {
	if o != nil && !isNil(o.OverdueNotified) {
		return true
	}

	return false
}

// SetOverdueNotified gets a reference to the given bool and assigns it to the OverdueNotified field.
func (o *Release) SetOverdueNotified(v bool) {
	o.OverdueNotified = &v
}

// GetFlagged returns the Flagged field value if set, zero value otherwise.
func (o *Release) GetFlagged() bool {
	if o == nil || isNil(o.Flagged) {
		var ret bool
		return ret
	}
	return *o.Flagged
}

// GetFlaggedOk returns a tuple with the Flagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetFlaggedOk() (*bool, bool) {
	if o == nil || isNil(o.Flagged) {
		return nil, false
	}
	return o.Flagged, true
}

// HasFlagged returns a boolean if a field has been set.
func (o *Release) HasFlagged() bool {
	if o != nil && !isNil(o.Flagged) {
		return true
	}

	return false
}

// SetFlagged gets a reference to the given bool and assigns it to the Flagged field.
func (o *Release) SetFlagged(v bool) {
	o.Flagged = &v
}

// GetStartOrScheduledDate returns the StartOrScheduledDate field value if set, zero value otherwise.
func (o *Release) GetStartOrScheduledDate() string {
	if o == nil || isNil(o.StartOrScheduledDate) {
		var ret string
		return ret
	}
	return *o.StartOrScheduledDate
}

// GetStartOrScheduledDateOk returns a tuple with the StartOrScheduledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetStartOrScheduledDateOk() (*string, bool) {
	if o == nil || isNil(o.StartOrScheduledDate) {
		return nil, false
	}
	return o.StartOrScheduledDate, true
}

// HasStartOrScheduledDate returns a boolean if a field has been set.
func (o *Release) HasStartOrScheduledDate() bool {
	if o != nil && !isNil(o.StartOrScheduledDate) {
		return true
	}

	return false
}

// SetStartOrScheduledDate gets a reference to the given string and assigns it to the StartOrScheduledDate field.
func (o *Release) SetStartOrScheduledDate(v string) {
	o.StartOrScheduledDate = &v
}

// GetEndOrDueDate returns the EndOrDueDate field value if set, zero value otherwise.
func (o *Release) GetEndOrDueDate() string {
	if o == nil || isNil(o.EndOrDueDate) {
		var ret string
		return ret
	}
	return *o.EndOrDueDate
}

// GetEndOrDueDateOk returns a tuple with the EndOrDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetEndOrDueDateOk() (*string, bool) {
	if o == nil || isNil(o.EndOrDueDate) {
		return nil, false
	}
	return o.EndOrDueDate, true
}

// HasEndOrDueDate returns a boolean if a field has been set.
func (o *Release) HasEndOrDueDate() bool {
	if o != nil && !isNil(o.EndOrDueDate) {
		return true
	}

	return false
}

// SetEndOrDueDate gets a reference to the given string and assigns it to the EndOrDueDate field.
func (o *Release) SetEndOrDueDate(v string) {
	o.EndOrDueDate = &v
}

// GetOverdue returns the Overdue field value if set, zero value otherwise.
func (o *Release) GetOverdue() bool {
	if o == nil || isNil(o.Overdue) {
		var ret bool
		return ret
	}
	return *o.Overdue
}

// GetOverdueOk returns a tuple with the Overdue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetOverdueOk() (*bool, bool) {
	if o == nil || isNil(o.Overdue) {
		return nil, false
	}
	return o.Overdue, true
}

// HasOverdue returns a boolean if a field has been set.
func (o *Release) HasOverdue() bool {
	if o != nil && !isNil(o.Overdue) {
		return true
	}

	return false
}

// SetOverdue gets a reference to the given bool and assigns it to the Overdue field.
func (o *Release) SetOverdue(v bool) {
	o.Overdue = &v
}

// GetOrCalculateDueDate returns the OrCalculateDueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Release) GetOrCalculateDueDate() string {
	if o == nil || isNil(o.OrCalculateDueDate.Get()) {
		var ret string
		return ret
	}
	return *o.OrCalculateDueDate.Get()
}

// GetOrCalculateDueDateOk returns a tuple with the OrCalculateDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Release) GetOrCalculateDueDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrCalculateDueDate.Get(), o.OrCalculateDueDate.IsSet()
}

// HasOrCalculateDueDate returns a boolean if a field has been set.
func (o *Release) HasOrCalculateDueDate() bool {
	if o != nil && o.OrCalculateDueDate.IsSet() {
		return true
	}

	return false
}

// SetOrCalculateDueDate gets a reference to the given NullableString and assigns it to the OrCalculateDueDate field.
func (o *Release) SetOrCalculateDueDate(v string) {
	o.OrCalculateDueDate.Set(&v)
}
// SetOrCalculateDueDateNil sets the value for OrCalculateDueDate to be an explicit nil
func (o *Release) SetOrCalculateDueDateNil() {
	o.OrCalculateDueDate.Set(nil)
}

// UnsetOrCalculateDueDate ensures that no value is present for OrCalculateDueDate, not even an explicit nil
func (o *Release) UnsetOrCalculateDueDate() {
	o.OrCalculateDueDate.Unset()
}

// GetComputedPlannedDuration returns the ComputedPlannedDuration field value if set, zero value otherwise.
func (o *Release) GetComputedPlannedDuration() map[string]interface{} {
	if o == nil || isNil(o.ComputedPlannedDuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.ComputedPlannedDuration
}

// GetComputedPlannedDurationOk returns a tuple with the ComputedPlannedDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetComputedPlannedDurationOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.ComputedPlannedDuration) {
		return map[string]interface{}{}, false
	}
	return o.ComputedPlannedDuration, true
}

// HasComputedPlannedDuration returns a boolean if a field has been set.
func (o *Release) HasComputedPlannedDuration() bool {
	if o != nil && !isNil(o.ComputedPlannedDuration) {
		return true
	}

	return false
}

// SetComputedPlannedDuration gets a reference to the given map[string]interface{} and assigns it to the ComputedPlannedDuration field.
func (o *Release) SetComputedPlannedDuration(v map[string]interface{}) {
	o.ComputedPlannedDuration = v
}

// GetActualDuration returns the ActualDuration field value if set, zero value otherwise.
func (o *Release) GetActualDuration() map[string]interface{} {
	if o == nil || isNil(o.ActualDuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.ActualDuration
}

// GetActualDurationOk returns a tuple with the ActualDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetActualDurationOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.ActualDuration) {
		return map[string]interface{}{}, false
	}
	return o.ActualDuration, true
}

// HasActualDuration returns a boolean if a field has been set.
func (o *Release) HasActualDuration() bool {
	if o != nil && !isNil(o.ActualDuration) {
		return true
	}

	return false
}

// SetActualDuration gets a reference to the given map[string]interface{} and assigns it to the ActualDuration field.
func (o *Release) SetActualDuration(v map[string]interface{}) {
	o.ActualDuration = v
}

// GetRootReleaseId returns the RootReleaseId field value if set, zero value otherwise.
func (o *Release) GetRootReleaseId() string {
	if o == nil || isNil(o.RootReleaseId) {
		var ret string
		return ret
	}
	return *o.RootReleaseId
}

// GetRootReleaseIdOk returns a tuple with the RootReleaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetRootReleaseIdOk() (*string, bool) {
	if o == nil || isNil(o.RootReleaseId) {
		return nil, false
	}
	return o.RootReleaseId, true
}

// HasRootReleaseId returns a boolean if a field has been set.
func (o *Release) HasRootReleaseId() bool {
	if o != nil && !isNil(o.RootReleaseId) {
		return true
	}

	return false
}

// SetRootReleaseId gets a reference to the given string and assigns it to the RootReleaseId field.
func (o *Release) SetRootReleaseId(v string) {
	o.RootReleaseId = &v
}

// GetMaxConcurrentReleases returns the MaxConcurrentReleases field value if set, zero value otherwise.
func (o *Release) GetMaxConcurrentReleases() int32 {
	if o == nil || isNil(o.MaxConcurrentReleases) {
		var ret int32
		return ret
	}
	return *o.MaxConcurrentReleases
}

// GetMaxConcurrentReleasesOk returns a tuple with the MaxConcurrentReleases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetMaxConcurrentReleasesOk() (*int32, bool) {
	if o == nil || isNil(o.MaxConcurrentReleases) {
		return nil, false
	}
	return o.MaxConcurrentReleases, true
}

// HasMaxConcurrentReleases returns a boolean if a field has been set.
func (o *Release) HasMaxConcurrentReleases() bool {
	if o != nil && !isNil(o.MaxConcurrentReleases) {
		return true
	}

	return false
}

// SetMaxConcurrentReleases gets a reference to the given int32 and assigns it to the MaxConcurrentReleases field.
func (o *Release) SetMaxConcurrentReleases(v int32) {
	o.MaxConcurrentReleases = &v
}

// GetReleaseTriggers returns the ReleaseTriggers field value if set, zero value otherwise.
// Deprecated
func (o *Release) GetReleaseTriggers() []ReleaseTrigger {
	if o == nil || isNil(o.ReleaseTriggers) {
		var ret []ReleaseTrigger
		return ret
	}
	return o.ReleaseTriggers
}

// GetReleaseTriggersOk returns a tuple with the ReleaseTriggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Release) GetReleaseTriggersOk() ([]ReleaseTrigger, bool) {
	if o == nil || isNil(o.ReleaseTriggers) {
		return nil, false
	}
	return o.ReleaseTriggers, true
}

// HasReleaseTriggers returns a boolean if a field has been set.
func (o *Release) HasReleaseTriggers() bool {
	if o != nil && !isNil(o.ReleaseTriggers) {
		return true
	}

	return false
}

// SetReleaseTriggers gets a reference to the given []ReleaseTrigger and assigns it to the ReleaseTriggers field.
// Deprecated
func (o *Release) SetReleaseTriggers(v []ReleaseTrigger) {
	o.ReleaseTriggers = v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *Release) GetTeams() []Team {
	if o == nil || isNil(o.Teams) {
		var ret []Team
		return ret
	}
	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetTeamsOk() ([]Team, bool) {
	if o == nil || isNil(o.Teams) {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *Release) HasTeams() bool {
	if o != nil && !isNil(o.Teams) {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []Team and assigns it to the Teams field.
func (o *Release) SetTeams(v []Team) {
	o.Teams = v
}

// GetMemberViewers returns the MemberViewers field value if set, zero value otherwise.
// Deprecated
func (o *Release) GetMemberViewers() []string {
	if o == nil || isNil(o.MemberViewers) {
		var ret []string
		return ret
	}
	return o.MemberViewers
}

// GetMemberViewersOk returns a tuple with the MemberViewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Release) GetMemberViewersOk() ([]string, bool) {
	if o == nil || isNil(o.MemberViewers) {
		return nil, false
	}
	return o.MemberViewers, true
}

// HasMemberViewers returns a boolean if a field has been set.
func (o *Release) HasMemberViewers() bool {
	if o != nil && !isNil(o.MemberViewers) {
		return true
	}

	return false
}

// SetMemberViewers gets a reference to the given []string and assigns it to the MemberViewers field.
// Deprecated
func (o *Release) SetMemberViewers(v []string) {
	o.MemberViewers = v
}

// GetRoleViewers returns the RoleViewers field value if set, zero value otherwise.
// Deprecated
func (o *Release) GetRoleViewers() []string {
	if o == nil || isNil(o.RoleViewers) {
		var ret []string
		return ret
	}
	return o.RoleViewers
}

// GetRoleViewersOk returns a tuple with the RoleViewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Release) GetRoleViewersOk() ([]string, bool) {
	if o == nil || isNil(o.RoleViewers) {
		return nil, false
	}
	return o.RoleViewers, true
}

// HasRoleViewers returns a boolean if a field has been set.
func (o *Release) HasRoleViewers() bool {
	if o != nil && !isNil(o.RoleViewers) {
		return true
	}

	return false
}

// SetRoleViewers gets a reference to the given []string and assigns it to the RoleViewers field.
// Deprecated
func (o *Release) SetRoleViewers(v []string) {
	o.RoleViewers = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *Release) GetAttachments() []Attachment {
	if o == nil || isNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || isNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *Release) HasAttachments() bool {
	if o != nil && !isNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *Release) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetPhases returns the Phases field value if set, zero value otherwise.
func (o *Release) GetPhases() []Phase {
	if o == nil || isNil(o.Phases) {
		var ret []Phase
		return ret
	}
	return o.Phases
}

// GetPhasesOk returns a tuple with the Phases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetPhasesOk() ([]Phase, bool) {
	if o == nil || isNil(o.Phases) {
		return nil, false
	}
	return o.Phases, true
}

// HasPhases returns a boolean if a field has been set.
func (o *Release) HasPhases() bool {
	if o != nil && !isNil(o.Phases) {
		return true
	}

	return false
}

// SetPhases gets a reference to the given []Phase and assigns it to the Phases field.
func (o *Release) SetPhases(v []Phase) {
	o.Phases = v
}

// GetQueryableStartDate returns the QueryableStartDate field value if set, zero value otherwise.
func (o *Release) GetQueryableStartDate() string {
	if o == nil || isNil(o.QueryableStartDate) {
		var ret string
		return ret
	}
	return *o.QueryableStartDate
}

// GetQueryableStartDateOk returns a tuple with the QueryableStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetQueryableStartDateOk() (*string, bool) {
	if o == nil || isNil(o.QueryableStartDate) {
		return nil, false
	}
	return o.QueryableStartDate, true
}

// HasQueryableStartDate returns a boolean if a field has been set.
func (o *Release) HasQueryableStartDate() bool {
	if o != nil && !isNil(o.QueryableStartDate) {
		return true
	}

	return false
}

// SetQueryableStartDate gets a reference to the given string and assigns it to the QueryableStartDate field.
func (o *Release) SetQueryableStartDate(v string) {
	o.QueryableStartDate = &v
}

// GetQueryableEndDate returns the QueryableEndDate field value if set, zero value otherwise.
func (o *Release) GetQueryableEndDate() string {
	if o == nil || isNil(o.QueryableEndDate) {
		var ret string
		return ret
	}
	return *o.QueryableEndDate
}

// GetQueryableEndDateOk returns a tuple with the QueryableEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetQueryableEndDateOk() (*string, bool) {
	if o == nil || isNil(o.QueryableEndDate) {
		return nil, false
	}
	return o.QueryableEndDate, true
}

// HasQueryableEndDate returns a boolean if a field has been set.
func (o *Release) HasQueryableEndDate() bool {
	if o != nil && !isNil(o.QueryableEndDate) {
		return true
	}

	return false
}

// SetQueryableEndDate gets a reference to the given string and assigns it to the QueryableEndDate field.
func (o *Release) SetQueryableEndDate(v string) {
	o.QueryableEndDate = &v
}

// GetRealFlagStatus returns the RealFlagStatus field value if set, zero value otherwise.
func (o *Release) GetRealFlagStatus() FlagStatus {
	if o == nil || isNil(o.RealFlagStatus) {
		var ret FlagStatus
		return ret
	}
	return *o.RealFlagStatus
}

// GetRealFlagStatusOk returns a tuple with the RealFlagStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetRealFlagStatusOk() (*FlagStatus, bool) {
	if o == nil || isNil(o.RealFlagStatus) {
		return nil, false
	}
	return o.RealFlagStatus, true
}

// HasRealFlagStatus returns a boolean if a field has been set.
func (o *Release) HasRealFlagStatus() bool {
	if o != nil && !isNil(o.RealFlagStatus) {
		return true
	}

	return false
}

// SetRealFlagStatus gets a reference to the given FlagStatus and assigns it to the RealFlagStatus field.
func (o *Release) SetRealFlagStatus(v FlagStatus) {
	o.RealFlagStatus = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Release) GetStatus() ReleaseStatus {
	if o == nil || isNil(o.Status) {
		var ret ReleaseStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetStatusOk() (*ReleaseStatus, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Release) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ReleaseStatus and assigns it to the Status field.
func (o *Release) SetStatus(v ReleaseStatus) {
	o.Status = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Release) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Release) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Release) SetTags(v []string) {
	o.Tags = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *Release) GetVariables() []Variable {
	if o == nil || isNil(o.Variables) {
		var ret []Variable
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetVariablesOk() ([]Variable, bool) {
	if o == nil || isNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *Release) HasVariables() bool {
	if o != nil && !isNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []Variable and assigns it to the Variables field.
func (o *Release) SetVariables(v []Variable) {
	o.Variables = v
}

// GetCalendarLinkToken returns the CalendarLinkToken field value if set, zero value otherwise.
func (o *Release) GetCalendarLinkToken() string {
	if o == nil || isNil(o.CalendarLinkToken) {
		var ret string
		return ret
	}
	return *o.CalendarLinkToken
}

// GetCalendarLinkTokenOk returns a tuple with the CalendarLinkToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetCalendarLinkTokenOk() (*string, bool) {
	if o == nil || isNil(o.CalendarLinkToken) {
		return nil, false
	}
	return o.CalendarLinkToken, true
}

// HasCalendarLinkToken returns a boolean if a field has been set.
func (o *Release) HasCalendarLinkToken() bool {
	if o != nil && !isNil(o.CalendarLinkToken) {
		return true
	}

	return false
}

// SetCalendarLinkToken gets a reference to the given string and assigns it to the CalendarLinkToken field.
func (o *Release) SetCalendarLinkToken(v string) {
	o.CalendarLinkToken = &v
}

// GetCalendarPublished returns the CalendarPublished field value if set, zero value otherwise.
func (o *Release) GetCalendarPublished() bool {
	if o == nil || isNil(o.CalendarPublished) {
		var ret bool
		return ret
	}
	return *o.CalendarPublished
}

// GetCalendarPublishedOk returns a tuple with the CalendarPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetCalendarPublishedOk() (*bool, bool) {
	if o == nil || isNil(o.CalendarPublished) {
		return nil, false
	}
	return o.CalendarPublished, true
}

// HasCalendarPublished returns a boolean if a field has been set.
func (o *Release) HasCalendarPublished() bool {
	if o != nil && !isNil(o.CalendarPublished) {
		return true
	}

	return false
}

// SetCalendarPublished gets a reference to the given bool and assigns it to the CalendarPublished field.
func (o *Release) SetCalendarPublished(v bool) {
	o.CalendarPublished = &v
}

// GetTutorial returns the Tutorial field value if set, zero value otherwise.
func (o *Release) GetTutorial() bool {
	if o == nil || isNil(o.Tutorial) {
		var ret bool
		return ret
	}
	return *o.Tutorial
}

// GetTutorialOk returns a tuple with the Tutorial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetTutorialOk() (*bool, bool) {
	if o == nil || isNil(o.Tutorial) {
		return nil, false
	}
	return o.Tutorial, true
}

// HasTutorial returns a boolean if a field has been set.
func (o *Release) HasTutorial() bool {
	if o != nil && !isNil(o.Tutorial) {
		return true
	}

	return false
}

// SetTutorial gets a reference to the given bool and assigns it to the Tutorial field.
func (o *Release) SetTutorial(v bool) {
	o.Tutorial = &v
}

// GetAbortOnFailure returns the AbortOnFailure field value if set, zero value otherwise.
func (o *Release) GetAbortOnFailure() bool {
	if o == nil || isNil(o.AbortOnFailure) {
		var ret bool
		return ret
	}
	return *o.AbortOnFailure
}

// GetAbortOnFailureOk returns a tuple with the AbortOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAbortOnFailureOk() (*bool, bool) {
	if o == nil || isNil(o.AbortOnFailure) {
		return nil, false
	}
	return o.AbortOnFailure, true
}

// HasAbortOnFailure returns a boolean if a field has been set.
func (o *Release) HasAbortOnFailure() bool {
	if o != nil && !isNil(o.AbortOnFailure) {
		return true
	}

	return false
}

// SetAbortOnFailure gets a reference to the given bool and assigns it to the AbortOnFailure field.
func (o *Release) SetAbortOnFailure(v bool) {
	o.AbortOnFailure = &v
}

// GetArchiveRelease returns the ArchiveRelease field value if set, zero value otherwise.
func (o *Release) GetArchiveRelease() bool {
	if o == nil || isNil(o.ArchiveRelease) {
		var ret bool
		return ret
	}
	return *o.ArchiveRelease
}

// GetArchiveReleaseOk returns a tuple with the ArchiveRelease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetArchiveReleaseOk() (*bool, bool) {
	if o == nil || isNil(o.ArchiveRelease) {
		return nil, false
	}
	return o.ArchiveRelease, true
}

// HasArchiveRelease returns a boolean if a field has been set.
func (o *Release) HasArchiveRelease() bool {
	if o != nil && !isNil(o.ArchiveRelease) {
		return true
	}

	return false
}

// SetArchiveRelease gets a reference to the given bool and assigns it to the ArchiveRelease field.
func (o *Release) SetArchiveRelease(v bool) {
	o.ArchiveRelease = &v
}

// GetAllowPasswordsInAllFields returns the AllowPasswordsInAllFields field value if set, zero value otherwise.
func (o *Release) GetAllowPasswordsInAllFields() bool {
	if o == nil || isNil(o.AllowPasswordsInAllFields) {
		var ret bool
		return ret
	}
	return *o.AllowPasswordsInAllFields
}

// GetAllowPasswordsInAllFieldsOk returns a tuple with the AllowPasswordsInAllFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAllowPasswordsInAllFieldsOk() (*bool, bool) {
	if o == nil || isNil(o.AllowPasswordsInAllFields) {
		return nil, false
	}
	return o.AllowPasswordsInAllFields, true
}

// HasAllowPasswordsInAllFields returns a boolean if a field has been set.
func (o *Release) HasAllowPasswordsInAllFields() bool {
	if o != nil && !isNil(o.AllowPasswordsInAllFields) {
		return true
	}

	return false
}

// SetAllowPasswordsInAllFields gets a reference to the given bool and assigns it to the AllowPasswordsInAllFields field.
func (o *Release) SetAllowPasswordsInAllFields(v bool) {
	o.AllowPasswordsInAllFields = &v
}

// GetDisableNotifications returns the DisableNotifications field value if set, zero value otherwise.
func (o *Release) GetDisableNotifications() bool {
	if o == nil || isNil(o.DisableNotifications) {
		var ret bool
		return ret
	}
	return *o.DisableNotifications
}

// GetDisableNotificationsOk returns a tuple with the DisableNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetDisableNotificationsOk() (*bool, bool) {
	if o == nil || isNil(o.DisableNotifications) {
		return nil, false
	}
	return o.DisableNotifications, true
}

// HasDisableNotifications returns a boolean if a field has been set.
func (o *Release) HasDisableNotifications() bool {
	if o != nil && !isNil(o.DisableNotifications) {
		return true
	}

	return false
}

// SetDisableNotifications gets a reference to the given bool and assigns it to the DisableNotifications field.
func (o *Release) SetDisableNotifications(v bool) {
	o.DisableNotifications = &v
}

// GetAllowConcurrentReleasesFromTrigger returns the AllowConcurrentReleasesFromTrigger field value if set, zero value otherwise.
func (o *Release) GetAllowConcurrentReleasesFromTrigger() bool {
	if o == nil || isNil(o.AllowConcurrentReleasesFromTrigger) {
		var ret bool
		return ret
	}
	return *o.AllowConcurrentReleasesFromTrigger
}

// GetAllowConcurrentReleasesFromTriggerOk returns a tuple with the AllowConcurrentReleasesFromTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAllowConcurrentReleasesFromTriggerOk() (*bool, bool) {
	if o == nil || isNil(o.AllowConcurrentReleasesFromTrigger) {
		return nil, false
	}
	return o.AllowConcurrentReleasesFromTrigger, true
}

// HasAllowConcurrentReleasesFromTrigger returns a boolean if a field has been set.
func (o *Release) HasAllowConcurrentReleasesFromTrigger() bool {
	if o != nil && !isNil(o.AllowConcurrentReleasesFromTrigger) {
		return true
	}

	return false
}

// SetAllowConcurrentReleasesFromTrigger gets a reference to the given bool and assigns it to the AllowConcurrentReleasesFromTrigger field.
func (o *Release) SetAllowConcurrentReleasesFromTrigger(v bool) {
	o.AllowConcurrentReleasesFromTrigger = &v
}

// GetOriginTemplateId returns the OriginTemplateId field value if set, zero value otherwise.
func (o *Release) GetOriginTemplateId() string {
	if o == nil || isNil(o.OriginTemplateId) {
		var ret string
		return ret
	}
	return *o.OriginTemplateId
}

// GetOriginTemplateIdOk returns a tuple with the OriginTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetOriginTemplateIdOk() (*string, bool) {
	if o == nil || isNil(o.OriginTemplateId) {
		return nil, false
	}
	return o.OriginTemplateId, true
}

// HasOriginTemplateId returns a boolean if a field has been set.
func (o *Release) HasOriginTemplateId() bool {
	if o != nil && !isNil(o.OriginTemplateId) {
		return true
	}

	return false
}

// SetOriginTemplateId gets a reference to the given string and assigns it to the OriginTemplateId field.
func (o *Release) SetOriginTemplateId(v string) {
	o.OriginTemplateId = &v
}

// GetCreatedFromTrigger returns the CreatedFromTrigger field value if set, zero value otherwise.
func (o *Release) GetCreatedFromTrigger() bool {
	if o == nil || isNil(o.CreatedFromTrigger) {
		var ret bool
		return ret
	}
	return *o.CreatedFromTrigger
}

// GetCreatedFromTriggerOk returns a tuple with the CreatedFromTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetCreatedFromTriggerOk() (*bool, bool) {
	if o == nil || isNil(o.CreatedFromTrigger) {
		return nil, false
	}
	return o.CreatedFromTrigger, true
}

// HasCreatedFromTrigger returns a boolean if a field has been set.
func (o *Release) HasCreatedFromTrigger() bool {
	if o != nil && !isNil(o.CreatedFromTrigger) {
		return true
	}

	return false
}

// SetCreatedFromTrigger gets a reference to the given bool and assigns it to the CreatedFromTrigger field.
func (o *Release) SetCreatedFromTrigger(v bool) {
	o.CreatedFromTrigger = &v
}

// GetScriptUsername returns the ScriptUsername field value if set, zero value otherwise.
func (o *Release) GetScriptUsername() string {
	if o == nil || isNil(o.ScriptUsername) {
		var ret string
		return ret
	}
	return *o.ScriptUsername
}

// GetScriptUsernameOk returns a tuple with the ScriptUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetScriptUsernameOk() (*string, bool) {
	if o == nil || isNil(o.ScriptUsername) {
		return nil, false
	}
	return o.ScriptUsername, true
}

// HasScriptUsername returns a boolean if a field has been set.
func (o *Release) HasScriptUsername() bool {
	if o != nil && !isNil(o.ScriptUsername) {
		return true
	}

	return false
}

// SetScriptUsername gets a reference to the given string and assigns it to the ScriptUsername field.
func (o *Release) SetScriptUsername(v string) {
	o.ScriptUsername = &v
}

// GetScriptUserPassword returns the ScriptUserPassword field value if set, zero value otherwise.
func (o *Release) GetScriptUserPassword() string {
	if o == nil || isNil(o.ScriptUserPassword) {
		var ret string
		return ret
	}
	return *o.ScriptUserPassword
}

// GetScriptUserPasswordOk returns a tuple with the ScriptUserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetScriptUserPasswordOk() (*string, bool) {
	if o == nil || isNil(o.ScriptUserPassword) {
		return nil, false
	}
	return o.ScriptUserPassword, true
}

// HasScriptUserPassword returns a boolean if a field has been set.
func (o *Release) HasScriptUserPassword() bool {
	if o != nil && !isNil(o.ScriptUserPassword) {
		return true
	}

	return false
}

// SetScriptUserPassword gets a reference to the given string and assigns it to the ScriptUserPassword field.
func (o *Release) SetScriptUserPassword(v string) {
	o.ScriptUserPassword = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Release) GetExtensions() []ReleaseExtension {
	if o == nil || isNil(o.Extensions) {
		var ret []ReleaseExtension
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetExtensionsOk() ([]ReleaseExtension, bool) {
	if o == nil || isNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Release) HasExtensions() bool {
	if o != nil && !isNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []ReleaseExtension and assigns it to the Extensions field.
func (o *Release) SetExtensions(v []ReleaseExtension) {
	o.Extensions = v
}

// GetStartedFromTaskId returns the StartedFromTaskId field value if set, zero value otherwise.
func (o *Release) GetStartedFromTaskId() string {
	if o == nil || isNil(o.StartedFromTaskId) {
		var ret string
		return ret
	}
	return *o.StartedFromTaskId
}

// GetStartedFromTaskIdOk returns a tuple with the StartedFromTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetStartedFromTaskIdOk() (*string, bool) {
	if o == nil || isNil(o.StartedFromTaskId) {
		return nil, false
	}
	return o.StartedFromTaskId, true
}

// HasStartedFromTaskId returns a boolean if a field has been set.
func (o *Release) HasStartedFromTaskId() bool {
	if o != nil && !isNil(o.StartedFromTaskId) {
		return true
	}

	return false
}

// SetStartedFromTaskId gets a reference to the given string and assigns it to the StartedFromTaskId field.
func (o *Release) SetStartedFromTaskId(v string) {
	o.StartedFromTaskId = &v
}

// GetAutoStart returns the AutoStart field value if set, zero value otherwise.
func (o *Release) GetAutoStart() bool {
	if o == nil || isNil(o.AutoStart) {
		var ret bool
		return ret
	}
	return *o.AutoStart
}

// GetAutoStartOk returns a tuple with the AutoStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAutoStartOk() (*bool, bool) {
	if o == nil || isNil(o.AutoStart) {
		return nil, false
	}
	return o.AutoStart, true
}

// HasAutoStart returns a boolean if a field has been set.
func (o *Release) HasAutoStart() bool {
	if o != nil && !isNil(o.AutoStart) {
		return true
	}

	return false
}

// SetAutoStart gets a reference to the given bool and assigns it to the AutoStart field.
func (o *Release) SetAutoStart(v bool) {
	o.AutoStart = &v
}

// GetAutomatedResumeCount returns the AutomatedResumeCount field value if set, zero value otherwise.
func (o *Release) GetAutomatedResumeCount() int32 {
	if o == nil || isNil(o.AutomatedResumeCount) {
		var ret int32
		return ret
	}
	return *o.AutomatedResumeCount
}

// GetAutomatedResumeCountOk returns a tuple with the AutomatedResumeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAutomatedResumeCountOk() (*int32, bool) {
	if o == nil || isNil(o.AutomatedResumeCount) {
		return nil, false
	}
	return o.AutomatedResumeCount, true
}

// HasAutomatedResumeCount returns a boolean if a field has been set.
func (o *Release) HasAutomatedResumeCount() bool {
	if o != nil && !isNil(o.AutomatedResumeCount) {
		return true
	}

	return false
}

// SetAutomatedResumeCount gets a reference to the given int32 and assigns it to the AutomatedResumeCount field.
func (o *Release) SetAutomatedResumeCount(v int32) {
	o.AutomatedResumeCount = &v
}

// GetMaxAutomatedResumes returns the MaxAutomatedResumes field value if set, zero value otherwise.
func (o *Release) GetMaxAutomatedResumes() int32 {
	if o == nil || isNil(o.MaxAutomatedResumes) {
		var ret int32
		return ret
	}
	return *o.MaxAutomatedResumes
}

// GetMaxAutomatedResumesOk returns a tuple with the MaxAutomatedResumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetMaxAutomatedResumesOk() (*int32, bool) {
	if o == nil || isNil(o.MaxAutomatedResumes) {
		return nil, false
	}
	return o.MaxAutomatedResumes, true
}

// HasMaxAutomatedResumes returns a boolean if a field has been set.
func (o *Release) HasMaxAutomatedResumes() bool {
	if o != nil && !isNil(o.MaxAutomatedResumes) {
		return true
	}

	return false
}

// SetMaxAutomatedResumes gets a reference to the given int32 and assigns it to the MaxAutomatedResumes field.
func (o *Release) SetMaxAutomatedResumes(v int32) {
	o.MaxAutomatedResumes = &v
}

// GetAbortComment returns the AbortComment field value if set, zero value otherwise.
func (o *Release) GetAbortComment() string {
	if o == nil || isNil(o.AbortComment) {
		var ret string
		return ret
	}
	return *o.AbortComment
}

// GetAbortCommentOk returns a tuple with the AbortComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAbortCommentOk() (*string, bool) {
	if o == nil || isNil(o.AbortComment) {
		return nil, false
	}
	return o.AbortComment, true
}

// HasAbortComment returns a boolean if a field has been set.
func (o *Release) HasAbortComment() bool {
	if o != nil && !isNil(o.AbortComment) {
		return true
	}

	return false
}

// SetAbortComment gets a reference to the given string and assigns it to the AbortComment field.
func (o *Release) SetAbortComment(v string) {
	o.AbortComment = &v
}

// GetVariableMapping returns the VariableMapping field value if set, zero value otherwise.
func (o *Release) GetVariableMapping() map[string]string {
	if o == nil || isNil(o.VariableMapping) {
		var ret map[string]string
		return ret
	}
	return *o.VariableMapping
}

// GetVariableMappingOk returns a tuple with the VariableMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetVariableMappingOk() (*map[string]string, bool) {
	if o == nil || isNil(o.VariableMapping) {
		return nil, false
	}
	return o.VariableMapping, true
}

// HasVariableMapping returns a boolean if a field has been set.
func (o *Release) HasVariableMapping() bool {
	if o != nil && !isNil(o.VariableMapping) {
		return true
	}

	return false
}

// SetVariableMapping gets a reference to the given map[string]string and assigns it to the VariableMapping field.
func (o *Release) SetVariableMapping(v map[string]string) {
	o.VariableMapping = &v
}

// GetRiskProfile returns the RiskProfile field value if set, zero value otherwise.
func (o *Release) GetRiskProfile() RiskProfile {
	if o == nil || isNil(o.RiskProfile) {
		var ret RiskProfile
		return ret
	}
	return *o.RiskProfile
}

// GetRiskProfileOk returns a tuple with the RiskProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetRiskProfileOk() (*RiskProfile, bool) {
	if o == nil || isNil(o.RiskProfile) {
		return nil, false
	}
	return o.RiskProfile, true
}

// HasRiskProfile returns a boolean if a field has been set.
func (o *Release) HasRiskProfile() bool {
	if o != nil && !isNil(o.RiskProfile) {
		return true
	}

	return false
}

// SetRiskProfile gets a reference to the given RiskProfile and assigns it to the RiskProfile field.
func (o *Release) SetRiskProfile(v RiskProfile) {
	o.RiskProfile = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Release) GetMetadata() map[string]map[string]interface{} {
	if o == nil || isNil(o.Metadata) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetMetadataOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Release) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]map[string]interface{} and assigns it to the Metadata field.
func (o *Release) SetMetadata(v map[string]map[string]interface{}) {
	o.Metadata = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *Release) GetArchived() bool {
	if o == nil || isNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetArchivedOk() (*bool, bool) {
	if o == nil || isNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *Release) HasArchived() bool {
	if o != nil && !isNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *Release) SetArchived(v bool) {
	o.Archived = &v
}

// GetCiUid returns the CiUid field value if set, zero value otherwise.
func (o *Release) GetCiUid() int32 {
	if o == nil || isNil(o.CiUid) {
		var ret int32
		return ret
	}
	return *o.CiUid
}

// GetCiUidOk returns a tuple with the CiUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetCiUidOk() (*int32, bool) {
	if o == nil || isNil(o.CiUid) {
		return nil, false
	}
	return o.CiUid, true
}

// HasCiUid returns a boolean if a field has been set.
func (o *Release) HasCiUid() bool {
	if o != nil && !isNil(o.CiUid) {
		return true
	}

	return false
}

// SetCiUid gets a reference to the given int32 and assigns it to the CiUid field.
func (o *Release) SetCiUid(v int32) {
	o.CiUid = &v
}

// GetVariableValues returns the VariableValues field value if set, zero value otherwise.
func (o *Release) GetVariableValues() map[string]map[string]interface{} {
	if o == nil || isNil(o.VariableValues) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.VariableValues
}

// GetVariableValuesOk returns a tuple with the VariableValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetVariableValuesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.VariableValues) {
		return map[string]map[string]interface{}{}, false
	}
	return o.VariableValues, true
}

// HasVariableValues returns a boolean if a field has been set.
func (o *Release) HasVariableValues() bool {
	if o != nil && !isNil(o.VariableValues) {
		return true
	}

	return false
}

// SetVariableValues gets a reference to the given map[string]map[string]interface{} and assigns it to the VariableValues field.
func (o *Release) SetVariableValues(v map[string]map[string]interface{}) {
	o.VariableValues = v
}

// GetPasswordVariableValues returns the PasswordVariableValues field value if set, zero value otherwise.
func (o *Release) GetPasswordVariableValues() map[string]map[string]interface{} {
	if o == nil || isNil(o.PasswordVariableValues) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.PasswordVariableValues
}

// GetPasswordVariableValuesOk returns a tuple with the PasswordVariableValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetPasswordVariableValuesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.PasswordVariableValues) {
		return map[string]map[string]interface{}{}, false
	}
	return o.PasswordVariableValues, true
}

// HasPasswordVariableValues returns a boolean if a field has been set.
func (o *Release) HasPasswordVariableValues() bool {
	if o != nil && !isNil(o.PasswordVariableValues) {
		return true
	}

	return false
}

// SetPasswordVariableValues gets a reference to the given map[string]map[string]interface{} and assigns it to the PasswordVariableValues field.
func (o *Release) SetPasswordVariableValues(v map[string]map[string]interface{}) {
	o.PasswordVariableValues = v
}

// GetCiPropertyVariables returns the CiPropertyVariables field value if set, zero value otherwise.
func (o *Release) GetCiPropertyVariables() []Variable {
	if o == nil || isNil(o.CiPropertyVariables) {
		var ret []Variable
		return ret
	}
	return o.CiPropertyVariables
}

// GetCiPropertyVariablesOk returns a tuple with the CiPropertyVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetCiPropertyVariablesOk() ([]Variable, bool) {
	if o == nil || isNil(o.CiPropertyVariables) {
		return nil, false
	}
	return o.CiPropertyVariables, true
}

// HasCiPropertyVariables returns a boolean if a field has been set.
func (o *Release) HasCiPropertyVariables() bool {
	if o != nil && !isNil(o.CiPropertyVariables) {
		return true
	}

	return false
}

// SetCiPropertyVariables gets a reference to the given []Variable and assigns it to the CiPropertyVariables field.
func (o *Release) SetCiPropertyVariables(v []Variable) {
	o.CiPropertyVariables = v
}

// GetAllStringVariableValues returns the AllStringVariableValues field value if set, zero value otherwise.
func (o *Release) GetAllStringVariableValues() map[string]string {
	if o == nil || isNil(o.AllStringVariableValues) {
		var ret map[string]string
		return ret
	}
	return *o.AllStringVariableValues
}

// GetAllStringVariableValuesOk returns a tuple with the AllStringVariableValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAllStringVariableValuesOk() (*map[string]string, bool) {
	if o == nil || isNil(o.AllStringVariableValues) {
		return nil, false
	}
	return o.AllStringVariableValues, true
}

// HasAllStringVariableValues returns a boolean if a field has been set.
func (o *Release) HasAllStringVariableValues() bool {
	if o != nil && !isNil(o.AllStringVariableValues) {
		return true
	}

	return false
}

// SetAllStringVariableValues gets a reference to the given map[string]string and assigns it to the AllStringVariableValues field.
func (o *Release) SetAllStringVariableValues(v map[string]string) {
	o.AllStringVariableValues = &v
}

// GetAllReleaseGlobalAndFolderVariables returns the AllReleaseGlobalAndFolderVariables field value if set, zero value otherwise.
func (o *Release) GetAllReleaseGlobalAndFolderVariables() []Variable {
	if o == nil || isNil(o.AllReleaseGlobalAndFolderVariables) {
		var ret []Variable
		return ret
	}
	return o.AllReleaseGlobalAndFolderVariables
}

// GetAllReleaseGlobalAndFolderVariablesOk returns a tuple with the AllReleaseGlobalAndFolderVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAllReleaseGlobalAndFolderVariablesOk() ([]Variable, bool) {
	if o == nil || isNil(o.AllReleaseGlobalAndFolderVariables) {
		return nil, false
	}
	return o.AllReleaseGlobalAndFolderVariables, true
}

// HasAllReleaseGlobalAndFolderVariables returns a boolean if a field has been set.
func (o *Release) HasAllReleaseGlobalAndFolderVariables() bool {
	if o != nil && !isNil(o.AllReleaseGlobalAndFolderVariables) {
		return true
	}

	return false
}

// SetAllReleaseGlobalAndFolderVariables gets a reference to the given []Variable and assigns it to the AllReleaseGlobalAndFolderVariables field.
func (o *Release) SetAllReleaseGlobalAndFolderVariables(v []Variable) {
	o.AllReleaseGlobalAndFolderVariables = v
}

// GetAllVariableValuesAsStringsWithInterpolationInfo returns the AllVariableValuesAsStringsWithInterpolationInfo field value if set, zero value otherwise.
func (o *Release) GetAllVariableValuesAsStringsWithInterpolationInfo() map[string]ValueWithInterpolation {
	if o == nil || isNil(o.AllVariableValuesAsStringsWithInterpolationInfo) {
		var ret map[string]ValueWithInterpolation
		return ret
	}
	return *o.AllVariableValuesAsStringsWithInterpolationInfo
}

// GetAllVariableValuesAsStringsWithInterpolationInfoOk returns a tuple with the AllVariableValuesAsStringsWithInterpolationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAllVariableValuesAsStringsWithInterpolationInfoOk() (*map[string]ValueWithInterpolation, bool) {
	if o == nil || isNil(o.AllVariableValuesAsStringsWithInterpolationInfo) {
		return nil, false
	}
	return o.AllVariableValuesAsStringsWithInterpolationInfo, true
}

// HasAllVariableValuesAsStringsWithInterpolationInfo returns a boolean if a field has been set.
func (o *Release) HasAllVariableValuesAsStringsWithInterpolationInfo() bool {
	if o != nil && !isNil(o.AllVariableValuesAsStringsWithInterpolationInfo) {
		return true
	}

	return false
}

// SetAllVariableValuesAsStringsWithInterpolationInfo gets a reference to the given map[string]ValueWithInterpolation and assigns it to the AllVariableValuesAsStringsWithInterpolationInfo field.
func (o *Release) SetAllVariableValuesAsStringsWithInterpolationInfo(v map[string]ValueWithInterpolation) {
	o.AllVariableValuesAsStringsWithInterpolationInfo = &v
}

// GetVariablesKeysInNonInterpolatableVariableValues returns the VariablesKeysInNonInterpolatableVariableValues field value if set, zero value otherwise.
func (o *Release) GetVariablesKeysInNonInterpolatableVariableValues() []string {
	if o == nil || isNil(o.VariablesKeysInNonInterpolatableVariableValues) {
		var ret []string
		return ret
	}
	return o.VariablesKeysInNonInterpolatableVariableValues
}

// GetVariablesKeysInNonInterpolatableVariableValuesOk returns a tuple with the VariablesKeysInNonInterpolatableVariableValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetVariablesKeysInNonInterpolatableVariableValuesOk() ([]string, bool) {
	if o == nil || isNil(o.VariablesKeysInNonInterpolatableVariableValues) {
		return nil, false
	}
	return o.VariablesKeysInNonInterpolatableVariableValues, true
}

// HasVariablesKeysInNonInterpolatableVariableValues returns a boolean if a field has been set.
func (o *Release) HasVariablesKeysInNonInterpolatableVariableValues() bool {
	if o != nil && !isNil(o.VariablesKeysInNonInterpolatableVariableValues) {
		return true
	}

	return false
}

// SetVariablesKeysInNonInterpolatableVariableValues gets a reference to the given []string and assigns it to the VariablesKeysInNonInterpolatableVariableValues field.
func (o *Release) SetVariablesKeysInNonInterpolatableVariableValues(v []string) {
	o.VariablesKeysInNonInterpolatableVariableValues = v
}

// GetVariablesByKeys returns the VariablesByKeys field value if set, zero value otherwise.
func (o *Release) GetVariablesByKeys() map[string]Variable {
	if o == nil || isNil(o.VariablesByKeys) {
		var ret map[string]Variable
		return ret
	}
	return *o.VariablesByKeys
}

// GetVariablesByKeysOk returns a tuple with the VariablesByKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetVariablesByKeysOk() (*map[string]Variable, bool) {
	if o == nil || isNil(o.VariablesByKeys) {
		return nil, false
	}
	return o.VariablesByKeys, true
}

// HasVariablesByKeys returns a boolean if a field has been set.
func (o *Release) HasVariablesByKeys() bool {
	if o != nil && !isNil(o.VariablesByKeys) {
		return true
	}

	return false
}

// SetVariablesByKeys gets a reference to the given map[string]Variable and assigns it to the VariablesByKeys field.
func (o *Release) SetVariablesByKeys(v map[string]Variable) {
	o.VariablesByKeys = &v
}

// GetAllVariables returns the AllVariables field value if set, zero value otherwise.
func (o *Release) GetAllVariables() []Variable {
	if o == nil || isNil(o.AllVariables) {
		var ret []Variable
		return ret
	}
	return o.AllVariables
}

// GetAllVariablesOk returns a tuple with the AllVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAllVariablesOk() ([]Variable, bool) {
	if o == nil || isNil(o.AllVariables) {
		return nil, false
	}
	return o.AllVariables, true
}

// HasAllVariables returns a boolean if a field has been set.
func (o *Release) HasAllVariables() bool {
	if o != nil && !isNil(o.AllVariables) {
		return true
	}

	return false
}

// SetAllVariables gets a reference to the given []Variable and assigns it to the AllVariables field.
func (o *Release) SetAllVariables(v []Variable) {
	o.AllVariables = v
}

// GetGlobalVariables returns the GlobalVariables field value if set, zero value otherwise.
func (o *Release) GetGlobalVariables() GlobalVariables {
	if o == nil || isNil(o.GlobalVariables) {
		var ret GlobalVariables
		return ret
	}
	return *o.GlobalVariables
}

// GetGlobalVariablesOk returns a tuple with the GlobalVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetGlobalVariablesOk() (*GlobalVariables, bool) {
	if o == nil || isNil(o.GlobalVariables) {
		return nil, false
	}
	return o.GlobalVariables, true
}

// HasGlobalVariables returns a boolean if a field has been set.
func (o *Release) HasGlobalVariables() bool {
	if o != nil && !isNil(o.GlobalVariables) {
		return true
	}

	return false
}

// SetGlobalVariables gets a reference to the given GlobalVariables and assigns it to the GlobalVariables field.
func (o *Release) SetGlobalVariables(v GlobalVariables) {
	o.GlobalVariables = &v
}

// GetFolderVariables returns the FolderVariables field value if set, zero value otherwise.
func (o *Release) GetFolderVariables() FolderVariables {
	if o == nil || isNil(o.FolderVariables) {
		var ret FolderVariables
		return ret
	}
	return *o.FolderVariables
}

// GetFolderVariablesOk returns a tuple with the FolderVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetFolderVariablesOk() (*FolderVariables, bool) {
	if o == nil || isNil(o.FolderVariables) {
		return nil, false
	}
	return o.FolderVariables, true
}

// HasFolderVariables returns a boolean if a field has been set.
func (o *Release) HasFolderVariables() bool {
	if o != nil && !isNil(o.FolderVariables) {
		return true
	}

	return false
}

// SetFolderVariables gets a reference to the given FolderVariables and assigns it to the FolderVariables field.
func (o *Release) SetFolderVariables(v FolderVariables) {
	o.FolderVariables = &v
}

// GetAdminTeam returns the AdminTeam field value if set, zero value otherwise.
func (o *Release) GetAdminTeam() Team {
	if o == nil || isNil(o.AdminTeam) {
		var ret Team
		return ret
	}
	return *o.AdminTeam
}

// GetAdminTeamOk returns a tuple with the AdminTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAdminTeamOk() (*Team, bool) {
	if o == nil || isNil(o.AdminTeam) {
		return nil, false
	}
	return o.AdminTeam, true
}

// HasAdminTeam returns a boolean if a field has been set.
func (o *Release) HasAdminTeam() bool {
	if o != nil && !isNil(o.AdminTeam) {
		return true
	}

	return false
}

// SetAdminTeam gets a reference to the given Team and assigns it to the AdminTeam field.
func (o *Release) SetAdminTeam(v Team) {
	o.AdminTeam = &v
}

// GetReleaseAttachments returns the ReleaseAttachments field value if set, zero value otherwise.
func (o *Release) GetReleaseAttachments() []Attachment {
	if o == nil || isNil(o.ReleaseAttachments) {
		var ret []Attachment
		return ret
	}
	return o.ReleaseAttachments
}

// GetReleaseAttachmentsOk returns a tuple with the ReleaseAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetReleaseAttachmentsOk() ([]Attachment, bool) {
	if o == nil || isNil(o.ReleaseAttachments) {
		return nil, false
	}
	return o.ReleaseAttachments, true
}

// HasReleaseAttachments returns a boolean if a field has been set.
func (o *Release) HasReleaseAttachments() bool {
	if o != nil && !isNil(o.ReleaseAttachments) {
		return true
	}

	return false
}

// SetReleaseAttachments gets a reference to the given []Attachment and assigns it to the ReleaseAttachments field.
func (o *Release) SetReleaseAttachments(v []Attachment) {
	o.ReleaseAttachments = v
}

// GetCurrentPhase returns the CurrentPhase field value if set, zero value otherwise.
func (o *Release) GetCurrentPhase() Phase {
	if o == nil || isNil(o.CurrentPhase) {
		var ret Phase
		return ret
	}
	return *o.CurrentPhase
}

// GetCurrentPhaseOk returns a tuple with the CurrentPhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetCurrentPhaseOk() (*Phase, bool) {
	if o == nil || isNil(o.CurrentPhase) {
		return nil, false
	}
	return o.CurrentPhase, true
}

// HasCurrentPhase returns a boolean if a field has been set.
func (o *Release) HasCurrentPhase() bool {
	if o != nil && !isNil(o.CurrentPhase) {
		return true
	}

	return false
}

// SetCurrentPhase gets a reference to the given Phase and assigns it to the CurrentPhase field.
func (o *Release) SetCurrentPhase(v Phase) {
	o.CurrentPhase = &v
}

// GetCurrentTask returns the CurrentTask field value if set, zero value otherwise.
func (o *Release) GetCurrentTask() Task {
	if o == nil || isNil(o.CurrentTask) {
		var ret Task
		return ret
	}
	return *o.CurrentTask
}

// GetCurrentTaskOk returns a tuple with the CurrentTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetCurrentTaskOk() (*Task, bool) {
	if o == nil || isNil(o.CurrentTask) {
		return nil, false
	}
	return o.CurrentTask, true
}

// HasCurrentTask returns a boolean if a field has been set.
func (o *Release) HasCurrentTask() bool {
	if o != nil && !isNil(o.CurrentTask) {
		return true
	}

	return false
}

// SetCurrentTask gets a reference to the given Task and assigns it to the CurrentTask field.
func (o *Release) SetCurrentTask(v Task) {
	o.CurrentTask = &v
}

// GetAllTasks returns the AllTasks field value if set, zero value otherwise.
func (o *Release) GetAllTasks() []Task {
	if o == nil || isNil(o.AllTasks) {
		var ret []Task
		return ret
	}
	return o.AllTasks
}

// GetAllTasksOk returns a tuple with the AllTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAllTasksOk() ([]Task, bool) {
	if o == nil || isNil(o.AllTasks) {
		return nil, false
	}
	return o.AllTasks, true
}

// HasAllTasks returns a boolean if a field has been set.
func (o *Release) HasAllTasks() bool {
	if o != nil && !isNil(o.AllTasks) {
		return true
	}

	return false
}

// SetAllTasks gets a reference to the given []Task and assigns it to the AllTasks field.
func (o *Release) SetAllTasks(v []Task) {
	o.AllTasks = v
}

// GetAllGates returns the AllGates field value if set, zero value otherwise.
func (o *Release) GetAllGates() []GateTask {
	if o == nil || isNil(o.AllGates) {
		var ret []GateTask
		return ret
	}
	return o.AllGates
}

// GetAllGatesOk returns a tuple with the AllGates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAllGatesOk() ([]GateTask, bool) {
	if o == nil || isNil(o.AllGates) {
		return nil, false
	}
	return o.AllGates, true
}

// HasAllGates returns a boolean if a field has been set.
func (o *Release) HasAllGates() bool {
	if o != nil && !isNil(o.AllGates) {
		return true
	}

	return false
}

// SetAllGates gets a reference to the given []GateTask and assigns it to the AllGates field.
func (o *Release) SetAllGates(v []GateTask) {
	o.AllGates = v
}

// GetAllUserInputTasks returns the AllUserInputTasks field value if set, zero value otherwise.
func (o *Release) GetAllUserInputTasks() []UserInputTask {
	if o == nil || isNil(o.AllUserInputTasks) {
		var ret []UserInputTask
		return ret
	}
	return o.AllUserInputTasks
}

// GetAllUserInputTasksOk returns a tuple with the AllUserInputTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAllUserInputTasksOk() ([]UserInputTask, bool) {
	if o == nil || isNil(o.AllUserInputTasks) {
		return nil, false
	}
	return o.AllUserInputTasks, true
}

// HasAllUserInputTasks returns a boolean if a field has been set.
func (o *Release) HasAllUserInputTasks() bool {
	if o != nil && !isNil(o.AllUserInputTasks) {
		return true
	}

	return false
}

// SetAllUserInputTasks gets a reference to the given []UserInputTask and assigns it to the AllUserInputTasks field.
func (o *Release) SetAllUserInputTasks(v []UserInputTask) {
	o.AllUserInputTasks = v
}

// GetDone returns the Done field value if set, zero value otherwise.
func (o *Release) GetDone() bool {
	if o == nil || isNil(o.Done) {
		var ret bool
		return ret
	}
	return *o.Done
}

// GetDoneOk returns a tuple with the Done field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetDoneOk() (*bool, bool) {
	if o == nil || isNil(o.Done) {
		return nil, false
	}
	return o.Done, true
}

// HasDone returns a boolean if a field has been set.
func (o *Release) HasDone() bool {
	if o != nil && !isNil(o.Done) {
		return true
	}

	return false
}

// SetDone gets a reference to the given bool and assigns it to the Done field.
func (o *Release) SetDone(v bool) {
	o.Done = &v
}

// GetPlannedOrActive returns the PlannedOrActive field value if set, zero value otherwise.
func (o *Release) GetPlannedOrActive() bool {
	if o == nil || isNil(o.PlannedOrActive) {
		var ret bool
		return ret
	}
	return *o.PlannedOrActive
}

// GetPlannedOrActiveOk returns a tuple with the PlannedOrActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetPlannedOrActiveOk() (*bool, bool) {
	if o == nil || isNil(o.PlannedOrActive) {
		return nil, false
	}
	return o.PlannedOrActive, true
}

// HasPlannedOrActive returns a boolean if a field has been set.
func (o *Release) HasPlannedOrActive() bool {
	if o != nil && !isNil(o.PlannedOrActive) {
		return true
	}

	return false
}

// SetPlannedOrActive gets a reference to the given bool and assigns it to the PlannedOrActive field.
func (o *Release) SetPlannedOrActive(v bool) {
	o.PlannedOrActive = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Release) GetActive() bool {
	if o == nil || isNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetActiveOk() (*bool, bool) {
	if o == nil || isNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Release) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Release) SetActive(v bool) {
	o.Active = &v
}

// GetDefunct returns the Defunct field value if set, zero value otherwise.
func (o *Release) GetDefunct() bool {
	if o == nil || isNil(o.Defunct) {
		var ret bool
		return ret
	}
	return *o.Defunct
}

// GetDefunctOk returns a tuple with the Defunct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetDefunctOk() (*bool, bool) {
	if o == nil || isNil(o.Defunct) {
		return nil, false
	}
	return o.Defunct, true
}

// HasDefunct returns a boolean if a field has been set.
func (o *Release) HasDefunct() bool {
	if o != nil && !isNil(o.Defunct) {
		return true
	}

	return false
}

// SetDefunct gets a reference to the given bool and assigns it to the Defunct field.
func (o *Release) SetDefunct(v bool) {
	o.Defunct = &v
}

// GetUpdatable returns the Updatable field value if set, zero value otherwise.
func (o *Release) GetUpdatable() bool {
	if o == nil || isNil(o.Updatable) {
		var ret bool
		return ret
	}
	return *o.Updatable
}

// GetUpdatableOk returns a tuple with the Updatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetUpdatableOk() (*bool, bool) {
	if o == nil || isNil(o.Updatable) {
		return nil, false
	}
	return o.Updatable, true
}

// HasUpdatable returns a boolean if a field has been set.
func (o *Release) HasUpdatable() bool {
	if o != nil && !isNil(o.Updatable) {
		return true
	}

	return false
}

// SetUpdatable gets a reference to the given bool and assigns it to the Updatable field.
func (o *Release) SetUpdatable(v bool) {
	o.Updatable = &v
}

// GetAborted returns the Aborted field value if set, zero value otherwise.
func (o *Release) GetAborted() bool {
	if o == nil || isNil(o.Aborted) {
		var ret bool
		return ret
	}
	return *o.Aborted
}

// GetAbortedOk returns a tuple with the Aborted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAbortedOk() (*bool, bool) {
	if o == nil || isNil(o.Aborted) {
		return nil, false
	}
	return o.Aborted, true
}

// HasAborted returns a boolean if a field has been set.
func (o *Release) HasAborted() bool {
	if o != nil && !isNil(o.Aborted) {
		return true
	}

	return false
}

// SetAborted gets a reference to the given bool and assigns it to the Aborted field.
func (o *Release) SetAborted(v bool) {
	o.Aborted = &v
}

// GetFailing returns the Failing field value if set, zero value otherwise.
func (o *Release) GetFailing() bool {
	if o == nil || isNil(o.Failing) {
		var ret bool
		return ret
	}
	return *o.Failing
}

// GetFailingOk returns a tuple with the Failing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetFailingOk() (*bool, bool) {
	if o == nil || isNil(o.Failing) {
		return nil, false
	}
	return o.Failing, true
}

// HasFailing returns a boolean if a field has been set.
func (o *Release) HasFailing() bool {
	if o != nil && !isNil(o.Failing) {
		return true
	}

	return false
}

// SetFailing gets a reference to the given bool and assigns it to the Failing field.
func (o *Release) SetFailing(v bool) {
	o.Failing = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *Release) GetFailed() bool {
	if o == nil || isNil(o.Failed) {
		var ret bool
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetFailedOk() (*bool, bool) {
	if o == nil || isNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *Release) HasFailed() bool {
	if o != nil && !isNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given bool and assigns it to the Failed field.
func (o *Release) SetFailed(v bool) {
	o.Failed = &v
}

// GetPaused returns the Paused field value if set, zero value otherwise.
func (o *Release) GetPaused() bool {
	if o == nil || isNil(o.Paused) {
		var ret bool
		return ret
	}
	return *o.Paused
}

// GetPausedOk returns a tuple with the Paused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetPausedOk() (*bool, bool) {
	if o == nil || isNil(o.Paused) {
		return nil, false
	}
	return o.Paused, true
}

// HasPaused returns a boolean if a field has been set.
func (o *Release) HasPaused() bool {
	if o != nil && !isNil(o.Paused) {
		return true
	}

	return false
}

// SetPaused gets a reference to the given bool and assigns it to the Paused field.
func (o *Release) SetPaused(v bool) {
	o.Paused = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *Release) GetTemplate() bool {
	if o == nil || isNil(o.Template) {
		var ret bool
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetTemplateOk() (*bool, bool) {
	if o == nil || isNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *Release) HasTemplate() bool {
	if o != nil && !isNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given bool and assigns it to the Template field.
func (o *Release) SetTemplate(v bool) {
	o.Template = &v
}

// GetPlanned returns the Planned field value if set, zero value otherwise.
func (o *Release) GetPlanned() bool {
	if o == nil || isNil(o.Planned) {
		var ret bool
		return ret
	}
	return *o.Planned
}

// GetPlannedOk returns a tuple with the Planned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetPlannedOk() (*bool, bool) {
	if o == nil || isNil(o.Planned) {
		return nil, false
	}
	return o.Planned, true
}

// HasPlanned returns a boolean if a field has been set.
func (o *Release) HasPlanned() bool {
	if o != nil && !isNil(o.Planned) {
		return true
	}

	return false
}

// SetPlanned gets a reference to the given bool and assigns it to the Planned field.
func (o *Release) SetPlanned(v bool) {
	o.Planned = &v
}

// GetInProgress returns the InProgress field value if set, zero value otherwise.
func (o *Release) GetInProgress() bool {
	if o == nil || isNil(o.InProgress) {
		var ret bool
		return ret
	}
	return *o.InProgress
}

// GetInProgressOk returns a tuple with the InProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetInProgressOk() (*bool, bool) {
	if o == nil || isNil(o.InProgress) {
		return nil, false
	}
	return o.InProgress, true
}

// HasInProgress returns a boolean if a field has been set.
func (o *Release) HasInProgress() bool {
	if o != nil && !isNil(o.InProgress) {
		return true
	}

	return false
}

// SetInProgress gets a reference to the given bool and assigns it to the InProgress field.
func (o *Release) SetInProgress(v bool) {
	o.InProgress = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *Release) GetRelease() Release {
	if o == nil || isNil(o.Release) {
		var ret Release
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetReleaseOk() (*Release, bool) {
	if o == nil || isNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *Release) HasRelease() bool {
	if o != nil && !isNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given Release and assigns it to the Release field.
func (o *Release) SetRelease(v Release) {
	o.Release = &v
}

// GetReleaseUid returns the ReleaseUid field value if set, zero value otherwise.
func (o *Release) GetReleaseUid() int32 {
	if o == nil || isNil(o.ReleaseUid) {
		var ret int32
		return ret
	}
	return *o.ReleaseUid
}

// GetReleaseUidOk returns a tuple with the ReleaseUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetReleaseUidOk() (*int32, bool) {
	if o == nil || isNil(o.ReleaseUid) {
		return nil, false
	}
	return o.ReleaseUid, true
}

// HasReleaseUid returns a boolean if a field has been set.
func (o *Release) HasReleaseUid() bool {
	if o != nil && !isNil(o.ReleaseUid) {
		return true
	}

	return false
}

// SetReleaseUid gets a reference to the given int32 and assigns it to the ReleaseUid field.
func (o *Release) SetReleaseUid(v int32) {
	o.ReleaseUid = &v
}

// GetDisplayPath returns the DisplayPath field value if set, zero value otherwise.
func (o *Release) GetDisplayPath() string {
	if o == nil || isNil(o.DisplayPath) {
		var ret string
		return ret
	}
	return *o.DisplayPath
}

// GetDisplayPathOk returns a tuple with the DisplayPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetDisplayPathOk() (*string, bool) {
	if o == nil || isNil(o.DisplayPath) {
		return nil, false
	}
	return o.DisplayPath, true
}

// HasDisplayPath returns a boolean if a field has been set.
func (o *Release) HasDisplayPath() bool {
	if o != nil && !isNil(o.DisplayPath) {
		return true
	}

	return false
}

// SetDisplayPath gets a reference to the given string and assigns it to the DisplayPath field.
func (o *Release) SetDisplayPath(v string) {
	o.DisplayPath = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *Release) GetChildren() []PlanItem {
	if o == nil || isNil(o.Children) {
		var ret []PlanItem
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetChildrenOk() ([]PlanItem, bool) {
	if o == nil || isNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Release) HasChildren() bool {
	if o != nil && !isNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []PlanItem and assigns it to the Children field.
func (o *Release) SetChildren(v []PlanItem) {
	o.Children = v
}

// GetAllPlanItems returns the AllPlanItems field value if set, zero value otherwise.
func (o *Release) GetAllPlanItems() []PlanItem {
	if o == nil || isNil(o.AllPlanItems) {
		var ret []PlanItem
		return ret
	}
	return o.AllPlanItems
}

// GetAllPlanItemsOk returns a tuple with the AllPlanItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetAllPlanItemsOk() ([]PlanItem, bool) {
	if o == nil || isNil(o.AllPlanItems) {
		return nil, false
	}
	return o.AllPlanItems, true
}

// HasAllPlanItems returns a boolean if a field has been set.
func (o *Release) HasAllPlanItems() bool {
	if o != nil && !isNil(o.AllPlanItems) {
		return true
	}

	return false
}

// SetAllPlanItems gets a reference to the given []PlanItem and assigns it to the AllPlanItems field.
func (o *Release) SetAllPlanItems(v []PlanItem) {
	o.AllPlanItems = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Release) GetUrl() string {
	if o == nil || isNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetUrlOk() (*string, bool) {
	if o == nil || isNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Release) HasUrl() bool {
	if o != nil && !isNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Release) SetUrl(v string) {
	o.Url = &v
}

// GetActiveTasks returns the ActiveTasks field value if set, zero value otherwise.
func (o *Release) GetActiveTasks() []Task {
	if o == nil || isNil(o.ActiveTasks) {
		var ret []Task
		return ret
	}
	return o.ActiveTasks
}

// GetActiveTasksOk returns a tuple with the ActiveTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetActiveTasksOk() ([]Task, bool) {
	if o == nil || isNil(o.ActiveTasks) {
		return nil, false
	}
	return o.ActiveTasks, true
}

// HasActiveTasks returns a boolean if a field has been set.
func (o *Release) HasActiveTasks() bool {
	if o != nil && !isNil(o.ActiveTasks) {
		return true
	}

	return false
}

// SetActiveTasks gets a reference to the given []Task and assigns it to the ActiveTasks field.
func (o *Release) SetActiveTasks(v []Task) {
	o.ActiveTasks = v
}

// GetVariableUsages returns the VariableUsages field value if set, zero value otherwise.
func (o *Release) GetVariableUsages() []UsagePoint {
	if o == nil || isNil(o.VariableUsages) {
		var ret []UsagePoint
		return ret
	}
	return o.VariableUsages
}

// GetVariableUsagesOk returns a tuple with the VariableUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetVariableUsagesOk() ([]UsagePoint, bool) {
	if o == nil || isNil(o.VariableUsages) {
		return nil, false
	}
	return o.VariableUsages, true
}

// HasVariableUsages returns a boolean if a field has been set.
func (o *Release) HasVariableUsages() bool {
	if o != nil && !isNil(o.VariableUsages) {
		return true
	}

	return false
}

// SetVariableUsages gets a reference to the given []UsagePoint and assigns it to the VariableUsages field.
func (o *Release) SetVariableUsages(v []UsagePoint) {
	o.VariableUsages = v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *Release) GetPending() bool {
	if o == nil || isNil(o.Pending) {
		var ret bool
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetPendingOk() (*bool, bool) {
	if o == nil || isNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *Release) HasPending() bool {
	if o != nil && !isNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given bool and assigns it to the Pending field.
func (o *Release) SetPending(v bool) {
	o.Pending = &v
}

func (o Release) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Release) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !isNil(o.ScheduledStartDate) {
		toSerialize["scheduledStartDate"] = o.ScheduledStartDate
	}
	if !isNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !isNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !isNil(o.PlannedDuration) {
		toSerialize["plannedDuration"] = o.PlannedDuration
	}
	if !isNil(o.FlagStatus) {
		toSerialize["flagStatus"] = o.FlagStatus
	}
	if !isNil(o.FlagComment) {
		toSerialize["flagComment"] = o.FlagComment
	}
	if !isNil(o.OverdueNotified) {
		toSerialize["overdueNotified"] = o.OverdueNotified
	}
	if !isNil(o.Flagged) {
		toSerialize["flagged"] = o.Flagged
	}
	if !isNil(o.StartOrScheduledDate) {
		toSerialize["startOrScheduledDate"] = o.StartOrScheduledDate
	}
	if !isNil(o.EndOrDueDate) {
		toSerialize["endOrDueDate"] = o.EndOrDueDate
	}
	if !isNil(o.Overdue) {
		toSerialize["overdue"] = o.Overdue
	}
	if o.OrCalculateDueDate.IsSet() {
		toSerialize["orCalculateDueDate"] = o.OrCalculateDueDate.Get()
	}
	if !isNil(o.ComputedPlannedDuration) {
		toSerialize["computedPlannedDuration"] = o.ComputedPlannedDuration
	}
	if !isNil(o.ActualDuration) {
		toSerialize["actualDuration"] = o.ActualDuration
	}
	if !isNil(o.RootReleaseId) {
		toSerialize["rootReleaseId"] = o.RootReleaseId
	}
	if !isNil(o.MaxConcurrentReleases) {
		toSerialize["maxConcurrentReleases"] = o.MaxConcurrentReleases
	}
	if !isNil(o.ReleaseTriggers) {
		toSerialize["releaseTriggers"] = o.ReleaseTriggers
	}
	if !isNil(o.Teams) {
		toSerialize["teams"] = o.Teams
	}
	if !isNil(o.MemberViewers) {
		toSerialize["memberViewers"] = o.MemberViewers
	}
	if !isNil(o.RoleViewers) {
		toSerialize["roleViewers"] = o.RoleViewers
	}
	if !isNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !isNil(o.Phases) {
		toSerialize["phases"] = o.Phases
	}
	if !isNil(o.QueryableStartDate) {
		toSerialize["queryableStartDate"] = o.QueryableStartDate
	}
	if !isNil(o.QueryableEndDate) {
		toSerialize["queryableEndDate"] = o.QueryableEndDate
	}
	if !isNil(o.RealFlagStatus) {
		toSerialize["realFlagStatus"] = o.RealFlagStatus
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !isNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !isNil(o.CalendarLinkToken) {
		toSerialize["calendarLinkToken"] = o.CalendarLinkToken
	}
	if !isNil(o.CalendarPublished) {
		toSerialize["calendarPublished"] = o.CalendarPublished
	}
	if !isNil(o.Tutorial) {
		toSerialize["tutorial"] = o.Tutorial
	}
	if !isNil(o.AbortOnFailure) {
		toSerialize["abortOnFailure"] = o.AbortOnFailure
	}
	if !isNil(o.ArchiveRelease) {
		toSerialize["archiveRelease"] = o.ArchiveRelease
	}
	if !isNil(o.AllowPasswordsInAllFields) {
		toSerialize["allowPasswordsInAllFields"] = o.AllowPasswordsInAllFields
	}
	if !isNil(o.DisableNotifications) {
		toSerialize["disableNotifications"] = o.DisableNotifications
	}
	if !isNil(o.AllowConcurrentReleasesFromTrigger) {
		toSerialize["allowConcurrentReleasesFromTrigger"] = o.AllowConcurrentReleasesFromTrigger
	}
	if !isNil(o.OriginTemplateId) {
		toSerialize["originTemplateId"] = o.OriginTemplateId
	}
	if !isNil(o.CreatedFromTrigger) {
		toSerialize["createdFromTrigger"] = o.CreatedFromTrigger
	}
	if !isNil(o.ScriptUsername) {
		toSerialize["scriptUsername"] = o.ScriptUsername
	}
	if !isNil(o.ScriptUserPassword) {
		toSerialize["scriptUserPassword"] = o.ScriptUserPassword
	}
	if !isNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !isNil(o.StartedFromTaskId) {
		toSerialize["startedFromTaskId"] = o.StartedFromTaskId
	}
	if !isNil(o.AutoStart) {
		toSerialize["autoStart"] = o.AutoStart
	}
	if !isNil(o.AutomatedResumeCount) {
		toSerialize["automatedResumeCount"] = o.AutomatedResumeCount
	}
	if !isNil(o.MaxAutomatedResumes) {
		toSerialize["maxAutomatedResumes"] = o.MaxAutomatedResumes
	}
	if !isNil(o.AbortComment) {
		toSerialize["abortComment"] = o.AbortComment
	}
	if !isNil(o.VariableMapping) {
		toSerialize["variableMapping"] = o.VariableMapping
	}
	if !isNil(o.RiskProfile) {
		toSerialize["riskProfile"] = o.RiskProfile
	}
	if !isNil(o.Metadata) {
		toSerialize["$metadata"] = o.Metadata
	}
	if !isNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !isNil(o.CiUid) {
		toSerialize["ciUid"] = o.CiUid
	}
	if !isNil(o.VariableValues) {
		toSerialize["variableValues"] = o.VariableValues
	}
	if !isNil(o.PasswordVariableValues) {
		toSerialize["passwordVariableValues"] = o.PasswordVariableValues
	}
	if !isNil(o.CiPropertyVariables) {
		toSerialize["ciPropertyVariables"] = o.CiPropertyVariables
	}
	if !isNil(o.AllStringVariableValues) {
		toSerialize["allStringVariableValues"] = o.AllStringVariableValues
	}
	if !isNil(o.AllReleaseGlobalAndFolderVariables) {
		toSerialize["allReleaseGlobalAndFolderVariables"] = o.AllReleaseGlobalAndFolderVariables
	}
	if !isNil(o.AllVariableValuesAsStringsWithInterpolationInfo) {
		toSerialize["allVariableValuesAsStringsWithInterpolationInfo"] = o.AllVariableValuesAsStringsWithInterpolationInfo
	}
	if !isNil(o.VariablesKeysInNonInterpolatableVariableValues) {
		toSerialize["variablesKeysInNonInterpolatableVariableValues"] = o.VariablesKeysInNonInterpolatableVariableValues
	}
	if !isNil(o.VariablesByKeys) {
		toSerialize["variablesByKeys"] = o.VariablesByKeys
	}
	if !isNil(o.AllVariables) {
		toSerialize["allVariables"] = o.AllVariables
	}
	if !isNil(o.GlobalVariables) {
		toSerialize["globalVariables"] = o.GlobalVariables
	}
	if !isNil(o.FolderVariables) {
		toSerialize["folderVariables"] = o.FolderVariables
	}
	if !isNil(o.AdminTeam) {
		toSerialize["adminTeam"] = o.AdminTeam
	}
	if !isNil(o.ReleaseAttachments) {
		toSerialize["releaseAttachments"] = o.ReleaseAttachments
	}
	if !isNil(o.CurrentPhase) {
		toSerialize["currentPhase"] = o.CurrentPhase
	}
	if !isNil(o.CurrentTask) {
		toSerialize["currentTask"] = o.CurrentTask
	}
	if !isNil(o.AllTasks) {
		toSerialize["allTasks"] = o.AllTasks
	}
	if !isNil(o.AllGates) {
		toSerialize["allGates"] = o.AllGates
	}
	if !isNil(o.AllUserInputTasks) {
		toSerialize["allUserInputTasks"] = o.AllUserInputTasks
	}
	if !isNil(o.Done) {
		toSerialize["done"] = o.Done
	}
	if !isNil(o.PlannedOrActive) {
		toSerialize["plannedOrActive"] = o.PlannedOrActive
	}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.Defunct) {
		toSerialize["defunct"] = o.Defunct
	}
	if !isNil(o.Updatable) {
		toSerialize["updatable"] = o.Updatable
	}
	if !isNil(o.Aborted) {
		toSerialize["aborted"] = o.Aborted
	}
	if !isNil(o.Failing) {
		toSerialize["failing"] = o.Failing
	}
	if !isNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	if !isNil(o.Paused) {
		toSerialize["paused"] = o.Paused
	}
	if !isNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !isNil(o.Planned) {
		toSerialize["planned"] = o.Planned
	}
	if !isNil(o.InProgress) {
		toSerialize["inProgress"] = o.InProgress
	}
	if !isNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !isNil(o.ReleaseUid) {
		toSerialize["releaseUid"] = o.ReleaseUid
	}
	if !isNil(o.DisplayPath) {
		toSerialize["displayPath"] = o.DisplayPath
	}
	if !isNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !isNil(o.AllPlanItems) {
		toSerialize["allPlanItems"] = o.AllPlanItems
	}
	if !isNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !isNil(o.ActiveTasks) {
		toSerialize["activeTasks"] = o.ActiveTasks
	}
	if !isNil(o.VariableUsages) {
		toSerialize["variableUsages"] = o.VariableUsages
	}
	if !isNil(o.Pending) {
		toSerialize["pending"] = o.Pending
	}
	return toSerialize, nil
}

type NullableRelease struct {
	value *Release
	isSet bool
}

func (v NullableRelease) Get() *Release {
	return v.value
}

func (v *NullableRelease) Set(val *Release) {
	v.value = val
	v.isSet = true
}

func (v NullableRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelease(val *Release) *NullableRelease {
	return &NullableRelease{value: val, isSet: true}
}

func (v NullableRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


