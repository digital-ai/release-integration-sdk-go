/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TimeFrame the model 'TimeFrame'
type TimeFrame string

// List of TimeFrame
const (
	LAST_SEVEN_DAYS TimeFrame = "LAST_SEVEN_DAYS"
	LAST_MONTH TimeFrame = "LAST_MONTH"
	LAST_THREE_MONTHS TimeFrame = "LAST_THREE_MONTHS"
	LAST_SIX_MONTHS TimeFrame = "LAST_SIX_MONTHS"
	LAST_YEAR TimeFrame = "LAST_YEAR"
	RANGE TimeFrame = "RANGE"
)

// All allowed values of TimeFrame enum
var AllowedTimeFrameEnumValues = []TimeFrame{
	"LAST_SEVEN_DAYS",
	"LAST_MONTH",
	"LAST_THREE_MONTHS",
	"LAST_SIX_MONTHS",
	"LAST_YEAR",
	"RANGE",
}

func (v *TimeFrame) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeFrame(value)
	for _, existing := range AllowedTimeFrameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeFrame", value)
}

// NewTimeFrameFromValue returns a pointer to a valid TimeFrame
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeFrameFromValue(v string) (*TimeFrame, error) {
	ev := TimeFrame(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeFrame: valid values are %v", v, AllowedTimeFrameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeFrame) IsValid() bool {
	for _, existing := range AllowedTimeFrameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeFrame value
func (v TimeFrame) Ptr() *TimeFrame {
	return &v
}

type NullableTimeFrame struct {
	value *TimeFrame
	isSet bool
}

func (v NullableTimeFrame) Get() *TimeFrame {
	return v.value
}

func (v *NullableTimeFrame) Set(val *TimeFrame) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeFrame) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeFrame) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeFrame(val *TimeFrame) *NullableTimeFrame {
	return &NullableTimeFrame{value: val, isSet: true}
}

func (v NullableTimeFrame) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeFrame) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

