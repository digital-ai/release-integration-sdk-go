/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ReleaseGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseGroup{}

// ReleaseGroup struct for ReleaseGroup
type ReleaseGroup struct {
	Id         *string                            `json:"id,omitempty"`
	Type       *string                            `json:"type,omitempty"`
	Metadata   *map[string]map[string]interface{} `json:"$metadata,omitempty"`
	Title      *string                            `json:"title,omitempty"`
	Status     *ReleaseGroupStatus                `json:"status,omitempty"`
	StartDate  *time.Time                         `json:"startDate,omitempty"`
	EndDate    *time.Time                         `json:"endDate,omitempty"`
	RiskScore  *int32                             `json:"riskScore,omitempty"`
	ReleaseIds []string                           `json:"releaseIds,omitempty"`
	Progress   *int32                             `json:"progress,omitempty"`
	FolderId   *string                            `json:"folderId,omitempty"`
	Updatable  *bool                              `json:"updatable,omitempty"`
}

// NewReleaseGroup instantiates a new ReleaseGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseGroup() *ReleaseGroup {
	this := ReleaseGroup{}
	return &this
}

// NewReleaseGroupWithDefaults instantiates a new ReleaseGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseGroupWithDefaults() *ReleaseGroup {
	this := ReleaseGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReleaseGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReleaseGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReleaseGroup) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ReleaseGroup) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ReleaseGroup) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ReleaseGroup) SetType(v string) {
	o.Type = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ReleaseGroup) GetMetadata() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetMetadataOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ReleaseGroup) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]map[string]interface{} and assigns it to the Metadata field.
func (o *ReleaseGroup) SetMetadata(v map[string]map[string]interface{}) {
	o.Metadata = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ReleaseGroup) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ReleaseGroup) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ReleaseGroup) SetTitle(v string) {
	o.Title = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ReleaseGroup) GetStatus() ReleaseGroupStatus {
	if o == nil || IsNil(o.Status) {
		var ret ReleaseGroupStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetStatusOk() (*ReleaseGroupStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ReleaseGroup) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ReleaseGroupStatus and assigns it to the Status field.
func (o *ReleaseGroup) SetStatus(v ReleaseGroupStatus) {
	o.Status = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ReleaseGroup) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ReleaseGroup) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *ReleaseGroup) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ReleaseGroup) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ReleaseGroup) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *ReleaseGroup) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetRiskScore returns the RiskScore field value if set, zero value otherwise.
func (o *ReleaseGroup) GetRiskScore() int32 {
	if o == nil || IsNil(o.RiskScore) {
		var ret int32
		return ret
	}
	return *o.RiskScore
}

// GetRiskScoreOk returns a tuple with the RiskScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetRiskScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.RiskScore) {
		return nil, false
	}
	return o.RiskScore, true
}

// HasRiskScore returns a boolean if a field has been set.
func (o *ReleaseGroup) HasRiskScore() bool {
	if o != nil && !IsNil(o.RiskScore) {
		return true
	}

	return false
}

// SetRiskScore gets a reference to the given int32 and assigns it to the RiskScore field.
func (o *ReleaseGroup) SetRiskScore(v int32) {
	o.RiskScore = &v
}

// GetReleaseIds returns the ReleaseIds field value if set, zero value otherwise.
func (o *ReleaseGroup) GetReleaseIds() []string {
	if o == nil || IsNil(o.ReleaseIds) {
		var ret []string
		return ret
	}
	return o.ReleaseIds
}

// GetReleaseIdsOk returns a tuple with the ReleaseIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetReleaseIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReleaseIds) {
		return nil, false
	}
	return o.ReleaseIds, true
}

// HasReleaseIds returns a boolean if a field has been set.
func (o *ReleaseGroup) HasReleaseIds() bool {
	if o != nil && !IsNil(o.ReleaseIds) {
		return true
	}

	return false
}

// SetReleaseIds gets a reference to the given []string and assigns it to the ReleaseIds field.
func (o *ReleaseGroup) SetReleaseIds(v []string) {
	o.ReleaseIds = v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *ReleaseGroup) GetProgress() int32 {
	if o == nil || IsNil(o.Progress) {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetProgressOk() (*int32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *ReleaseGroup) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *ReleaseGroup) SetProgress(v int32) {
	o.Progress = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *ReleaseGroup) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *ReleaseGroup) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *ReleaseGroup) SetFolderId(v string) {
	o.FolderId = &v
}

// GetUpdatable returns the Updatable field value if set, zero value otherwise.
func (o *ReleaseGroup) GetUpdatable() bool {
	if o == nil || IsNil(o.Updatable) {
		var ret bool
		return ret
	}
	return *o.Updatable
}

// GetUpdatableOk returns a tuple with the Updatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroup) GetUpdatableOk() (*bool, bool) {
	if o == nil || IsNil(o.Updatable) {
		return nil, false
	}
	return o.Updatable, true
}

// HasUpdatable returns a boolean if a field has been set.
func (o *ReleaseGroup) HasUpdatable() bool {
	if o != nil && !IsNil(o.Updatable) {
		return true
	}

	return false
}

// SetUpdatable gets a reference to the given bool and assigns it to the Updatable field.
func (o *ReleaseGroup) SetUpdatable(v bool) {
	o.Updatable = &v
}

func (o ReleaseGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Metadata) {
		toSerialize["$metadata"] = o.Metadata
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.RiskScore) {
		toSerialize["riskScore"] = o.RiskScore
	}
	if !IsNil(o.ReleaseIds) {
		toSerialize["releaseIds"] = o.ReleaseIds
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !IsNil(o.Updatable) {
		toSerialize["updatable"] = o.Updatable
	}
	return toSerialize, nil
}

type NullableReleaseGroup struct {
	value *ReleaseGroup
	isSet bool
}

func (v NullableReleaseGroup) Get() *ReleaseGroup {
	return v.value
}

func (v *NullableReleaseGroup) Set(val *ReleaseGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseGroup(val *ReleaseGroup) *NullableReleaseGroup {
	return &NullableReleaseGroup{value: val, isSet: true}
}

func (v NullableReleaseGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
