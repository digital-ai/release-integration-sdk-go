/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AbortRelease type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbortRelease{}

// AbortRelease struct for AbortRelease
type AbortRelease struct {
	AbortComment *string `json:"abortComment,omitempty"`
}

// NewAbortRelease instantiates a new AbortRelease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbortRelease() *AbortRelease {
	this := AbortRelease{}
	return &this
}

// NewAbortReleaseWithDefaults instantiates a new AbortRelease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbortReleaseWithDefaults() *AbortRelease {
	this := AbortRelease{}
	return &this
}

// GetAbortComment returns the AbortComment field value if set, zero value otherwise.
func (o *AbortRelease) GetAbortComment() string {
	if o == nil || isNil(o.AbortComment) {
		var ret string
		return ret
	}
	return *o.AbortComment
}

// GetAbortCommentOk returns a tuple with the AbortComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbortRelease) GetAbortCommentOk() (*string, bool) {
	if o == nil || isNil(o.AbortComment) {
		return nil, false
	}
	return o.AbortComment, true
}

// HasAbortComment returns a boolean if a field has been set.
func (o *AbortRelease) HasAbortComment() bool {
	if o != nil && !isNil(o.AbortComment) {
		return true
	}

	return false
}

// SetAbortComment gets a reference to the given string and assigns it to the AbortComment field.
func (o *AbortRelease) SetAbortComment(v string) {
	o.AbortComment = &v
}

func (o AbortRelease) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbortRelease) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AbortComment) {
		toSerialize["abortComment"] = o.AbortComment
	}
	return toSerialize, nil
}

type NullableAbortRelease struct {
	value *AbortRelease
	isSet bool
}

func (v NullableAbortRelease) Get() *AbortRelease {
	return v.value
}

func (v *NullableAbortRelease) Set(val *AbortRelease) {
	v.value = val
	v.isSet = true
}

func (v NullableAbortRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableAbortRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbortRelease(val *AbortRelease) *NullableAbortRelease {
	return &NullableAbortRelease{value: val, isSet: true}
}

func (v NullableAbortRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbortRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


