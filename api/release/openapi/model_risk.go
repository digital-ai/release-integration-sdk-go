/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Risk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Risk{}

// Risk struct for Risk
type Risk struct {
	VariableUsages []UsagePoint `json:"variableUsages,omitempty"`
	Score *int32 `json:"score,omitempty"`
	TotalScore *int32 `json:"totalScore,omitempty"`
	RiskAssessments []RiskAssessment `json:"riskAssessments,omitempty"`
}

// NewRisk instantiates a new Risk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRisk() *Risk {
	this := Risk{}
	return &this
}

// NewRiskWithDefaults instantiates a new Risk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskWithDefaults() *Risk {
	this := Risk{}
	return &this
}

// GetVariableUsages returns the VariableUsages field value if set, zero value otherwise.
func (o *Risk) GetVariableUsages() []UsagePoint {
	if o == nil || isNil(o.VariableUsages) {
		var ret []UsagePoint
		return ret
	}
	return o.VariableUsages
}

// GetVariableUsagesOk returns a tuple with the VariableUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Risk) GetVariableUsagesOk() ([]UsagePoint, bool) {
	if o == nil || isNil(o.VariableUsages) {
		return nil, false
	}
	return o.VariableUsages, true
}

// HasVariableUsages returns a boolean if a field has been set.
func (o *Risk) HasVariableUsages() bool {
	if o != nil && !isNil(o.VariableUsages) {
		return true
	}

	return false
}

// SetVariableUsages gets a reference to the given []UsagePoint and assigns it to the VariableUsages field.
func (o *Risk) SetVariableUsages(v []UsagePoint) {
	o.VariableUsages = v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *Risk) GetScore() int32 {
	if o == nil || isNil(o.Score) {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Risk) GetScoreOk() (*int32, bool) {
	if o == nil || isNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *Risk) HasScore() bool {
	if o != nil && !isNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *Risk) SetScore(v int32) {
	o.Score = &v
}

// GetTotalScore returns the TotalScore field value if set, zero value otherwise.
func (o *Risk) GetTotalScore() int32 {
	if o == nil || isNil(o.TotalScore) {
		var ret int32
		return ret
	}
	return *o.TotalScore
}

// GetTotalScoreOk returns a tuple with the TotalScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Risk) GetTotalScoreOk() (*int32, bool) {
	if o == nil || isNil(o.TotalScore) {
		return nil, false
	}
	return o.TotalScore, true
}

// HasTotalScore returns a boolean if a field has been set.
func (o *Risk) HasTotalScore() bool {
	if o != nil && !isNil(o.TotalScore) {
		return true
	}

	return false
}

// SetTotalScore gets a reference to the given int32 and assigns it to the TotalScore field.
func (o *Risk) SetTotalScore(v int32) {
	o.TotalScore = &v
}

// GetRiskAssessments returns the RiskAssessments field value if set, zero value otherwise.
func (o *Risk) GetRiskAssessments() []RiskAssessment {
	if o == nil || isNil(o.RiskAssessments) {
		var ret []RiskAssessment
		return ret
	}
	return o.RiskAssessments
}

// GetRiskAssessmentsOk returns a tuple with the RiskAssessments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Risk) GetRiskAssessmentsOk() ([]RiskAssessment, bool) {
	if o == nil || isNil(o.RiskAssessments) {
		return nil, false
	}
	return o.RiskAssessments, true
}

// HasRiskAssessments returns a boolean if a field has been set.
func (o *Risk) HasRiskAssessments() bool {
	if o != nil && !isNil(o.RiskAssessments) {
		return true
	}

	return false
}

// SetRiskAssessments gets a reference to the given []RiskAssessment and assigns it to the RiskAssessments field.
func (o *Risk) SetRiskAssessments(v []RiskAssessment) {
	o.RiskAssessments = v
}

func (o Risk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Risk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.VariableUsages) {
		toSerialize["variableUsages"] = o.VariableUsages
	}
	if !isNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !isNil(o.TotalScore) {
		toSerialize["totalScore"] = o.TotalScore
	}
	if !isNil(o.RiskAssessments) {
		toSerialize["riskAssessments"] = o.RiskAssessments
	}
	return toSerialize, nil
}

type NullableRisk struct {
	value *Risk
	isSet bool
}

func (v NullableRisk) Get() *Risk {
	return v.value
}

func (v *NullableRisk) Set(val *Risk) {
	v.value = val
	v.isSet = true
}

func (v NullableRisk) IsSet() bool {
	return v.isSet
}

func (v *NullableRisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRisk(val *Risk) *NullableRisk {
	return &NullableRisk{value: val, isSet: true}
}

func (v NullableRisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


