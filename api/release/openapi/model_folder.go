/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Folder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Folder{}

// Folder struct for Folder
type Folder struct {
	Title *string `json:"title,omitempty"`
	Children []Folder `json:"children,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"$metadata,omitempty"`
	AllVariables []Variable `json:"allVariables,omitempty"`
	FolderVariables *FolderVariables `json:"folderVariables,omitempty"`
}

// NewFolder instantiates a new Folder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolder() *Folder {
	this := Folder{}
	return &this
}

// NewFolderWithDefaults instantiates a new Folder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderWithDefaults() *Folder {
	this := Folder{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Folder) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Folder) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Folder) SetTitle(v string) {
	o.Title = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *Folder) GetChildren() []Folder {
	if o == nil || isNil(o.Children) {
		var ret []Folder
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetChildrenOk() ([]Folder, bool) {
	if o == nil || isNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Folder) HasChildren() bool {
	if o != nil && !isNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []Folder and assigns it to the Children field.
func (o *Folder) SetChildren(v []Folder) {
	o.Children = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Folder) GetMetadata() map[string]map[string]interface{} {
	if o == nil || isNil(o.Metadata) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetMetadataOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Folder) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]map[string]interface{} and assigns it to the Metadata field.
func (o *Folder) SetMetadata(v map[string]map[string]interface{}) {
	o.Metadata = &v
}

// GetAllVariables returns the AllVariables field value if set, zero value otherwise.
func (o *Folder) GetAllVariables() []Variable {
	if o == nil || isNil(o.AllVariables) {
		var ret []Variable
		return ret
	}
	return o.AllVariables
}

// GetAllVariablesOk returns a tuple with the AllVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetAllVariablesOk() ([]Variable, bool) {
	if o == nil || isNil(o.AllVariables) {
		return nil, false
	}
	return o.AllVariables, true
}

// HasAllVariables returns a boolean if a field has been set.
func (o *Folder) HasAllVariables() bool {
	if o != nil && !isNil(o.AllVariables) {
		return true
	}

	return false
}

// SetAllVariables gets a reference to the given []Variable and assigns it to the AllVariables field.
func (o *Folder) SetAllVariables(v []Variable) {
	o.AllVariables = v
}

// GetFolderVariables returns the FolderVariables field value if set, zero value otherwise.
func (o *Folder) GetFolderVariables() FolderVariables {
	if o == nil || isNil(o.FolderVariables) {
		var ret FolderVariables
		return ret
	}
	return *o.FolderVariables
}

// GetFolderVariablesOk returns a tuple with the FolderVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetFolderVariablesOk() (*FolderVariables, bool) {
	if o == nil || isNil(o.FolderVariables) {
		return nil, false
	}
	return o.FolderVariables, true
}

// HasFolderVariables returns a boolean if a field has been set.
func (o *Folder) HasFolderVariables() bool {
	if o != nil && !isNil(o.FolderVariables) {
		return true
	}

	return false
}

// SetFolderVariables gets a reference to the given FolderVariables and assigns it to the FolderVariables field.
func (o *Folder) SetFolderVariables(v FolderVariables) {
	o.FolderVariables = &v
}

func (o Folder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Folder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !isNil(o.Metadata) {
		toSerialize["$metadata"] = o.Metadata
	}
	if !isNil(o.AllVariables) {
		toSerialize["allVariables"] = o.AllVariables
	}
	if !isNil(o.FolderVariables) {
		toSerialize["folderVariables"] = o.FolderVariables
	}
	return toSerialize, nil
}

type NullableFolder struct {
	value *Folder
	isSet bool
}

func (v NullableFolder) Get() *Folder {
	return v.value
}

func (v *NullableFolder) Set(val *Folder) {
	v.value = val
	v.isSet = true
}

func (v NullableFolder) IsSet() bool {
	return v.isSet
}

func (v *NullableFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolder(val *Folder) *NullableFolder {
	return &NullableFolder{value: val, isSet: true}
}

func (v NullableFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


