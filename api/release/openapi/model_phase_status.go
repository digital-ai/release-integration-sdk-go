/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PhaseStatus the model 'PhaseStatus'
type PhaseStatus string

// List of PhaseStatus
const (
	PLANNED_PHASE     PhaseStatus = "PLANNED_PHASE"
	IN_PROGRESS_PHASE PhaseStatus = "IN_PROGRESS_PHASE"
	COMPLETED_PHASE   PhaseStatus = "COMPLETED_PHASE"
	FAILING_PHASE     PhaseStatus = "FAILING_PHASE"
	FAILED_PHASE      PhaseStatus = "FAILED_PHASE"
	SKIPPED_PHASE     PhaseStatus = "SKIPPED_PHASE"
	ABORTED_PHASE     PhaseStatus = "ABORTED_PHASE"
)

// All allowed values of PhaseStatus enum
var AllowedPhaseStatusEnumValues = []PhaseStatus{
	"PLANNED_PHASE",
	"IN_PROGRESS_PHASE",
	"COMPLETED_PHASE",
	"FAILING_PHASE",
	"FAILED_PHASE",
	"SKIPPED_PHASE",
	"ABORTED_PHASE",
}

func (v *PhaseStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PhaseStatus(value)
	for _, existing := range AllowedPhaseStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PhaseStatus", value)
}

// NewPhaseStatusFromValue returns a pointer to a valid PhaseStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPhaseStatusFromValue(v string) (*PhaseStatus, error) {
	ev := PhaseStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PhaseStatus: valid values are %v", v, AllowedPhaseStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PhaseStatus) IsValid() bool {
	for _, existing := range AllowedPhaseStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PhaseStatus value
func (v PhaseStatus) Ptr() *PhaseStatus {
	return &v
}

type NullablePhaseStatus struct {
	value *PhaseStatus
	isSet bool
}

func (v NullablePhaseStatus) Get() *PhaseStatus {
	return v.value
}

func (v *NullablePhaseStatus) Set(val *PhaseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePhaseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePhaseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhaseStatus(val *PhaseStatus) *NullablePhaseStatus {
	return &NullablePhaseStatus{value: val, isSet: true}
}

func (v NullablePhaseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhaseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
