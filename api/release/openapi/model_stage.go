/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Stage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stage{}

// Stage struct for Stage
type Stage struct {
	Title *string `json:"title,omitempty"`
	Status *StageStatus `json:"status,omitempty"`
	Items []StageTrackedItem `json:"items,omitempty"`
	Transition *Transition `json:"transition,omitempty"`
	Owner *string `json:"owner,omitempty"`
	Team *string `json:"team,omitempty"`
	Open *bool `json:"open,omitempty"`
	Closed *bool `json:"closed,omitempty"`
}

// NewStage instantiates a new Stage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStage() *Stage {
	this := Stage{}
	return &this
}

// NewStageWithDefaults instantiates a new Stage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStageWithDefaults() *Stage {
	this := Stage{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Stage) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Stage) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Stage) SetTitle(v string) {
	o.Title = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Stage) GetStatus() StageStatus {
	if o == nil || isNil(o.Status) {
		var ret StageStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetStatusOk() (*StageStatus, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Stage) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StageStatus and assigns it to the Status field.
func (o *Stage) SetStatus(v StageStatus) {
	o.Status = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Stage) GetItems() []StageTrackedItem {
	if o == nil || isNil(o.Items) {
		var ret []StageTrackedItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetItemsOk() ([]StageTrackedItem, bool) {
	if o == nil || isNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Stage) HasItems() bool {
	if o != nil && !isNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []StageTrackedItem and assigns it to the Items field.
func (o *Stage) SetItems(v []StageTrackedItem) {
	o.Items = v
}

// GetTransition returns the Transition field value if set, zero value otherwise.
func (o *Stage) GetTransition() Transition {
	if o == nil || isNil(o.Transition) {
		var ret Transition
		return ret
	}
	return *o.Transition
}

// GetTransitionOk returns a tuple with the Transition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetTransitionOk() (*Transition, bool) {
	if o == nil || isNil(o.Transition) {
		return nil, false
	}
	return o.Transition, true
}

// HasTransition returns a boolean if a field has been set.
func (o *Stage) HasTransition() bool {
	if o != nil && !isNil(o.Transition) {
		return true
	}

	return false
}

// SetTransition gets a reference to the given Transition and assigns it to the Transition field.
func (o *Stage) SetTransition(v Transition) {
	o.Transition = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Stage) GetOwner() string {
	if o == nil || isNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetOwnerOk() (*string, bool) {
	if o == nil || isNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Stage) HasOwner() bool {
	if o != nil && !isNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Stage) SetOwner(v string) {
	o.Owner = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *Stage) GetTeam() string {
	if o == nil || isNil(o.Team) {
		var ret string
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetTeamOk() (*string, bool) {
	if o == nil || isNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *Stage) HasTeam() bool {
	if o != nil && !isNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given string and assigns it to the Team field.
func (o *Stage) SetTeam(v string) {
	o.Team = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *Stage) GetOpen() bool {
	if o == nil || isNil(o.Open) {
		var ret bool
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetOpenOk() (*bool, bool) {
	if o == nil || isNil(o.Open) {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *Stage) HasOpen() bool {
	if o != nil && !isNil(o.Open) {
		return true
	}

	return false
}

// SetOpen gets a reference to the given bool and assigns it to the Open field.
func (o *Stage) SetOpen(v bool) {
	o.Open = &v
}

// GetClosed returns the Closed field value if set, zero value otherwise.
func (o *Stage) GetClosed() bool {
	if o == nil || isNil(o.Closed) {
		var ret bool
		return ret
	}
	return *o.Closed
}

// GetClosedOk returns a tuple with the Closed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetClosedOk() (*bool, bool) {
	if o == nil || isNil(o.Closed) {
		return nil, false
	}
	return o.Closed, true
}

// HasClosed returns a boolean if a field has been set.
func (o *Stage) HasClosed() bool {
	if o != nil && !isNil(o.Closed) {
		return true
	}

	return false
}

// SetClosed gets a reference to the given bool and assigns it to the Closed field.
func (o *Stage) SetClosed(v bool) {
	o.Closed = &v
}

func (o Stage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !isNil(o.Transition) {
		toSerialize["transition"] = o.Transition
	}
	if !isNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !isNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if !isNil(o.Open) {
		toSerialize["open"] = o.Open
	}
	if !isNil(o.Closed) {
		toSerialize["closed"] = o.Closed
	}
	return toSerialize, nil
}

type NullableStage struct {
	value *Stage
	isSet bool
}

func (v NullableStage) Get() *Stage {
	return v.value
}

func (v *NullableStage) Set(val *Stage) {
	v.value = val
	v.isSet = true
}

func (v NullableStage) IsSet() bool {
	return v.isSet
}

func (v *NullableStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStage(val *Stage) *NullableStage {
	return &NullableStage{value: val, isSet: true}
}

func (v NullableStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


