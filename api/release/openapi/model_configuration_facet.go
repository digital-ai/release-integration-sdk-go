/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigurationFacet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationFacet{}

// ConfigurationFacet struct for ConfigurationFacet
type ConfigurationFacet struct {
	Id                      *string            `json:"id,omitempty"`
	Type                    *string            `json:"type,omitempty"`
	Scope                   *FacetScope        `json:"scope,omitempty"`
	TargetId                *string            `json:"targetId,omitempty"`
	ConfigurationUri        *string            `json:"configurationUri,omitempty"`
	VariableMapping         *map[string]string `json:"variableMapping,omitempty"`
	VariableUsages          []UsagePoint       `json:"variableUsages,omitempty"`
	PropertiesWithVariables []interface{}      `json:"propertiesWithVariables,omitempty"`
}

// NewConfigurationFacet instantiates a new ConfigurationFacet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationFacet() *ConfigurationFacet {
	this := ConfigurationFacet{}
	return &this
}

// NewConfigurationFacetWithDefaults instantiates a new ConfigurationFacet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationFacetWithDefaults() *ConfigurationFacet {
	this := ConfigurationFacet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigurationFacet) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationFacet) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigurationFacet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConfigurationFacet) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConfigurationFacet) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationFacet) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConfigurationFacet) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConfigurationFacet) SetType(v string) {
	o.Type = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ConfigurationFacet) GetScope() FacetScope {
	if o == nil || IsNil(o.Scope) {
		var ret FacetScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationFacet) GetScopeOk() (*FacetScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ConfigurationFacet) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given FacetScope and assigns it to the Scope field.
func (o *ConfigurationFacet) SetScope(v FacetScope) {
	o.Scope = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *ConfigurationFacet) GetTargetId() string {
	if o == nil || IsNil(o.TargetId) {
		var ret string
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationFacet) GetTargetIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *ConfigurationFacet) HasTargetId() bool {
	if o != nil && !IsNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given string and assigns it to the TargetId field.
func (o *ConfigurationFacet) SetTargetId(v string) {
	o.TargetId = &v
}

// GetConfigurationUri returns the ConfigurationUri field value if set, zero value otherwise.
func (o *ConfigurationFacet) GetConfigurationUri() string {
	if o == nil || IsNil(o.ConfigurationUri) {
		var ret string
		return ret
	}
	return *o.ConfigurationUri
}

// GetConfigurationUriOk returns a tuple with the ConfigurationUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationFacet) GetConfigurationUriOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationUri) {
		return nil, false
	}
	return o.ConfigurationUri, true
}

// HasConfigurationUri returns a boolean if a field has been set.
func (o *ConfigurationFacet) HasConfigurationUri() bool {
	if o != nil && !IsNil(o.ConfigurationUri) {
		return true
	}

	return false
}

// SetConfigurationUri gets a reference to the given string and assigns it to the ConfigurationUri field.
func (o *ConfigurationFacet) SetConfigurationUri(v string) {
	o.ConfigurationUri = &v
}

// GetVariableMapping returns the VariableMapping field value if set, zero value otherwise.
func (o *ConfigurationFacet) GetVariableMapping() map[string]string {
	if o == nil || IsNil(o.VariableMapping) {
		var ret map[string]string
		return ret
	}
	return *o.VariableMapping
}

// GetVariableMappingOk returns a tuple with the VariableMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationFacet) GetVariableMappingOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.VariableMapping) {
		return nil, false
	}
	return o.VariableMapping, true
}

// HasVariableMapping returns a boolean if a field has been set.
func (o *ConfigurationFacet) HasVariableMapping() bool {
	if o != nil && !IsNil(o.VariableMapping) {
		return true
	}

	return false
}

// SetVariableMapping gets a reference to the given map[string]string and assigns it to the VariableMapping field.
func (o *ConfigurationFacet) SetVariableMapping(v map[string]string) {
	o.VariableMapping = &v
}

// GetVariableUsages returns the VariableUsages field value if set, zero value otherwise.
func (o *ConfigurationFacet) GetVariableUsages() []UsagePoint {
	if o == nil || IsNil(o.VariableUsages) {
		var ret []UsagePoint
		return ret
	}
	return o.VariableUsages
}

// GetVariableUsagesOk returns a tuple with the VariableUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationFacet) GetVariableUsagesOk() ([]UsagePoint, bool) {
	if o == nil || IsNil(o.VariableUsages) {
		return nil, false
	}
	return o.VariableUsages, true
}

// HasVariableUsages returns a boolean if a field has been set.
func (o *ConfigurationFacet) HasVariableUsages() bool {
	if o != nil && !IsNil(o.VariableUsages) {
		return true
	}

	return false
}

// SetVariableUsages gets a reference to the given []UsagePoint and assigns it to the VariableUsages field.
func (o *ConfigurationFacet) SetVariableUsages(v []UsagePoint) {
	o.VariableUsages = v
}

// GetPropertiesWithVariables returns the PropertiesWithVariables field value if set, zero value otherwise.
func (o *ConfigurationFacet) GetPropertiesWithVariables() []interface{} {
	if o == nil || IsNil(o.PropertiesWithVariables) {
		var ret []interface{}
		return ret
	}
	return o.PropertiesWithVariables
}

// GetPropertiesWithVariablesOk returns a tuple with the PropertiesWithVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationFacet) GetPropertiesWithVariablesOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.PropertiesWithVariables) {
		return nil, false
	}
	return o.PropertiesWithVariables, true
}

// HasPropertiesWithVariables returns a boolean if a field has been set.
func (o *ConfigurationFacet) HasPropertiesWithVariables() bool {
	if o != nil && !IsNil(o.PropertiesWithVariables) {
		return true
	}

	return false
}

// SetPropertiesWithVariables gets a reference to the given []interface{} and assigns it to the PropertiesWithVariables field.
func (o *ConfigurationFacet) SetPropertiesWithVariables(v []interface{}) {
	o.PropertiesWithVariables = v
}

func (o ConfigurationFacet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationFacet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	if !IsNil(o.ConfigurationUri) {
		toSerialize["configurationUri"] = o.ConfigurationUri
	}
	if !IsNil(o.VariableMapping) {
		toSerialize["variableMapping"] = o.VariableMapping
	}
	if !IsNil(o.VariableUsages) {
		toSerialize["variableUsages"] = o.VariableUsages
	}
	if !IsNil(o.PropertiesWithVariables) {
		toSerialize["propertiesWithVariables"] = o.PropertiesWithVariables
	}
	return toSerialize, nil
}

type NullableConfigurationFacet struct {
	value *ConfigurationFacet
	isSet bool
}

func (v NullableConfigurationFacet) Get() *ConfigurationFacet {
	return v.value
}

func (v *NullableConfigurationFacet) Set(val *ConfigurationFacet) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationFacet) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationFacet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationFacet(val *ConfigurationFacet) *NullableConfigurationFacet {
	return &NullableConfigurationFacet{value: val, isSet: true}
}

func (v NullableConfigurationFacet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationFacet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
