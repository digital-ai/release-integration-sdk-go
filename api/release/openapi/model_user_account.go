/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAccount{}

// UserAccount struct for UserAccount
type UserAccount struct {
	Username *string `json:"username,omitempty"`
	External *bool `json:"external,omitempty"`
	ProfileId *string `json:"profileId,omitempty"`
	Email *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
	PreviousPassword *string `json:"previousPassword,omitempty"`
	FullName *string `json:"fullName,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
	LoginAllowed *bool `json:"loginAllowed,omitempty"`
	DateFormat *string `json:"dateFormat,omitempty"`
	TimeFormat *string `json:"timeFormat,omitempty"`
	FirstDayOfWeek *int32 `json:"firstDayOfWeek,omitempty"`
	LastActive *string `json:"lastActive,omitempty"`
	AnalyticsEnabled *bool `json:"analyticsEnabled,omitempty"`
	TaskDrawerEnabled *bool `json:"taskDrawerEnabled,omitempty"`
}

// NewUserAccount instantiates a new UserAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAccount() *UserAccount {
	this := UserAccount{}
	return &this
}

// NewUserAccountWithDefaults instantiates a new UserAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAccountWithDefaults() *UserAccount {
	this := UserAccount{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserAccount) GetUsername() string {
	if o == nil || isNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetUsernameOk() (*string, bool) {
	if o == nil || isNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserAccount) HasUsername() bool {
	if o != nil && !isNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserAccount) SetUsername(v string) {
	o.Username = &v
}

// GetExternal returns the External field value if set, zero value otherwise.
func (o *UserAccount) GetExternal() bool {
	if o == nil || isNil(o.External) {
		var ret bool
		return ret
	}
	return *o.External
}

// GetExternalOk returns a tuple with the External field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetExternalOk() (*bool, bool) {
	if o == nil || isNil(o.External) {
		return nil, false
	}
	return o.External, true
}

// HasExternal returns a boolean if a field has been set.
func (o *UserAccount) HasExternal() bool {
	if o != nil && !isNil(o.External) {
		return true
	}

	return false
}

// SetExternal gets a reference to the given bool and assigns it to the External field.
func (o *UserAccount) SetExternal(v bool) {
	o.External = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *UserAccount) GetProfileId() string {
	if o == nil || isNil(o.ProfileId) {
		var ret string
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetProfileIdOk() (*string, bool) {
	if o == nil || isNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *UserAccount) HasProfileId() bool {
	if o != nil && !isNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given string and assigns it to the ProfileId field.
func (o *UserAccount) SetProfileId(v string) {
	o.ProfileId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserAccount) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserAccount) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserAccount) SetEmail(v string) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserAccount) GetPassword() string {
	if o == nil || isNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetPasswordOk() (*string, bool) {
	if o == nil || isNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserAccount) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserAccount) SetPassword(v string) {
	o.Password = &v
}

// GetPreviousPassword returns the PreviousPassword field value if set, zero value otherwise.
func (o *UserAccount) GetPreviousPassword() string {
	if o == nil || isNil(o.PreviousPassword) {
		var ret string
		return ret
	}
	return *o.PreviousPassword
}

// GetPreviousPasswordOk returns a tuple with the PreviousPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetPreviousPasswordOk() (*string, bool) {
	if o == nil || isNil(o.PreviousPassword) {
		return nil, false
	}
	return o.PreviousPassword, true
}

// HasPreviousPassword returns a boolean if a field has been set.
func (o *UserAccount) HasPreviousPassword() bool {
	if o != nil && !isNil(o.PreviousPassword) {
		return true
	}

	return false
}

// SetPreviousPassword gets a reference to the given string and assigns it to the PreviousPassword field.
func (o *UserAccount) SetPreviousPassword(v string) {
	o.PreviousPassword = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *UserAccount) GetFullName() string {
	if o == nil || isNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetFullNameOk() (*string, bool) {
	if o == nil || isNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *UserAccount) HasFullName() bool {
	if o != nil && !isNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *UserAccount) SetFullName(v string) {
	o.FullName = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *UserAccount) GetExternalId() string {
	if o == nil || isNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetExternalIdOk() (*string, bool) {
	if o == nil || isNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *UserAccount) HasExternalId() bool {
	if o != nil && !isNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *UserAccount) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetLoginAllowed returns the LoginAllowed field value if set, zero value otherwise.
func (o *UserAccount) GetLoginAllowed() bool {
	if o == nil || isNil(o.LoginAllowed) {
		var ret bool
		return ret
	}
	return *o.LoginAllowed
}

// GetLoginAllowedOk returns a tuple with the LoginAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetLoginAllowedOk() (*bool, bool) {
	if o == nil || isNil(o.LoginAllowed) {
		return nil, false
	}
	return o.LoginAllowed, true
}

// HasLoginAllowed returns a boolean if a field has been set.
func (o *UserAccount) HasLoginAllowed() bool {
	if o != nil && !isNil(o.LoginAllowed) {
		return true
	}

	return false
}

// SetLoginAllowed gets a reference to the given bool and assigns it to the LoginAllowed field.
func (o *UserAccount) SetLoginAllowed(v bool) {
	o.LoginAllowed = &v
}

// GetDateFormat returns the DateFormat field value if set, zero value otherwise.
func (o *UserAccount) GetDateFormat() string {
	if o == nil || isNil(o.DateFormat) {
		var ret string
		return ret
	}
	return *o.DateFormat
}

// GetDateFormatOk returns a tuple with the DateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetDateFormatOk() (*string, bool) {
	if o == nil || isNil(o.DateFormat) {
		return nil, false
	}
	return o.DateFormat, true
}

// HasDateFormat returns a boolean if a field has been set.
func (o *UserAccount) HasDateFormat() bool {
	if o != nil && !isNil(o.DateFormat) {
		return true
	}

	return false
}

// SetDateFormat gets a reference to the given string and assigns it to the DateFormat field.
func (o *UserAccount) SetDateFormat(v string) {
	o.DateFormat = &v
}

// GetTimeFormat returns the TimeFormat field value if set, zero value otherwise.
func (o *UserAccount) GetTimeFormat() string {
	if o == nil || isNil(o.TimeFormat) {
		var ret string
		return ret
	}
	return *o.TimeFormat
}

// GetTimeFormatOk returns a tuple with the TimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetTimeFormatOk() (*string, bool) {
	if o == nil || isNil(o.TimeFormat) {
		return nil, false
	}
	return o.TimeFormat, true
}

// HasTimeFormat returns a boolean if a field has been set.
func (o *UserAccount) HasTimeFormat() bool {
	if o != nil && !isNil(o.TimeFormat) {
		return true
	}

	return false
}

// SetTimeFormat gets a reference to the given string and assigns it to the TimeFormat field.
func (o *UserAccount) SetTimeFormat(v string) {
	o.TimeFormat = &v
}

// GetFirstDayOfWeek returns the FirstDayOfWeek field value if set, zero value otherwise.
func (o *UserAccount) GetFirstDayOfWeek() int32 {
	if o == nil || isNil(o.FirstDayOfWeek) {
		var ret int32
		return ret
	}
	return *o.FirstDayOfWeek
}

// GetFirstDayOfWeekOk returns a tuple with the FirstDayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetFirstDayOfWeekOk() (*int32, bool) {
	if o == nil || isNil(o.FirstDayOfWeek) {
		return nil, false
	}
	return o.FirstDayOfWeek, true
}

// HasFirstDayOfWeek returns a boolean if a field has been set.
func (o *UserAccount) HasFirstDayOfWeek() bool {
	if o != nil && !isNil(o.FirstDayOfWeek) {
		return true
	}

	return false
}

// SetFirstDayOfWeek gets a reference to the given int32 and assigns it to the FirstDayOfWeek field.
func (o *UserAccount) SetFirstDayOfWeek(v int32) {
	o.FirstDayOfWeek = &v
}

// GetLastActive returns the LastActive field value if set, zero value otherwise.
func (o *UserAccount) GetLastActive() string {
	if o == nil || isNil(o.LastActive) {
		var ret string
		return ret
	}
	return *o.LastActive
}

// GetLastActiveOk returns a tuple with the LastActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetLastActiveOk() (*string, bool) {
	if o == nil || isNil(o.LastActive) {
		return nil, false
	}
	return o.LastActive, true
}

// HasLastActive returns a boolean if a field has been set.
func (o *UserAccount) HasLastActive() bool {
	if o != nil && !isNil(o.LastActive) {
		return true
	}

	return false
}

// SetLastActive gets a reference to the given string and assigns it to the LastActive field.
func (o *UserAccount) SetLastActive(v string) {
	o.LastActive = &v
}

// GetAnalyticsEnabled returns the AnalyticsEnabled field value if set, zero value otherwise.
func (o *UserAccount) GetAnalyticsEnabled() bool {
	if o == nil || isNil(o.AnalyticsEnabled) {
		var ret bool
		return ret
	}
	return *o.AnalyticsEnabled
}

// GetAnalyticsEnabledOk returns a tuple with the AnalyticsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetAnalyticsEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.AnalyticsEnabled) {
		return nil, false
	}
	return o.AnalyticsEnabled, true
}

// HasAnalyticsEnabled returns a boolean if a field has been set.
func (o *UserAccount) HasAnalyticsEnabled() bool {
	if o != nil && !isNil(o.AnalyticsEnabled) {
		return true
	}

	return false
}

// SetAnalyticsEnabled gets a reference to the given bool and assigns it to the AnalyticsEnabled field.
func (o *UserAccount) SetAnalyticsEnabled(v bool) {
	o.AnalyticsEnabled = &v
}

// GetTaskDrawerEnabled returns the TaskDrawerEnabled field value if set, zero value otherwise.
func (o *UserAccount) GetTaskDrawerEnabled() bool {
	if o == nil || isNil(o.TaskDrawerEnabled) {
		var ret bool
		return ret
	}
	return *o.TaskDrawerEnabled
}

// GetTaskDrawerEnabledOk returns a tuple with the TaskDrawerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetTaskDrawerEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.TaskDrawerEnabled) {
		return nil, false
	}
	return o.TaskDrawerEnabled, true
}

// HasTaskDrawerEnabled returns a boolean if a field has been set.
func (o *UserAccount) HasTaskDrawerEnabled() bool {
	if o != nil && !isNil(o.TaskDrawerEnabled) {
		return true
	}

	return false
}

// SetTaskDrawerEnabled gets a reference to the given bool and assigns it to the TaskDrawerEnabled field.
func (o *UserAccount) SetTaskDrawerEnabled(v bool) {
	o.TaskDrawerEnabled = &v
}

func (o UserAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !isNil(o.External) {
		toSerialize["external"] = o.External
	}
	if !isNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !isNil(o.PreviousPassword) {
		toSerialize["previousPassword"] = o.PreviousPassword
	}
	if !isNil(o.FullName) {
		toSerialize["fullName"] = o.FullName
	}
	if !isNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !isNil(o.LoginAllowed) {
		toSerialize["loginAllowed"] = o.LoginAllowed
	}
	if !isNil(o.DateFormat) {
		toSerialize["dateFormat"] = o.DateFormat
	}
	if !isNil(o.TimeFormat) {
		toSerialize["timeFormat"] = o.TimeFormat
	}
	if !isNil(o.FirstDayOfWeek) {
		toSerialize["firstDayOfWeek"] = o.FirstDayOfWeek
	}
	if !isNil(o.LastActive) {
		toSerialize["lastActive"] = o.LastActive
	}
	if !isNil(o.AnalyticsEnabled) {
		toSerialize["analyticsEnabled"] = o.AnalyticsEnabled
	}
	if !isNil(o.TaskDrawerEnabled) {
		toSerialize["taskDrawerEnabled"] = o.TaskDrawerEnabled
	}
	return toSerialize, nil
}

type NullableUserAccount struct {
	value *UserAccount
	isSet bool
}

func (v NullableUserAccount) Get() *UserAccount {
	return v.value
}

func (v *NullableUserAccount) Set(val *UserAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccount(val *UserAccount) *NullableUserAccount {
	return &NullableUserAccount{value: val, isSet: true}
}

func (v NullableUserAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


