/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseGroupFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseGroupFilters{}

// ReleaseGroupFilters struct for ReleaseGroupFilters
type ReleaseGroupFilters struct {
	Title *string `json:"title,omitempty"`
	FolderId *string `json:"folderId,omitempty"`
	Statuses []ReleaseGroupStatus `json:"statuses,omitempty"`
}

// NewReleaseGroupFilters instantiates a new ReleaseGroupFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseGroupFilters() *ReleaseGroupFilters {
	this := ReleaseGroupFilters{}
	return &this
}

// NewReleaseGroupFiltersWithDefaults instantiates a new ReleaseGroupFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseGroupFiltersWithDefaults() *ReleaseGroupFilters {
	this := ReleaseGroupFilters{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ReleaseGroupFilters) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroupFilters) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ReleaseGroupFilters) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ReleaseGroupFilters) SetTitle(v string) {
	o.Title = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *ReleaseGroupFilters) GetFolderId() string {
	if o == nil || isNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroupFilters) GetFolderIdOk() (*string, bool) {
	if o == nil || isNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *ReleaseGroupFilters) HasFolderId() bool {
	if o != nil && !isNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *ReleaseGroupFilters) SetFolderId(v string) {
	o.FolderId = &v
}

// GetStatuses returns the Statuses field value if set, zero value otherwise.
func (o *ReleaseGroupFilters) GetStatuses() []ReleaseGroupStatus {
	if o == nil || isNil(o.Statuses) {
		var ret []ReleaseGroupStatus
		return ret
	}
	return o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseGroupFilters) GetStatusesOk() ([]ReleaseGroupStatus, bool) {
	if o == nil || isNil(o.Statuses) {
		return nil, false
	}
	return o.Statuses, true
}

// HasStatuses returns a boolean if a field has been set.
func (o *ReleaseGroupFilters) HasStatuses() bool {
	if o != nil && !isNil(o.Statuses) {
		return true
	}

	return false
}

// SetStatuses gets a reference to the given []ReleaseGroupStatus and assigns it to the Statuses field.
func (o *ReleaseGroupFilters) SetStatuses(v []ReleaseGroupStatus) {
	o.Statuses = v
}

func (o ReleaseGroupFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseGroupFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !isNil(o.Statuses) {
		toSerialize["statuses"] = o.Statuses
	}
	return toSerialize, nil
}

type NullableReleaseGroupFilters struct {
	value *ReleaseGroupFilters
	isSet bool
}

func (v NullableReleaseGroupFilters) Get() *ReleaseGroupFilters {
	return v.value
}

func (v *NullableReleaseGroupFilters) Set(val *ReleaseGroupFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseGroupFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseGroupFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseGroupFilters(val *ReleaseGroupFilters) *NullableReleaseGroupFilters {
	return &NullableReleaseGroupFilters{value: val, isSet: true}
}

func (v NullableReleaseGroupFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseGroupFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


