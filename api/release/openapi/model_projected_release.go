/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ProjectedRelease type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectedRelease{}

// ProjectedRelease struct for ProjectedRelease
type ProjectedRelease struct {
	Id              *string          `json:"id,omitempty"`
	StartDate       *time.Time       `json:"startDate,omitempty"`
	StartDateString *string          `json:"startDateString,omitempty"`
	EndDate         *time.Time       `json:"endDate,omitempty"`
	EndDateString   *string          `json:"endDateString,omitempty"`
	Status          *string          `json:"status,omitempty"`
	Type            *string          `json:"type,omitempty"`
	Title           *string          `json:"title,omitempty"`
	Phases          []ProjectedPhase `json:"phases,omitempty"`
}

// NewProjectedRelease instantiates a new ProjectedRelease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectedRelease() *ProjectedRelease {
	this := ProjectedRelease{}
	return &this
}

// NewProjectedReleaseWithDefaults instantiates a new ProjectedRelease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectedReleaseWithDefaults() *ProjectedRelease {
	this := ProjectedRelease{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectedRelease) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedRelease) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectedRelease) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProjectedRelease) SetId(v string) {
	o.Id = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ProjectedRelease) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedRelease) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ProjectedRelease) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *ProjectedRelease) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStartDateString returns the StartDateString field value if set, zero value otherwise.
func (o *ProjectedRelease) GetStartDateString() string {
	if o == nil || IsNil(o.StartDateString) {
		var ret string
		return ret
	}
	return *o.StartDateString
}

// GetStartDateStringOk returns a tuple with the StartDateString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedRelease) GetStartDateStringOk() (*string, bool) {
	if o == nil || IsNil(o.StartDateString) {
		return nil, false
	}
	return o.StartDateString, true
}

// HasStartDateString returns a boolean if a field has been set.
func (o *ProjectedRelease) HasStartDateString() bool {
	if o != nil && !IsNil(o.StartDateString) {
		return true
	}

	return false
}

// SetStartDateString gets a reference to the given string and assigns it to the StartDateString field.
func (o *ProjectedRelease) SetStartDateString(v string) {
	o.StartDateString = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ProjectedRelease) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedRelease) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ProjectedRelease) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *ProjectedRelease) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetEndDateString returns the EndDateString field value if set, zero value otherwise.
func (o *ProjectedRelease) GetEndDateString() string {
	if o == nil || IsNil(o.EndDateString) {
		var ret string
		return ret
	}
	return *o.EndDateString
}

// GetEndDateStringOk returns a tuple with the EndDateString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedRelease) GetEndDateStringOk() (*string, bool) {
	if o == nil || IsNil(o.EndDateString) {
		return nil, false
	}
	return o.EndDateString, true
}

// HasEndDateString returns a boolean if a field has been set.
func (o *ProjectedRelease) HasEndDateString() bool {
	if o != nil && !IsNil(o.EndDateString) {
		return true
	}

	return false
}

// SetEndDateString gets a reference to the given string and assigns it to the EndDateString field.
func (o *ProjectedRelease) SetEndDateString(v string) {
	o.EndDateString = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProjectedRelease) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedRelease) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProjectedRelease) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ProjectedRelease) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProjectedRelease) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedRelease) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProjectedRelease) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProjectedRelease) SetType(v string) {
	o.Type = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ProjectedRelease) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedRelease) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ProjectedRelease) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ProjectedRelease) SetTitle(v string) {
	o.Title = &v
}

// GetPhases returns the Phases field value if set, zero value otherwise.
func (o *ProjectedRelease) GetPhases() []ProjectedPhase {
	if o == nil || IsNil(o.Phases) {
		var ret []ProjectedPhase
		return ret
	}
	return o.Phases
}

// GetPhasesOk returns a tuple with the Phases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedRelease) GetPhasesOk() ([]ProjectedPhase, bool) {
	if o == nil || IsNil(o.Phases) {
		return nil, false
	}
	return o.Phases, true
}

// HasPhases returns a boolean if a field has been set.
func (o *ProjectedRelease) HasPhases() bool {
	if o != nil && !IsNil(o.Phases) {
		return true
	}

	return false
}

// SetPhases gets a reference to the given []ProjectedPhase and assigns it to the Phases field.
func (o *ProjectedRelease) SetPhases(v []ProjectedPhase) {
	o.Phases = v
}

func (o ProjectedRelease) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectedRelease) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.StartDateString) {
		toSerialize["startDateString"] = o.StartDateString
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.EndDateString) {
		toSerialize["endDateString"] = o.EndDateString
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Phases) {
		toSerialize["phases"] = o.Phases
	}
	return toSerialize, nil
}

type NullableProjectedRelease struct {
	value *ProjectedRelease
	isSet bool
}

func (v NullableProjectedRelease) Get() *ProjectedRelease {
	return v.value
}

func (v *NullableProjectedRelease) Set(val *ProjectedRelease) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectedRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectedRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectedRelease(val *ProjectedRelease) *NullableProjectedRelease {
	return &NullableProjectedRelease{value: val, isSet: true}
}

func (v NullableProjectedRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectedRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
