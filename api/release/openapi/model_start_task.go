/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StartTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartTask{}

// StartTask struct for StartTask
type StartTask struct {
	Variables []Variable `json:"variables,omitempty"`
}

// NewStartTask instantiates a new StartTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartTask() *StartTask {
	this := StartTask{}
	return &this
}

// NewStartTaskWithDefaults instantiates a new StartTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartTaskWithDefaults() *StartTask {
	this := StartTask{}
	return &this
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *StartTask) GetVariables() []Variable {
	if o == nil || isNil(o.Variables) {
		var ret []Variable
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartTask) GetVariablesOk() ([]Variable, bool) {
	if o == nil || isNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *StartTask) HasVariables() bool {
	if o != nil && !isNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []Variable and assigns it to the Variables field.
func (o *StartTask) SetVariables(v []Variable) {
	o.Variables = v
}

func (o StartTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	return toSerialize, nil
}

type NullableStartTask struct {
	value *StartTask
	isSet bool
}

func (v NullableStartTask) Get() *StartTask {
	return v.value
}

func (v *NullableStartTask) Set(val *StartTask) {
	v.value = val
	v.isSet = true
}

func (v NullableStartTask) IsSet() bool {
	return v.isSet
}

func (v *NullableStartTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartTask(val *StartTask) *NullableStartTask {
	return &NullableStartTask{value: val, isSet: true}
}

func (v NullableStartTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


