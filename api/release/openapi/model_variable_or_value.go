/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VariableOrValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableOrValue{}

// VariableOrValue struct for VariableOrValue
type VariableOrValue struct {
	Variable *string     `json:"variable,omitempty"`
	Value    interface{} `json:"value,omitempty"`
}

// NewVariableOrValue instantiates a new VariableOrValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableOrValue() *VariableOrValue {
	this := VariableOrValue{}
	return &this
}

// NewVariableOrValueWithDefaults instantiates a new VariableOrValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableOrValueWithDefaults() *VariableOrValue {
	this := VariableOrValue{}
	return &this
}

// GetVariable returns the Variable field value if set, zero value otherwise.
func (o *VariableOrValue) GetVariable() string {
	if o == nil || IsNil(o.Variable) {
		var ret string
		return ret
	}
	return *o.Variable
}

// GetVariableOk returns a tuple with the Variable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableOrValue) GetVariableOk() (*string, bool) {
	if o == nil || IsNil(o.Variable) {
		return nil, false
	}
	return o.Variable, true
}

// HasVariable returns a boolean if a field has been set.
func (o *VariableOrValue) HasVariable() bool {
	if o != nil && !IsNil(o.Variable) {
		return true
	}

	return false
}

// SetVariable gets a reference to the given string and assigns it to the Variable field.
func (o *VariableOrValue) SetVariable(v string) {
	o.Variable = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableOrValue) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableOrValue) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VariableOrValue) HasValue() bool {
	if o != nil && IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *VariableOrValue) SetValue(v interface{}) {
	o.Value = v
}

func (o VariableOrValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableOrValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Variable) {
		toSerialize["variable"] = o.Variable
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableVariableOrValue struct {
	value *VariableOrValue
	isSet bool
}

func (v NullableVariableOrValue) Get() *VariableOrValue {
	return v.value
}

func (v *NullableVariableOrValue) Set(val *VariableOrValue) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableOrValue) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableOrValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableOrValue(val *VariableOrValue) *NullableVariableOrValue {
	return &NullableVariableOrValue{value: val, isSet: true}
}

func (v NullableVariableOrValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableOrValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
