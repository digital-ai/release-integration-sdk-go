/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TaskRecoverOp the model 'TaskRecoverOp'
type TaskRecoverOp string

// List of TaskRecoverOp
const (
	TASKRECOVEROP_SKIP_TASK     TaskRecoverOp = "SKIP_TASK"
	TASKRECOVEROP_RESTART_PHASE TaskRecoverOp = "RESTART_PHASE"
	TASKRECOVEROP_RUN_SCRIPT    TaskRecoverOp = "RUN_SCRIPT"
)

// All allowed values of TaskRecoverOp enum
var AllowedTaskRecoverOpEnumValues = []TaskRecoverOp{
	"SKIP_TASK",
	"RESTART_PHASE",
	"RUN_SCRIPT",
}

func (v *TaskRecoverOp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaskRecoverOp(value)
	for _, existing := range AllowedTaskRecoverOpEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaskRecoverOp", value)
}

// NewTaskRecoverOpFromValue returns a pointer to a valid TaskRecoverOp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskRecoverOpFromValue(v string) (*TaskRecoverOp, error) {
	ev := TaskRecoverOp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaskRecoverOp: valid values are %v", v, AllowedTaskRecoverOpEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskRecoverOp) IsValid() bool {
	for _, existing := range AllowedTaskRecoverOpEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaskRecoverOp value
func (v TaskRecoverOp) Ptr() *TaskRecoverOp {
	return &v
}

type NullableTaskRecoverOp struct {
	value *TaskRecoverOp
	isSet bool
}

func (v NullableTaskRecoverOp) Get() *TaskRecoverOp {
	return v.value
}

func (v *NullableTaskRecoverOp) Set(val *TaskRecoverOp) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskRecoverOp) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskRecoverOp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskRecoverOp(val *TaskRecoverOp) *NullableTaskRecoverOp {
	return &NullableTaskRecoverOp{value: val, isSet: true}
}

func (v NullableTaskRecoverOp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskRecoverOp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
