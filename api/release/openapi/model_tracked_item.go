/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TrackedItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackedItem{}

// TrackedItem struct for TrackedItem
type TrackedItem struct {
	Title *string `json:"title,omitempty"`
	ReleaseIds []string `json:"releaseIds,omitempty"`
	Descoped *bool `json:"descoped,omitempty"`
	CreatedDate *string `json:"createdDate,omitempty"`
	ModifiedDate *string `json:"modifiedDate,omitempty"`
}

// NewTrackedItem instantiates a new TrackedItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackedItem() *TrackedItem {
	this := TrackedItem{}
	return &this
}

// NewTrackedItemWithDefaults instantiates a new TrackedItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackedItemWithDefaults() *TrackedItem {
	this := TrackedItem{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *TrackedItem) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedItem) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *TrackedItem) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *TrackedItem) SetTitle(v string) {
	o.Title = &v
}

// GetReleaseIds returns the ReleaseIds field value if set, zero value otherwise.
func (o *TrackedItem) GetReleaseIds() []string {
	if o == nil || isNil(o.ReleaseIds) {
		var ret []string
		return ret
	}
	return o.ReleaseIds
}

// GetReleaseIdsOk returns a tuple with the ReleaseIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedItem) GetReleaseIdsOk() ([]string, bool) {
	if o == nil || isNil(o.ReleaseIds) {
		return nil, false
	}
	return o.ReleaseIds, true
}

// HasReleaseIds returns a boolean if a field has been set.
func (o *TrackedItem) HasReleaseIds() bool {
	if o != nil && !isNil(o.ReleaseIds) {
		return true
	}

	return false
}

// SetReleaseIds gets a reference to the given []string and assigns it to the ReleaseIds field.
func (o *TrackedItem) SetReleaseIds(v []string) {
	o.ReleaseIds = v
}

// GetDescoped returns the Descoped field value if set, zero value otherwise.
func (o *TrackedItem) GetDescoped() bool {
	if o == nil || isNil(o.Descoped) {
		var ret bool
		return ret
	}
	return *o.Descoped
}

// GetDescopedOk returns a tuple with the Descoped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedItem) GetDescopedOk() (*bool, bool) {
	if o == nil || isNil(o.Descoped) {
		return nil, false
	}
	return o.Descoped, true
}

// HasDescoped returns a boolean if a field has been set.
func (o *TrackedItem) HasDescoped() bool {
	if o != nil && !isNil(o.Descoped) {
		return true
	}

	return false
}

// SetDescoped gets a reference to the given bool and assigns it to the Descoped field.
func (o *TrackedItem) SetDescoped(v bool) {
	o.Descoped = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *TrackedItem) GetCreatedDate() string {
	if o == nil || isNil(o.CreatedDate) {
		var ret string
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedItem) GetCreatedDateOk() (*string, bool) {
	if o == nil || isNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *TrackedItem) HasCreatedDate() bool {
	if o != nil && !isNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given string and assigns it to the CreatedDate field.
func (o *TrackedItem) SetCreatedDate(v string) {
	o.CreatedDate = &v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *TrackedItem) GetModifiedDate() string {
	if o == nil || isNil(o.ModifiedDate) {
		var ret string
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedItem) GetModifiedDateOk() (*string, bool) {
	if o == nil || isNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *TrackedItem) HasModifiedDate() bool {
	if o != nil && !isNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given string and assigns it to the ModifiedDate field.
func (o *TrackedItem) SetModifiedDate(v string) {
	o.ModifiedDate = &v
}

func (o TrackedItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackedItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.ReleaseIds) {
		toSerialize["releaseIds"] = o.ReleaseIds
	}
	if !isNil(o.Descoped) {
		toSerialize["descoped"] = o.Descoped
	}
	if !isNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !isNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	return toSerialize, nil
}

type NullableTrackedItem struct {
	value *TrackedItem
	isSet bool
}

func (v NullableTrackedItem) Get() *TrackedItem {
	return v.value
}

func (v *NullableTrackedItem) Set(val *TrackedItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackedItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackedItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackedItem(val *TrackedItem) *NullableTrackedItem {
	return &NullableTrackedItem{value: val, isSet: true}
}

func (v NullableTrackedItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackedItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


