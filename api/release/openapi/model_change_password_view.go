/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ChangePasswordView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangePasswordView{}

// ChangePasswordView struct for ChangePasswordView
type ChangePasswordView struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewPassword     *string `json:"newPassword,omitempty"`
}

// NewChangePasswordView instantiates a new ChangePasswordView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangePasswordView() *ChangePasswordView {
	this := ChangePasswordView{}
	return &this
}

// NewChangePasswordViewWithDefaults instantiates a new ChangePasswordView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangePasswordViewWithDefaults() *ChangePasswordView {
	this := ChangePasswordView{}
	return &this
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise.
func (o *ChangePasswordView) GetCurrentPassword() string {
	if o == nil || IsNil(o.CurrentPassword) {
		var ret string
		return ret
	}
	return *o.CurrentPassword
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePasswordView) GetCurrentPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPassword) {
		return nil, false
	}
	return o.CurrentPassword, true
}

// HasCurrentPassword returns a boolean if a field has been set.
func (o *ChangePasswordView) HasCurrentPassword() bool {
	if o != nil && !IsNil(o.CurrentPassword) {
		return true
	}

	return false
}

// SetCurrentPassword gets a reference to the given string and assigns it to the CurrentPassword field.
func (o *ChangePasswordView) SetCurrentPassword(v string) {
	o.CurrentPassword = &v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *ChangePasswordView) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword) {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePasswordView) GetNewPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.NewPassword) {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *ChangePasswordView) HasNewPassword() bool {
	if o != nil && !IsNil(o.NewPassword) {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *ChangePasswordView) SetNewPassword(v string) {
	o.NewPassword = &v
}

func (o ChangePasswordView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangePasswordView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentPassword) {
		toSerialize["currentPassword"] = o.CurrentPassword
	}
	if !IsNil(o.NewPassword) {
		toSerialize["newPassword"] = o.NewPassword
	}
	return toSerialize, nil
}

type NullableChangePasswordView struct {
	value *ChangePasswordView
	isSet bool
}

func (v NullableChangePasswordView) Get() *ChangePasswordView {
	return v.value
}

func (v *NullableChangePasswordView) Set(val *ChangePasswordView) {
	v.value = val
	v.isSet = true
}

func (v NullableChangePasswordView) IsSet() bool {
	return v.isSet
}

func (v *NullableChangePasswordView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangePasswordView(val *ChangePasswordView) *NullableChangePasswordView {
	return &NullableChangePasswordView{value: val, isSet: true}
}

func (v NullableChangePasswordView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangePasswordView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
