/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApplicationView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationView{}

// ApplicationView struct for ApplicationView
type ApplicationView struct {
	Id *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Environments []BaseEnvironmentView `json:"environments,omitempty"`
}

// NewApplicationView instantiates a new ApplicationView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationView() *ApplicationView {
	this := ApplicationView{}
	return &this
}

// NewApplicationViewWithDefaults instantiates a new ApplicationView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationViewWithDefaults() *ApplicationView {
	this := ApplicationView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationView) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationView) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationView) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ApplicationView) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ApplicationView) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ApplicationView) SetTitle(v string) {
	o.Title = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *ApplicationView) GetEnvironments() []BaseEnvironmentView {
	if o == nil || isNil(o.Environments) {
		var ret []BaseEnvironmentView
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetEnvironmentsOk() ([]BaseEnvironmentView, bool) {
	if o == nil || isNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *ApplicationView) HasEnvironments() bool {
	if o != nil && !isNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []BaseEnvironmentView and assigns it to the Environments field.
func (o *ApplicationView) SetEnvironments(v []BaseEnvironmentView) {
	o.Environments = v
}

func (o ApplicationView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	return toSerialize, nil
}

type NullableApplicationView struct {
	value *ApplicationView
	isSet bool
}

func (v NullableApplicationView) Get() *ApplicationView {
	return v.value
}

func (v *NullableApplicationView) Set(val *ApplicationView) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationView) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationView(val *ApplicationView) *NullableApplicationView {
	return &NullableApplicationView{value: val, isSet: true}
}

func (v NullableApplicationView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


