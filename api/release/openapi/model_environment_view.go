/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvironmentView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentView{}

// EnvironmentView struct for EnvironmentView
type EnvironmentView struct {
	Id *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Stage *EnvironmentStageView `json:"stage,omitempty"`
	Labels []EnvironmentLabelView `json:"labels,omitempty"`
}

// NewEnvironmentView instantiates a new EnvironmentView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentView() *EnvironmentView {
	this := EnvironmentView{}
	return &this
}

// NewEnvironmentViewWithDefaults instantiates a new EnvironmentView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentViewWithDefaults() *EnvironmentView {
	this := EnvironmentView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EnvironmentView) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentView) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EnvironmentView) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EnvironmentView) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *EnvironmentView) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentView) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *EnvironmentView) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *EnvironmentView) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EnvironmentView) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentView) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EnvironmentView) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EnvironmentView) SetDescription(v string) {
	o.Description = &v
}

// GetStage returns the Stage field value if set, zero value otherwise.
func (o *EnvironmentView) GetStage() EnvironmentStageView {
	if o == nil || isNil(o.Stage) {
		var ret EnvironmentStageView
		return ret
	}
	return *o.Stage
}

// GetStageOk returns a tuple with the Stage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentView) GetStageOk() (*EnvironmentStageView, bool) {
	if o == nil || isNil(o.Stage) {
		return nil, false
	}
	return o.Stage, true
}

// HasStage returns a boolean if a field has been set.
func (o *EnvironmentView) HasStage() bool {
	if o != nil && !isNil(o.Stage) {
		return true
	}

	return false
}

// SetStage gets a reference to the given EnvironmentStageView and assigns it to the Stage field.
func (o *EnvironmentView) SetStage(v EnvironmentStageView) {
	o.Stage = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *EnvironmentView) GetLabels() []EnvironmentLabelView {
	if o == nil || isNil(o.Labels) {
		var ret []EnvironmentLabelView
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentView) GetLabelsOk() ([]EnvironmentLabelView, bool) {
	if o == nil || isNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *EnvironmentView) HasLabels() bool {
	if o != nil && !isNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []EnvironmentLabelView and assigns it to the Labels field.
func (o *EnvironmentView) SetLabels(v []EnvironmentLabelView) {
	o.Labels = v
}

func (o EnvironmentView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Stage) {
		toSerialize["stage"] = o.Stage
	}
	if !isNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableEnvironmentView struct {
	value *EnvironmentView
	isSet bool
}

func (v NullableEnvironmentView) Get() *EnvironmentView {
	return v.value
}

func (v *NullableEnvironmentView) Set(val *EnvironmentView) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentView) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentView(val *EnvironmentView) *NullableEnvironmentView {
	return &NullableEnvironmentView{value: val, isSet: true}
}

func (v NullableEnvironmentView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


