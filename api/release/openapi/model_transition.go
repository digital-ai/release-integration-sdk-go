/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Transition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transition{}

// Transition struct for Transition
type Transition struct {
	Title *string `json:"title,omitempty"`
	Stage *Stage `json:"stage,omitempty"`
	Conditions []Condition `json:"conditions,omitempty"`
	Automated *bool `json:"automated,omitempty"`
	AllConditions []Condition `json:"allConditions,omitempty"`
	LeafConditions []Condition `json:"leafConditions,omitempty"`
	RootCondition *Condition `json:"rootCondition,omitempty"`
}

// NewTransition instantiates a new Transition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransition() *Transition {
	this := Transition{}
	return &this
}

// NewTransitionWithDefaults instantiates a new Transition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransitionWithDefaults() *Transition {
	this := Transition{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Transition) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transition) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Transition) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Transition) SetTitle(v string) {
	o.Title = &v
}

// GetStage returns the Stage field value if set, zero value otherwise.
func (o *Transition) GetStage() Stage {
	if o == nil || isNil(o.Stage) {
		var ret Stage
		return ret
	}
	return *o.Stage
}

// GetStageOk returns a tuple with the Stage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transition) GetStageOk() (*Stage, bool) {
	if o == nil || isNil(o.Stage) {
		return nil, false
	}
	return o.Stage, true
}

// HasStage returns a boolean if a field has been set.
func (o *Transition) HasStage() bool {
	if o != nil && !isNil(o.Stage) {
		return true
	}

	return false
}

// SetStage gets a reference to the given Stage and assigns it to the Stage field.
func (o *Transition) SetStage(v Stage) {
	o.Stage = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *Transition) GetConditions() []Condition {
	if o == nil || isNil(o.Conditions) {
		var ret []Condition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transition) GetConditionsOk() ([]Condition, bool) {
	if o == nil || isNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *Transition) HasConditions() bool {
	if o != nil && !isNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []Condition and assigns it to the Conditions field.
func (o *Transition) SetConditions(v []Condition) {
	o.Conditions = v
}

// GetAutomated returns the Automated field value if set, zero value otherwise.
func (o *Transition) GetAutomated() bool {
	if o == nil || isNil(o.Automated) {
		var ret bool
		return ret
	}
	return *o.Automated
}

// GetAutomatedOk returns a tuple with the Automated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transition) GetAutomatedOk() (*bool, bool) {
	if o == nil || isNil(o.Automated) {
		return nil, false
	}
	return o.Automated, true
}

// HasAutomated returns a boolean if a field has been set.
func (o *Transition) HasAutomated() bool {
	if o != nil && !isNil(o.Automated) {
		return true
	}

	return false
}

// SetAutomated gets a reference to the given bool and assigns it to the Automated field.
func (o *Transition) SetAutomated(v bool) {
	o.Automated = &v
}

// GetAllConditions returns the AllConditions field value if set, zero value otherwise.
func (o *Transition) GetAllConditions() []Condition {
	if o == nil || isNil(o.AllConditions) {
		var ret []Condition
		return ret
	}
	return o.AllConditions
}

// GetAllConditionsOk returns a tuple with the AllConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transition) GetAllConditionsOk() ([]Condition, bool) {
	if o == nil || isNil(o.AllConditions) {
		return nil, false
	}
	return o.AllConditions, true
}

// HasAllConditions returns a boolean if a field has been set.
func (o *Transition) HasAllConditions() bool {
	if o != nil && !isNil(o.AllConditions) {
		return true
	}

	return false
}

// SetAllConditions gets a reference to the given []Condition and assigns it to the AllConditions field.
func (o *Transition) SetAllConditions(v []Condition) {
	o.AllConditions = v
}

// GetLeafConditions returns the LeafConditions field value if set, zero value otherwise.
func (o *Transition) GetLeafConditions() []Condition {
	if o == nil || isNil(o.LeafConditions) {
		var ret []Condition
		return ret
	}
	return o.LeafConditions
}

// GetLeafConditionsOk returns a tuple with the LeafConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transition) GetLeafConditionsOk() ([]Condition, bool) {
	if o == nil || isNil(o.LeafConditions) {
		return nil, false
	}
	return o.LeafConditions, true
}

// HasLeafConditions returns a boolean if a field has been set.
func (o *Transition) HasLeafConditions() bool {
	if o != nil && !isNil(o.LeafConditions) {
		return true
	}

	return false
}

// SetLeafConditions gets a reference to the given []Condition and assigns it to the LeafConditions field.
func (o *Transition) SetLeafConditions(v []Condition) {
	o.LeafConditions = v
}

// GetRootCondition returns the RootCondition field value if set, zero value otherwise.
func (o *Transition) GetRootCondition() Condition {
	if o == nil || isNil(o.RootCondition) {
		var ret Condition
		return ret
	}
	return *o.RootCondition
}

// GetRootConditionOk returns a tuple with the RootCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transition) GetRootConditionOk() (*Condition, bool) {
	if o == nil || isNil(o.RootCondition) {
		return nil, false
	}
	return o.RootCondition, true
}

// HasRootCondition returns a boolean if a field has been set.
func (o *Transition) HasRootCondition() bool {
	if o != nil && !isNil(o.RootCondition) {
		return true
	}

	return false
}

// SetRootCondition gets a reference to the given Condition and assigns it to the RootCondition field.
func (o *Transition) SetRootCondition(v Condition) {
	o.RootCondition = &v
}

func (o Transition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Stage) {
		toSerialize["stage"] = o.Stage
	}
	if !isNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !isNil(o.Automated) {
		toSerialize["automated"] = o.Automated
	}
	if !isNil(o.AllConditions) {
		toSerialize["allConditions"] = o.AllConditions
	}
	if !isNil(o.LeafConditions) {
		toSerialize["leafConditions"] = o.LeafConditions
	}
	if !isNil(o.RootCondition) {
		toSerialize["rootCondition"] = o.RootCondition
	}
	return toSerialize, nil
}

type NullableTransition struct {
	value *Transition
	isSet bool
}

func (v NullableTransition) Get() *Transition {
	return v.value
}

func (v *NullableTransition) Set(val *Transition) {
	v.value = val
	v.isSet = true
}

func (v NullableTransition) IsSet() bool {
	return v.isSet
}

func (v *NullableTransition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransition(val *Transition) *NullableTransition {
	return &NullableTransition{value: val, isSet: true}
}

func (v NullableTransition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


