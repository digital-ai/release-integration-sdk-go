/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReleaseGroupStatus the model 'ReleaseGroupStatus'
type ReleaseGroupStatus string

// List of ReleaseGroupStatus
const (
	PLANNED_GROUP ReleaseGroupStatus = "PLANNED_GROUP"
	IN_PROGRESS ReleaseGroupStatus = "IN_PROGRESS"
	PAUSED_GROUP ReleaseGroupStatus = "PAUSED_GROUP"
	FAILING_GROUP ReleaseGroupStatus = "FAILING_GROUP"
	FAILED_GROUP ReleaseGroupStatus = "FAILED_GROUP"
	COMPLETED_GROUP ReleaseGroupStatus = "COMPLETED_GROUP"
	ABORTED_GROUP ReleaseGroupStatus = "ABORTED_GROUP"
)

// All allowed values of ReleaseGroupStatus enum
var AllowedReleaseGroupStatusEnumValues = []ReleaseGroupStatus{
	"PLANNED_GROUP",
	"IN_PROGRESS",
	"PAUSED_GROUP",
	"FAILING_GROUP",
	"FAILED_GROUP",
	"COMPLETED_GROUP",
	"ABORTED_GROUP",
}

func (v *ReleaseGroupStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReleaseGroupStatus(value)
	for _, existing := range AllowedReleaseGroupStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReleaseGroupStatus", value)
}

// NewReleaseGroupStatusFromValue returns a pointer to a valid ReleaseGroupStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReleaseGroupStatusFromValue(v string) (*ReleaseGroupStatus, error) {
	ev := ReleaseGroupStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReleaseGroupStatus: valid values are %v", v, AllowedReleaseGroupStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReleaseGroupStatus) IsValid() bool {
	for _, existing := range AllowedReleaseGroupStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReleaseGroupStatus value
func (v ReleaseGroupStatus) Ptr() *ReleaseGroupStatus {
	return &v
}

type NullableReleaseGroupStatus struct {
	value *ReleaseGroupStatus
	isSet bool
}

func (v NullableReleaseGroupStatus) Get() *ReleaseGroupStatus {
	return v.value
}

func (v *NullableReleaseGroupStatus) Set(val *ReleaseGroupStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseGroupStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseGroupStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseGroupStatus(val *ReleaseGroupStatus) *NullableReleaseGroupStatus {
	return &NullableReleaseGroupStatus{value: val, isSet: true}
}

func (v NullableReleaseGroupStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseGroupStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

