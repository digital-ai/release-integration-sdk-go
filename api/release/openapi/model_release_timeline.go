/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseTimeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseTimeline{}

// ReleaseTimeline struct for ReleaseTimeline
type ReleaseTimeline struct {
	Id *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	ScheduledStartDate *string `json:"scheduledStartDate,omitempty"`
	DueDate *string `json:"dueDate,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	PlannedStartDate *string `json:"plannedStartDate,omitempty"`
	PlannedEndDate *string `json:"plannedEndDate,omitempty"`
	Phases []PhaseTimeline `json:"phases,omitempty"`
	RiskScore *int32 `json:"riskScore,omitempty"`
	Status *ReleaseStatus `json:"status,omitempty"`
}

// NewReleaseTimeline instantiates a new ReleaseTimeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseTimeline() *ReleaseTimeline {
	this := ReleaseTimeline{}
	return &this
}

// NewReleaseTimelineWithDefaults instantiates a new ReleaseTimeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseTimelineWithDefaults() *ReleaseTimeline {
	this := ReleaseTimeline{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReleaseTimeline) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTimeline) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReleaseTimeline) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReleaseTimeline) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ReleaseTimeline) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTimeline) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ReleaseTimeline) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ReleaseTimeline) SetTitle(v string) {
	o.Title = &v
}

// GetScheduledStartDate returns the ScheduledStartDate field value if set, zero value otherwise.
func (o *ReleaseTimeline) GetScheduledStartDate() string {
	if o == nil || isNil(o.ScheduledStartDate) {
		var ret string
		return ret
	}
	return *o.ScheduledStartDate
}

// GetScheduledStartDateOk returns a tuple with the ScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTimeline) GetScheduledStartDateOk() (*string, bool) {
	if o == nil || isNil(o.ScheduledStartDate) {
		return nil, false
	}
	return o.ScheduledStartDate, true
}

// HasScheduledStartDate returns a boolean if a field has been set.
func (o *ReleaseTimeline) HasScheduledStartDate() bool {
	if o != nil && !isNil(o.ScheduledStartDate) {
		return true
	}

	return false
}

// SetScheduledStartDate gets a reference to the given string and assigns it to the ScheduledStartDate field.
func (o *ReleaseTimeline) SetScheduledStartDate(v string) {
	o.ScheduledStartDate = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *ReleaseTimeline) GetDueDate() string {
	if o == nil || isNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTimeline) GetDueDateOk() (*string, bool) {
	if o == nil || isNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *ReleaseTimeline) HasDueDate() bool {
	if o != nil && !isNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *ReleaseTimeline) SetDueDate(v string) {
	o.DueDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ReleaseTimeline) GetStartDate() string {
	if o == nil || isNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTimeline) GetStartDateOk() (*string, bool) {
	if o == nil || isNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ReleaseTimeline) HasStartDate() bool {
	if o != nil && !isNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ReleaseTimeline) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ReleaseTimeline) GetEndDate() string {
	if o == nil || isNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTimeline) GetEndDateOk() (*string, bool) {
	if o == nil || isNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ReleaseTimeline) HasEndDate() bool {
	if o != nil && !isNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ReleaseTimeline) SetEndDate(v string) {
	o.EndDate = &v
}

// GetPlannedStartDate returns the PlannedStartDate field value if set, zero value otherwise.
func (o *ReleaseTimeline) GetPlannedStartDate() string {
	if o == nil || isNil(o.PlannedStartDate) {
		var ret string
		return ret
	}
	return *o.PlannedStartDate
}

// GetPlannedStartDateOk returns a tuple with the PlannedStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTimeline) GetPlannedStartDateOk() (*string, bool) {
	if o == nil || isNil(o.PlannedStartDate) {
		return nil, false
	}
	return o.PlannedStartDate, true
}

// HasPlannedStartDate returns a boolean if a field has been set.
func (o *ReleaseTimeline) HasPlannedStartDate() bool {
	if o != nil && !isNil(o.PlannedStartDate) {
		return true
	}

	return false
}

// SetPlannedStartDate gets a reference to the given string and assigns it to the PlannedStartDate field.
func (o *ReleaseTimeline) SetPlannedStartDate(v string) {
	o.PlannedStartDate = &v
}

// GetPlannedEndDate returns the PlannedEndDate field value if set, zero value otherwise.
func (o *ReleaseTimeline) GetPlannedEndDate() string {
	if o == nil || isNil(o.PlannedEndDate) {
		var ret string
		return ret
	}
	return *o.PlannedEndDate
}

// GetPlannedEndDateOk returns a tuple with the PlannedEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTimeline) GetPlannedEndDateOk() (*string, bool) {
	if o == nil || isNil(o.PlannedEndDate) {
		return nil, false
	}
	return o.PlannedEndDate, true
}

// HasPlannedEndDate returns a boolean if a field has been set.
func (o *ReleaseTimeline) HasPlannedEndDate() bool {
	if o != nil && !isNil(o.PlannedEndDate) {
		return true
	}

	return false
}

// SetPlannedEndDate gets a reference to the given string and assigns it to the PlannedEndDate field.
func (o *ReleaseTimeline) SetPlannedEndDate(v string) {
	o.PlannedEndDate = &v
}

// GetPhases returns the Phases field value if set, zero value otherwise.
func (o *ReleaseTimeline) GetPhases() []PhaseTimeline {
	if o == nil || isNil(o.Phases) {
		var ret []PhaseTimeline
		return ret
	}
	return o.Phases
}

// GetPhasesOk returns a tuple with the Phases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTimeline) GetPhasesOk() ([]PhaseTimeline, bool) {
	if o == nil || isNil(o.Phases) {
		return nil, false
	}
	return o.Phases, true
}

// HasPhases returns a boolean if a field has been set.
func (o *ReleaseTimeline) HasPhases() bool {
	if o != nil && !isNil(o.Phases) {
		return true
	}

	return false
}

// SetPhases gets a reference to the given []PhaseTimeline and assigns it to the Phases field.
func (o *ReleaseTimeline) SetPhases(v []PhaseTimeline) {
	o.Phases = v
}

// GetRiskScore returns the RiskScore field value if set, zero value otherwise.
func (o *ReleaseTimeline) GetRiskScore() int32 {
	if o == nil || isNil(o.RiskScore) {
		var ret int32
		return ret
	}
	return *o.RiskScore
}

// GetRiskScoreOk returns a tuple with the RiskScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTimeline) GetRiskScoreOk() (*int32, bool) {
	if o == nil || isNil(o.RiskScore) {
		return nil, false
	}
	return o.RiskScore, true
}

// HasRiskScore returns a boolean if a field has been set.
func (o *ReleaseTimeline) HasRiskScore() bool {
	if o != nil && !isNil(o.RiskScore) {
		return true
	}

	return false
}

// SetRiskScore gets a reference to the given int32 and assigns it to the RiskScore field.
func (o *ReleaseTimeline) SetRiskScore(v int32) {
	o.RiskScore = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ReleaseTimeline) GetStatus() ReleaseStatus {
	if o == nil || isNil(o.Status) {
		var ret ReleaseStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseTimeline) GetStatusOk() (*ReleaseStatus, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ReleaseTimeline) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ReleaseStatus and assigns it to the Status field.
func (o *ReleaseTimeline) SetStatus(v ReleaseStatus) {
	o.Status = &v
}

func (o ReleaseTimeline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseTimeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.ScheduledStartDate) {
		toSerialize["scheduledStartDate"] = o.ScheduledStartDate
	}
	if !isNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !isNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !isNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !isNil(o.PlannedStartDate) {
		toSerialize["plannedStartDate"] = o.PlannedStartDate
	}
	if !isNil(o.PlannedEndDate) {
		toSerialize["plannedEndDate"] = o.PlannedEndDate
	}
	if !isNil(o.Phases) {
		toSerialize["phases"] = o.Phases
	}
	if !isNil(o.RiskScore) {
		toSerialize["riskScore"] = o.RiskScore
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableReleaseTimeline struct {
	value *ReleaseTimeline
	isSet bool
}

func (v NullableReleaseTimeline) Get() *ReleaseTimeline {
	return v.value
}

func (v *NullableReleaseTimeline) Set(val *ReleaseTimeline) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseTimeline) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseTimeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseTimeline(val *ReleaseTimeline) *NullableReleaseTimeline {
	return &NullableReleaseTimeline{value: val, isSet: true}
}

func (v NullableReleaseTimeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseTimeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


