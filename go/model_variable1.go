/*
Digital.ai Release API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Variable1 struct for Variable1
type Variable1 struct {
	Id *string `json:"id,omitempty"`
	Key *string `json:"key,omitempty"`
	Type *string `json:"type,omitempty"`
	RequiresValue *bool `json:"requiresValue,omitempty"`
	ShowOnReleaseStart *bool `json:"showOnReleaseStart,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
	Label *string `json:"label,omitempty"`
	Description *string `json:"description,omitempty"`
	Multiline *bool `json:"multiline,omitempty"`
	Inherited *bool `json:"inherited,omitempty"`
	PreventInterpolation *bool `json:"preventInterpolation,omitempty"`
	ExternalVariableValue *ExternalVariableValue `json:"externalVariableValue,omitempty"`
	ValueProvider *ValueProviderConfiguration `json:"valueProvider,omitempty"`
}

// NewVariable1 instantiates a new Variable1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariable1() *Variable1 {
	this := Variable1{}
	return &this
}

// NewVariable1WithDefaults instantiates a new Variable1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariable1WithDefaults() *Variable1 {
	this := Variable1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Variable1) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Variable1) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Variable1) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Variable1) GetKey() string {
	if o == nil || isNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetKeyOk() (*string, bool) {
	if o == nil || isNil(o.Key) {
    return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Variable1) HasKey() bool {
	if o != nil && !isNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Variable1) SetKey(v string) {
	o.Key = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Variable1) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Variable1) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Variable1) SetType(v string) {
	o.Type = &v
}

// GetRequiresValue returns the RequiresValue field value if set, zero value otherwise.
func (o *Variable1) GetRequiresValue() bool {
	if o == nil || isNil(o.RequiresValue) {
		var ret bool
		return ret
	}
	return *o.RequiresValue
}

// GetRequiresValueOk returns a tuple with the RequiresValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetRequiresValueOk() (*bool, bool) {
	if o == nil || isNil(o.RequiresValue) {
    return nil, false
	}
	return o.RequiresValue, true
}

// HasRequiresValue returns a boolean if a field has been set.
func (o *Variable1) HasRequiresValue() bool {
	if o != nil && !isNil(o.RequiresValue) {
		return true
	}

	return false
}

// SetRequiresValue gets a reference to the given bool and assigns it to the RequiresValue field.
func (o *Variable1) SetRequiresValue(v bool) {
	o.RequiresValue = &v
}

// GetShowOnReleaseStart returns the ShowOnReleaseStart field value if set, zero value otherwise.
func (o *Variable1) GetShowOnReleaseStart() bool {
	if o == nil || isNil(o.ShowOnReleaseStart) {
		var ret bool
		return ret
	}
	return *o.ShowOnReleaseStart
}

// GetShowOnReleaseStartOk returns a tuple with the ShowOnReleaseStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetShowOnReleaseStartOk() (*bool, bool) {
	if o == nil || isNil(o.ShowOnReleaseStart) {
    return nil, false
	}
	return o.ShowOnReleaseStart, true
}

// HasShowOnReleaseStart returns a boolean if a field has been set.
func (o *Variable1) HasShowOnReleaseStart() bool {
	if o != nil && !isNil(o.ShowOnReleaseStart) {
		return true
	}

	return false
}

// SetShowOnReleaseStart gets a reference to the given bool and assigns it to the ShowOnReleaseStart field.
func (o *Variable1) SetShowOnReleaseStart(v bool) {
	o.ShowOnReleaseStart = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Variable1) GetValue() map[string]interface{} {
	if o == nil || isNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Value) {
    return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Variable1) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *Variable1) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Variable1) GetLabel() string {
	if o == nil || isNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetLabelOk() (*string, bool) {
	if o == nil || isNil(o.Label) {
    return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Variable1) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Variable1) SetLabel(v string) {
	o.Label = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Variable1) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Variable1) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Variable1) SetDescription(v string) {
	o.Description = &v
}

// GetMultiline returns the Multiline field value if set, zero value otherwise.
func (o *Variable1) GetMultiline() bool {
	if o == nil || isNil(o.Multiline) {
		var ret bool
		return ret
	}
	return *o.Multiline
}

// GetMultilineOk returns a tuple with the Multiline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetMultilineOk() (*bool, bool) {
	if o == nil || isNil(o.Multiline) {
    return nil, false
	}
	return o.Multiline, true
}

// HasMultiline returns a boolean if a field has been set.
func (o *Variable1) HasMultiline() bool {
	if o != nil && !isNil(o.Multiline) {
		return true
	}

	return false
}

// SetMultiline gets a reference to the given bool and assigns it to the Multiline field.
func (o *Variable1) SetMultiline(v bool) {
	o.Multiline = &v
}

// GetInherited returns the Inherited field value if set, zero value otherwise.
func (o *Variable1) GetInherited() bool {
	if o == nil || isNil(o.Inherited) {
		var ret bool
		return ret
	}
	return *o.Inherited
}

// GetInheritedOk returns a tuple with the Inherited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetInheritedOk() (*bool, bool) {
	if o == nil || isNil(o.Inherited) {
    return nil, false
	}
	return o.Inherited, true
}

// HasInherited returns a boolean if a field has been set.
func (o *Variable1) HasInherited() bool {
	if o != nil && !isNil(o.Inherited) {
		return true
	}

	return false
}

// SetInherited gets a reference to the given bool and assigns it to the Inherited field.
func (o *Variable1) SetInherited(v bool) {
	o.Inherited = &v
}

// GetPreventInterpolation returns the PreventInterpolation field value if set, zero value otherwise.
func (o *Variable1) GetPreventInterpolation() bool {
	if o == nil || isNil(o.PreventInterpolation) {
		var ret bool
		return ret
	}
	return *o.PreventInterpolation
}

// GetPreventInterpolationOk returns a tuple with the PreventInterpolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetPreventInterpolationOk() (*bool, bool) {
	if o == nil || isNil(o.PreventInterpolation) {
    return nil, false
	}
	return o.PreventInterpolation, true
}

// HasPreventInterpolation returns a boolean if a field has been set.
func (o *Variable1) HasPreventInterpolation() bool {
	if o != nil && !isNil(o.PreventInterpolation) {
		return true
	}

	return false
}

// SetPreventInterpolation gets a reference to the given bool and assigns it to the PreventInterpolation field.
func (o *Variable1) SetPreventInterpolation(v bool) {
	o.PreventInterpolation = &v
}

// GetExternalVariableValue returns the ExternalVariableValue field value if set, zero value otherwise.
func (o *Variable1) GetExternalVariableValue() ExternalVariableValue {
	if o == nil || isNil(o.ExternalVariableValue) {
		var ret ExternalVariableValue
		return ret
	}
	return *o.ExternalVariableValue
}

// GetExternalVariableValueOk returns a tuple with the ExternalVariableValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetExternalVariableValueOk() (*ExternalVariableValue, bool) {
	if o == nil || isNil(o.ExternalVariableValue) {
    return nil, false
	}
	return o.ExternalVariableValue, true
}

// HasExternalVariableValue returns a boolean if a field has been set.
func (o *Variable1) HasExternalVariableValue() bool {
	if o != nil && !isNil(o.ExternalVariableValue) {
		return true
	}

	return false
}

// SetExternalVariableValue gets a reference to the given ExternalVariableValue and assigns it to the ExternalVariableValue field.
func (o *Variable1) SetExternalVariableValue(v ExternalVariableValue) {
	o.ExternalVariableValue = &v
}

// GetValueProvider returns the ValueProvider field value if set, zero value otherwise.
func (o *Variable1) GetValueProvider() ValueProviderConfiguration {
	if o == nil || isNil(o.ValueProvider) {
		var ret ValueProviderConfiguration
		return ret
	}
	return *o.ValueProvider
}

// GetValueProviderOk returns a tuple with the ValueProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable1) GetValueProviderOk() (*ValueProviderConfiguration, bool) {
	if o == nil || isNil(o.ValueProvider) {
    return nil, false
	}
	return o.ValueProvider, true
}

// HasValueProvider returns a boolean if a field has been set.
func (o *Variable1) HasValueProvider() bool {
	if o != nil && !isNil(o.ValueProvider) {
		return true
	}

	return false
}

// SetValueProvider gets a reference to the given ValueProviderConfiguration and assigns it to the ValueProvider field.
func (o *Variable1) SetValueProvider(v ValueProviderConfiguration) {
	o.ValueProvider = &v
}

func (o Variable1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.RequiresValue) {
		toSerialize["requiresValue"] = o.RequiresValue
	}
	if !isNil(o.ShowOnReleaseStart) {
		toSerialize["showOnReleaseStart"] = o.ShowOnReleaseStart
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Multiline) {
		toSerialize["multiline"] = o.Multiline
	}
	if !isNil(o.Inherited) {
		toSerialize["inherited"] = o.Inherited
	}
	if !isNil(o.PreventInterpolation) {
		toSerialize["preventInterpolation"] = o.PreventInterpolation
	}
	if !isNil(o.ExternalVariableValue) {
		toSerialize["externalVariableValue"] = o.ExternalVariableValue
	}
	if !isNil(o.ValueProvider) {
		toSerialize["valueProvider"] = o.ValueProvider
	}
	return json.Marshal(toSerialize)
}

type NullableVariable1 struct {
	value *Variable1
	isSet bool
}

func (v NullableVariable1) Get() *Variable1 {
	return v.value
}

func (v *NullableVariable1) Set(val *Variable1) {
	v.value = val
	v.isSet = true
}

func (v NullableVariable1) IsSet() bool {
	return v.isSet
}

func (v *NullableVariable1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariable1(val *Variable1) *NullableVariable1 {
	return &NullableVariable1{value: val, isSet: true}
}

func (v NullableVariable1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariable1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


